

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Apr 02 17:10:25 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1778
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	dabs	1,0xCA0,32
    42                           	dabs	1,0xC20,80
    43                           	dabs	1,0xBA0,80
    44                           	dabs	1,0xB30,64
    45                           	dabs	1,0x26F0,0,_buffer
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 2.05
    49                           ; Generated 20/12/2018 GMT
    50                           ; 
    51                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F1778 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000D                     	;# 
    96  000E                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0016                     	;# 
   104  0017                     	;# 
   105  0018                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001C                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  0090                     	;# 
   119  0091                     	;# 
   120  0092                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0095                     	;# 
   124  0096                     	;# 
   125  0097                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  0111                     	;# 
   138  0112                     	;# 
   139  0113                     	;# 
   140  0114                     	;# 
   141  0115                     	;# 
   142  0116                     	;# 
   143  0117                     	;# 
   144  0118                     	;# 
   145  0119                     	;# 
   146  011A                     	;# 
   147  011B                     	;# 
   148  011C                     	;# 
   149  011D                     	;# 
   150  018C                     	;# 
   151  018D                     	;# 
   152  018E                     	;# 
   153  0191                     	;# 
   154  0191                     	;# 
   155  0192                     	;# 
   156  0193                     	;# 
   157  0193                     	;# 
   158  0194                     	;# 
   159  0195                     	;# 
   160  0196                     	;# 
   161  0197                     	;# 
   162  0199                     	;# 
   163  0199                     	;# 
   164  0199                     	;# 
   165  019A                     	;# 
   166  019A                     	;# 
   167  019A                     	;# 
   168  019B                     	;# 
   169  019B                     	;# 
   170  019B                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019C                     	;# 
   174  019C                     	;# 
   175  019C                     	;# 
   176  019D                     	;# 
   177  019D                     	;# 
   178  019D                     	;# 
   179  019E                     	;# 
   180  019E                     	;# 
   181  019E                     	;# 
   182  019F                     	;# 
   183  019F                     	;# 
   184  019F                     	;# 
   185  019F                     	;# 
   186  019F                     	;# 
   187  020C                     	;# 
   188  020D                     	;# 
   189  020E                     	;# 
   190  0210                     	;# 
   191  0211                     	;# 
   192  0211                     	;# 
   193  0212                     	;# 
   194  0212                     	;# 
   195  0213                     	;# 
   196  0213                     	;# 
   197  0214                     	;# 
   198  0214                     	;# 
   199  0215                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0216                     	;# 
   204  0216                     	;# 
   205  0217                     	;# 
   206  0217                     	;# 
   207  021B                     	;# 
   208  021C                     	;# 
   209  021D                     	;# 
   210  021E                     	;# 
   211  021F                     	;# 
   212  028C                     	;# 
   213  028D                     	;# 
   214  028E                     	;# 
   215  0291                     	;# 
   216  0291                     	;# 
   217  0292                     	;# 
   218  0293                     	;# 
   219  0294                     	;# 
   220  0295                     	;# 
   221  0295                     	;# 
   222  0296                     	;# 
   223  0297                     	;# 
   224  0298                     	;# 
   225  0299                     	;# 
   226  0299                     	;# 
   227  029A                     	;# 
   228  029B                     	;# 
   229  029C                     	;# 
   230  029E                     	;# 
   231  029F                     	;# 
   232  030C                     	;# 
   233  030D                     	;# 
   234  030E                     	;# 
   235  0315                     	;# 
   236  0316                     	;# 
   237  0317                     	;# 
   238  0318                     	;# 
   239  0319                     	;# 
   240  031B                     	;# 
   241  031C                     	;# 
   242  031D                     	;# 
   243  031E                     	;# 
   244  031F                     	;# 
   245  038C                     	;# 
   246  038D                     	;# 
   247  038E                     	;# 
   248  0390                     	;# 
   249  0391                     	;# 
   250  0392                     	;# 
   251  0393                     	;# 
   252  0394                     	;# 
   253  0395                     	;# 
   254  0396                     	;# 
   255  0397                     	;# 
   256  0398                     	;# 
   257  0399                     	;# 
   258  039D                     	;# 
   259  039E                     	;# 
   260  039F                     	;# 
   261  040D                     	;# 
   262  040F                     	;# 
   263  040F                     	;# 
   264  0410                     	;# 
   265  0411                     	;# 
   266  0412                     	;# 
   267  0413                     	;# 
   268  0413                     	;# 
   269  0414                     	;# 
   270  0414                     	;# 
   271  0415                     	;# 
   272  0416                     	;# 
   273  0417                     	;# 
   274  0418                     	;# 
   275  041A                     	;# 
   276  041A                     	;# 
   277  041B                     	;# 
   278  041B                     	;# 
   279  041C                     	;# 
   280  041D                     	;# 
   281  041E                     	;# 
   282  041F                     	;# 
   283  048E                     	;# 
   284  048E                     	;# 
   285  048F                     	;# 
   286  0490                     	;# 
   287  0491                     	;# 
   288  0492                     	;# 
   289  0493                     	;# 
   290  0493                     	;# 
   291  0494                     	;# 
   292  0494                     	;# 
   293  0495                     	;# 
   294  0496                     	;# 
   295  0497                     	;# 
   296  0498                     	;# 
   297  049A                     	;# 
   298  049A                     	;# 
   299  049B                     	;# 
   300  049B                     	;# 
   301  049C                     	;# 
   302  049D                     	;# 
   303  049E                     	;# 
   304  049F                     	;# 
   305  050F                     	;# 
   306  0510                     	;# 
   307  0511                     	;# 
   308  0512                     	;# 
   309  0513                     	;# 
   310  0514                     	;# 
   311  0515                     	;# 
   312  0516                     	;# 
   313  0517                     	;# 
   314  0518                     	;# 
   315  0519                     	;# 
   316  051A                     	;# 
   317  058D                     	;# 
   318  058E                     	;# 
   319  058F                     	;# 
   320  058F                     	;# 
   321  058F                     	;# 
   322  0590                     	;# 
   323  0590                     	;# 
   324  0591                     	;# 
   325  0592                     	;# 
   326  0592                     	;# 
   327  0592                     	;# 
   328  0593                     	;# 
   329  0593                     	;# 
   330  0594                     	;# 
   331  0595                     	;# 
   332  0595                     	;# 
   333  0596                     	;# 
   334  0597                     	;# 
   335  0597                     	;# 
   336  0598                     	;# 
   337  0599                     	;# 
   338  0599                     	;# 
   339  0599                     	;# 
   340  059A                     	;# 
   341  059A                     	;# 
   342  059E                     	;# 
   343  059F                     	;# 
   344  059F                     	;# 
   345  0614                     	;# 
   346  0614                     	;# 
   347  0615                     	;# 
   348  0616                     	;# 
   349  0617                     	;# 
   350  0617                     	;# 
   351  0618                     	;# 
   352  0619                     	;# 
   353  061A                     	;# 
   354  061A                     	;# 
   355  061B                     	;# 
   356  061C                     	;# 
   357  068D                     	;# 
   358  068E                     	;# 
   359  068F                     	;# 
   360  0690                     	;# 
   361  0691                     	;# 
   362  0692                     	;# 
   363  0693                     	;# 
   364  0694                     	;# 
   365  0695                     	;# 
   366  0696                     	;# 
   367  0697                     	;# 
   368  0698                     	;# 
   369  0699                     	;# 
   370  069A                     	;# 
   371  069B                     	;# 
   372  069C                     	;# 
   373  069D                     	;# 
   374  069E                     	;# 
   375  069F                     	;# 
   376  070D                     	;# 
   377  070E                     	;# 
   378  070F                     	;# 
   379  0710                     	;# 
   380  0711                     	;# 
   381  0712                     	;# 
   382  0713                     	;# 
   383  0714                     	;# 
   384  0715                     	;# 
   385  0716                     	;# 
   386  0717                     	;# 
   387  0718                     	;# 
   388  0719                     	;# 
   389  071A                     	;# 
   390  071B                     	;# 
   391  071C                     	;# 
   392  071D                     	;# 
   393  071E                     	;# 
   394  071F                     	;# 
   395  078E                     	;# 
   396  078F                     	;# 
   397  0790                     	;# 
   398  0791                     	;# 
   399  0792                     	;# 
   400  0793                     	;# 
   401  0794                     	;# 
   402  0795                     	;# 
   403  0796                     	;# 
   404  0797                     	;# 
   405  0798                     	;# 
   406  0799                     	;# 
   407  079A                     	;# 
   408  079B                     	;# 
   409  079C                     	;# 
   410  079D                     	;# 
   411  079E                     	;# 
   412  079F                     	;# 
   413  080D                     	;# 
   414  080E                     	;# 
   415  080F                     	;# 
   416  0810                     	;# 
   417  0811                     	;# 
   418  0812                     	;# 
   419  0813                     	;# 
   420  0814                     	;# 
   421  0815                     	;# 
   422  0816                     	;# 
   423  0817                     	;# 
   424  0818                     	;# 
   425  0819                     	;# 
   426  081A                     	;# 
   427  081B                     	;# 
   428  081C                     	;# 
   429  081D                     	;# 
   430  081E                     	;# 
   431  081F                     	;# 
   432  090C                     	;# 
   433  090D                     	;# 
   434  090E                     	;# 
   435  090F                     	;# 
   436  0910                     	;# 
   437  0911                     	;# 
   438  0912                     	;# 
   439  0913                     	;# 
   440  0914                     	;# 
   441  0915                     	;# 
   442  0916                     	;# 
   443  0917                     	;# 
   444  0D8E                     	;# 
   445  0D8F                     	;# 
   446  0D90                     	;# 
   447  0D91                     	;# 
   448  0D91                     	;# 
   449  0D92                     	;# 
   450  0D93                     	;# 
   451  0D93                     	;# 
   452  0D94                     	;# 
   453  0D95                     	;# 
   454  0D95                     	;# 
   455  0D96                     	;# 
   456  0D97                     	;# 
   457  0D97                     	;# 
   458  0D98                     	;# 
   459  0D99                     	;# 
   460  0D99                     	;# 
   461  0D9A                     	;# 
   462  0D9B                     	;# 
   463  0D9C                     	;# 
   464  0D9C                     	;# 
   465  0D9D                     	;# 
   466  0D9D                     	;# 
   467  0D9E                     	;# 
   468  0D9F                     	;# 
   469  0DA0                     	;# 
   470  0DA1                     	;# 
   471  0DA1                     	;# 
   472  0DA2                     	;# 
   473  0DA3                     	;# 
   474  0DA3                     	;# 
   475  0DA4                     	;# 
   476  0DA5                     	;# 
   477  0DA5                     	;# 
   478  0DA6                     	;# 
   479  0DA7                     	;# 
   480  0DA7                     	;# 
   481  0DA8                     	;# 
   482  0DA9                     	;# 
   483  0DA9                     	;# 
   484  0DAA                     	;# 
   485  0DAB                     	;# 
   486  0DAC                     	;# 
   487  0DAC                     	;# 
   488  0DAD                     	;# 
   489  0DAD                     	;# 
   490  0DAE                     	;# 
   491  0DAF                     	;# 
   492  0DB0                     	;# 
   493  0DB1                     	;# 
   494  0DB1                     	;# 
   495  0DB2                     	;# 
   496  0DB3                     	;# 
   497  0DB3                     	;# 
   498  0DB4                     	;# 
   499  0DB5                     	;# 
   500  0DB5                     	;# 
   501  0DB6                     	;# 
   502  0DB7                     	;# 
   503  0DB7                     	;# 
   504  0DB8                     	;# 
   505  0DB9                     	;# 
   506  0DB9                     	;# 
   507  0DBA                     	;# 
   508  0DBB                     	;# 
   509  0DBC                     	;# 
   510  0DBC                     	;# 
   511  0DBD                     	;# 
   512  0DBD                     	;# 
   513  0DBE                     	;# 
   514  0DBF                     	;# 
   515  0DC0                     	;# 
   516  0E0C                     	;# 
   517  0E0D                     	;# 
   518  0E0E                     	;# 
   519  0E0F                     	;# 
   520  0E10                     	;# 
   521  0E11                     	;# 
   522  0E12                     	;# 
   523  0E13                     	;# 
   524  0E14                     	;# 
   525  0E15                     	;# 
   526  0E15                     	;# 
   527  0E15                     	;# 
   528  0E16                     	;# 
   529  0E16                     	;# 
   530  0E16                     	;# 
   531  0E17                     	;# 
   532  0E17                     	;# 
   533  0E17                     	;# 
   534  0E18                     	;# 
   535  0E18                     	;# 
   536  0E18                     	;# 
   537  0E19                     	;# 
   538  0E1A                     	;# 
   539  0E1B                     	;# 
   540  0E1D                     	;# 
   541  0E1E                     	;# 
   542  0E1F                     	;# 
   543  0E21                     	;# 
   544  0E22                     	;# 
   545  0E23                     	;# 
   546  0E24                     	;# 
   547  0E25                     	;# 
   548  0E26                     	;# 
   549  0E27                     	;# 
   550  0E28                     	;# 
   551  0E29                     	;# 
   552  0E2D                     	;# 
   553  0E2E                     	;# 
   554  0E2F                     	;# 
   555  0E30                     	;# 
   556  0E31                     	;# 
   557  0E32                     	;# 
   558  0E35                     	;# 
   559  0E36                     	;# 
   560  0E37                     	;# 
   561  0E38                     	;# 
   562  0E39                     	;# 
   563  0E3A                     	;# 
   564  0E3B                     	;# 
   565  0E3C                     	;# 
   566  0E3D                     	;# 
   567  0E3E                     	;# 
   568  0E90                     	;# 
   569  0E91                     	;# 
   570  0E92                     	;# 
   571  0E93                     	;# 
   572  0E94                     	;# 
   573  0E95                     	;# 
   574  0E96                     	;# 
   575  0E97                     	;# 
   576  0E98                     	;# 
   577  0E99                     	;# 
   578  0E9A                     	;# 
   579  0E9B                     	;# 
   580  0E9C                     	;# 
   581  0E9D                     	;# 
   582  0E9E                     	;# 
   583  0E9F                     	;# 
   584  0EA0                     	;# 
   585  0EA1                     	;# 
   586  0EA2                     	;# 
   587  0EA3                     	;# 
   588  0EA4                     	;# 
   589  0EA5                     	;# 
   590  0EA6                     	;# 
   591  0EA7                     	;# 
   592  0F0F                     	;# 
   593  0F10                     	;# 
   594  0F11                     	;# 
   595  0F12                     	;# 
   596  0F13                     	;# 
   597  0F14                     	;# 
   598  0F15                     	;# 
   599  0F16                     	;# 
   600  0F17                     	;# 
   601  0F18                     	;# 
   602  0F19                     	;# 
   603  0F1A                     	;# 
   604  0F1B                     	;# 
   605  0F1C                     	;# 
   606  0F1D                     	;# 
   607  0F1E                     	;# 
   608  0F1F                     	;# 
   609  0F20                     	;# 
   610  0F21                     	;# 
   611  0F22                     	;# 
   612  0F23                     	;# 
   613  0F24                     	;# 
   614  0F25                     	;# 
   615  0F26                     	;# 
   616  0F27                     	;# 
   617  0F28                     	;# 
   618  0F29                     	;# 
   619  0F2A                     	;# 
   620  0F2B                     	;# 
   621  0F2C                     	;# 
   622  0F2D                     	;# 
   623  0F2E                     	;# 
   624  0F2F                     	;# 
   625  0F30                     	;# 
   626  0F31                     	;# 
   627  0F32                     	;# 
   628  0F33                     	;# 
   629  0F34                     	;# 
   630  0F35                     	;# 
   631  0F36                     	;# 
   632  0F37                     	;# 
   633  0FE4                     	;# 
   634  0FE5                     	;# 
   635  0FE6                     	;# 
   636  0FE7                     	;# 
   637  0FE8                     	;# 
   638  0FE9                     	;# 
   639  0FEA                     	;# 
   640  0FEB                     	;# 
   641  0FED                     	;# 
   642  0FEE                     	;# 
   643  0FEF                     	;# 
   644  0000                     	;# 
   645  0001                     	;# 
   646  0002                     	;# 
   647  0003                     	;# 
   648  0004                     	;# 
   649  0005                     	;# 
   650  0006                     	;# 
   651  0007                     	;# 
   652  0008                     	;# 
   653  0009                     	;# 
   654  000A                     	;# 
   655  000B                     	;# 
   656  000C                     	;# 
   657  000D                     	;# 
   658  000E                     	;# 
   659  0010                     	;# 
   660  0011                     	;# 
   661  0012                     	;# 
   662  0013                     	;# 
   663  0014                     	;# 
   664  0015                     	;# 
   665  0016                     	;# 
   666  0017                     	;# 
   667  0018                     	;# 
   668  0018                     	;# 
   669  0019                     	;# 
   670  001A                     	;# 
   671  001B                     	;# 
   672  001C                     	;# 
   673  001C                     	;# 
   674  001D                     	;# 
   675  001E                     	;# 
   676  001F                     	;# 
   677  008C                     	;# 
   678  008D                     	;# 
   679  008E                     	;# 
   680  0090                     	;# 
   681  0091                     	;# 
   682  0092                     	;# 
   683  0093                     	;# 
   684  0094                     	;# 
   685  0095                     	;# 
   686  0096                     	;# 
   687  0097                     	;# 
   688  0098                     	;# 
   689  0099                     	;# 
   690  009A                     	;# 
   691  009B                     	;# 
   692  009C                     	;# 
   693  009D                     	;# 
   694  009E                     	;# 
   695  009F                     	;# 
   696  010C                     	;# 
   697  010D                     	;# 
   698  010E                     	;# 
   699  0111                     	;# 
   700  0112                     	;# 
   701  0113                     	;# 
   702  0114                     	;# 
   703  0115                     	;# 
   704  0116                     	;# 
   705  0117                     	;# 
   706  0118                     	;# 
   707  0119                     	;# 
   708  011A                     	;# 
   709  011B                     	;# 
   710  011C                     	;# 
   711  011D                     	;# 
   712  018C                     	;# 
   713  018D                     	;# 
   714  018E                     	;# 
   715  0191                     	;# 
   716  0191                     	;# 
   717  0192                     	;# 
   718  0193                     	;# 
   719  0193                     	;# 
   720  0194                     	;# 
   721  0195                     	;# 
   722  0196                     	;# 
   723  0197                     	;# 
   724  0199                     	;# 
   725  0199                     	;# 
   726  0199                     	;# 
   727  019A                     	;# 
   728  019A                     	;# 
   729  019A                     	;# 
   730  019B                     	;# 
   731  019B                     	;# 
   732  019B                     	;# 
   733  019B                     	;# 
   734  019B                     	;# 
   735  019C                     	;# 
   736  019C                     	;# 
   737  019C                     	;# 
   738  019D                     	;# 
   739  019D                     	;# 
   740  019D                     	;# 
   741  019E                     	;# 
   742  019E                     	;# 
   743  019E                     	;# 
   744  019F                     	;# 
   745  019F                     	;# 
   746  019F                     	;# 
   747  019F                     	;# 
   748  019F                     	;# 
   749  020C                     	;# 
   750  020D                     	;# 
   751  020E                     	;# 
   752  0210                     	;# 
   753  0211                     	;# 
   754  0211                     	;# 
   755  0212                     	;# 
   756  0212                     	;# 
   757  0213                     	;# 
   758  0213                     	;# 
   759  0214                     	;# 
   760  0214                     	;# 
   761  0215                     	;# 
   762  0215                     	;# 
   763  0215                     	;# 
   764  0215                     	;# 
   765  0216                     	;# 
   766  0216                     	;# 
   767  0217                     	;# 
   768  0217                     	;# 
   769  021B                     	;# 
   770  021C                     	;# 
   771  021D                     	;# 
   772  021E                     	;# 
   773  021F                     	;# 
   774  028C                     	;# 
   775  028D                     	;# 
   776  028E                     	;# 
   777  0291                     	;# 
   778  0291                     	;# 
   779  0292                     	;# 
   780  0293                     	;# 
   781  0294                     	;# 
   782  0295                     	;# 
   783  0295                     	;# 
   784  0296                     	;# 
   785  0297                     	;# 
   786  0298                     	;# 
   787  0299                     	;# 
   788  0299                     	;# 
   789  029A                     	;# 
   790  029B                     	;# 
   791  029C                     	;# 
   792  029E                     	;# 
   793  029F                     	;# 
   794  030C                     	;# 
   795  030D                     	;# 
   796  030E                     	;# 
   797  0315                     	;# 
   798  0316                     	;# 
   799  0317                     	;# 
   800  0318                     	;# 
   801  0319                     	;# 
   802  031B                     	;# 
   803  031C                     	;# 
   804  031D                     	;# 
   805  031E                     	;# 
   806  031F                     	;# 
   807  038C                     	;# 
   808  038D                     	;# 
   809  038E                     	;# 
   810  0390                     	;# 
   811  0391                     	;# 
   812  0392                     	;# 
   813  0393                     	;# 
   814  0394                     	;# 
   815  0395                     	;# 
   816  0396                     	;# 
   817  0397                     	;# 
   818  0398                     	;# 
   819  0399                     	;# 
   820  039D                     	;# 
   821  039E                     	;# 
   822  039F                     	;# 
   823  040D                     	;# 
   824  040F                     	;# 
   825  040F                     	;# 
   826  0410                     	;# 
   827  0411                     	;# 
   828  0412                     	;# 
   829  0413                     	;# 
   830  0413                     	;# 
   831  0414                     	;# 
   832  0414                     	;# 
   833  0415                     	;# 
   834  0416                     	;# 
   835  0417                     	;# 
   836  0418                     	;# 
   837  041A                     	;# 
   838  041A                     	;# 
   839  041B                     	;# 
   840  041B                     	;# 
   841  041C                     	;# 
   842  041D                     	;# 
   843  041E                     	;# 
   844  041F                     	;# 
   845  048E                     	;# 
   846  048E                     	;# 
   847  048F                     	;# 
   848  0490                     	;# 
   849  0491                     	;# 
   850  0492                     	;# 
   851  0493                     	;# 
   852  0493                     	;# 
   853  0494                     	;# 
   854  0494                     	;# 
   855  0495                     	;# 
   856  0496                     	;# 
   857  0497                     	;# 
   858  0498                     	;# 
   859  049A                     	;# 
   860  049A                     	;# 
   861  049B                     	;# 
   862  049B                     	;# 
   863  049C                     	;# 
   864  049D                     	;# 
   865  049E                     	;# 
   866  049F                     	;# 
   867  050F                     	;# 
   868  0510                     	;# 
   869  0511                     	;# 
   870  0512                     	;# 
   871  0513                     	;# 
   872  0514                     	;# 
   873  0515                     	;# 
   874  0516                     	;# 
   875  0517                     	;# 
   876  0518                     	;# 
   877  0519                     	;# 
   878  051A                     	;# 
   879  058D                     	;# 
   880  058E                     	;# 
   881  058F                     	;# 
   882  058F                     	;# 
   883  058F                     	;# 
   884  0590                     	;# 
   885  0590                     	;# 
   886  0591                     	;# 
   887  0592                     	;# 
   888  0592                     	;# 
   889  0592                     	;# 
   890  0593                     	;# 
   891  0593                     	;# 
   892  0594                     	;# 
   893  0595                     	;# 
   894  0595                     	;# 
   895  0596                     	;# 
   896  0597                     	;# 
   897  0597                     	;# 
   898  0598                     	;# 
   899  0599                     	;# 
   900  0599                     	;# 
   901  0599                     	;# 
   902  059A                     	;# 
   903  059A                     	;# 
   904  059E                     	;# 
   905  059F                     	;# 
   906  059F                     	;# 
   907  0614                     	;# 
   908  0614                     	;# 
   909  0615                     	;# 
   910  0616                     	;# 
   911  0617                     	;# 
   912  0617                     	;# 
   913  0618                     	;# 
   914  0619                     	;# 
   915  061A                     	;# 
   916  061A                     	;# 
   917  061B                     	;# 
   918  061C                     	;# 
   919  068D                     	;# 
   920  068E                     	;# 
   921  068F                     	;# 
   922  0690                     	;# 
   923  0691                     	;# 
   924  0692                     	;# 
   925  0693                     	;# 
   926  0694                     	;# 
   927  0695                     	;# 
   928  0696                     	;# 
   929  0697                     	;# 
   930  0698                     	;# 
   931  0699                     	;# 
   932  069A                     	;# 
   933  069B                     	;# 
   934  069C                     	;# 
   935  069D                     	;# 
   936  069E                     	;# 
   937  069F                     	;# 
   938  070D                     	;# 
   939  070E                     	;# 
   940  070F                     	;# 
   941  0710                     	;# 
   942  0711                     	;# 
   943  0712                     	;# 
   944  0713                     	;# 
   945  0714                     	;# 
   946  0715                     	;# 
   947  0716                     	;# 
   948  0717                     	;# 
   949  0718                     	;# 
   950  0719                     	;# 
   951  071A                     	;# 
   952  071B                     	;# 
   953  071C                     	;# 
   954  071D                     	;# 
   955  071E                     	;# 
   956  071F                     	;# 
   957  078E                     	;# 
   958  078F                     	;# 
   959  0790                     	;# 
   960  0791                     	;# 
   961  0792                     	;# 
   962  0793                     	;# 
   963  0794                     	;# 
   964  0795                     	;# 
   965  0796                     	;# 
   966  0797                     	;# 
   967  0798                     	;# 
   968  0799                     	;# 
   969  079A                     	;# 
   970  079B                     	;# 
   971  079C                     	;# 
   972  079D                     	;# 
   973  079E                     	;# 
   974  079F                     	;# 
   975  080D                     	;# 
   976  080E                     	;# 
   977  080F                     	;# 
   978  0810                     	;# 
   979  0811                     	;# 
   980  0812                     	;# 
   981  0813                     	;# 
   982  0814                     	;# 
   983  0815                     	;# 
   984  0816                     	;# 
   985  0817                     	;# 
   986  0818                     	;# 
   987  0819                     	;# 
   988  081A                     	;# 
   989  081B                     	;# 
   990  081C                     	;# 
   991  081D                     	;# 
   992  081E                     	;# 
   993  081F                     	;# 
   994  090C                     	;# 
   995  090D                     	;# 
   996  090E                     	;# 
   997  090F                     	;# 
   998  0910                     	;# 
   999  0911                     	;# 
  1000  0912                     	;# 
  1001  0913                     	;# 
  1002  0914                     	;# 
  1003  0915                     	;# 
  1004  0916                     	;# 
  1005  0917                     	;# 
  1006  0D8E                     	;# 
  1007  0D8F                     	;# 
  1008  0D90                     	;# 
  1009  0D91                     	;# 
  1010  0D91                     	;# 
  1011  0D92                     	;# 
  1012  0D93                     	;# 
  1013  0D93                     	;# 
  1014  0D94                     	;# 
  1015  0D95                     	;# 
  1016  0D95                     	;# 
  1017  0D96                     	;# 
  1018  0D97                     	;# 
  1019  0D97                     	;# 
  1020  0D98                     	;# 
  1021  0D99                     	;# 
  1022  0D99                     	;# 
  1023  0D9A                     	;# 
  1024  0D9B                     	;# 
  1025  0D9C                     	;# 
  1026  0D9C                     	;# 
  1027  0D9D                     	;# 
  1028  0D9D                     	;# 
  1029  0D9E                     	;# 
  1030  0D9F                     	;# 
  1031  0DA0                     	;# 
  1032  0DA1                     	;# 
  1033  0DA1                     	;# 
  1034  0DA2                     	;# 
  1035  0DA3                     	;# 
  1036  0DA3                     	;# 
  1037  0DA4                     	;# 
  1038  0DA5                     	;# 
  1039  0DA5                     	;# 
  1040  0DA6                     	;# 
  1041  0DA7                     	;# 
  1042  0DA7                     	;# 
  1043  0DA8                     	;# 
  1044  0DA9                     	;# 
  1045  0DA9                     	;# 
  1046  0DAA                     	;# 
  1047  0DAB                     	;# 
  1048  0DAC                     	;# 
  1049  0DAC                     	;# 
  1050  0DAD                     	;# 
  1051  0DAD                     	;# 
  1052  0DAE                     	;# 
  1053  0DAF                     	;# 
  1054  0DB0                     	;# 
  1055  0DB1                     	;# 
  1056  0DB1                     	;# 
  1057  0DB2                     	;# 
  1058  0DB3                     	;# 
  1059  0DB3                     	;# 
  1060  0DB4                     	;# 
  1061  0DB5                     	;# 
  1062  0DB5                     	;# 
  1063  0DB6                     	;# 
  1064  0DB7                     	;# 
  1065  0DB7                     	;# 
  1066  0DB8                     	;# 
  1067  0DB9                     	;# 
  1068  0DB9                     	;# 
  1069  0DBA                     	;# 
  1070  0DBB                     	;# 
  1071  0DBC                     	;# 
  1072  0DBC                     	;# 
  1073  0DBD                     	;# 
  1074  0DBD                     	;# 
  1075  0DBE                     	;# 
  1076  0DBF                     	;# 
  1077  0DC0                     	;# 
  1078  0E0C                     	;# 
  1079  0E0D                     	;# 
  1080  0E0E                     	;# 
  1081  0E0F                     	;# 
  1082  0E10                     	;# 
  1083  0E11                     	;# 
  1084  0E12                     	;# 
  1085  0E13                     	;# 
  1086  0E14                     	;# 
  1087  0E15                     	;# 
  1088  0E15                     	;# 
  1089  0E15                     	;# 
  1090  0E16                     	;# 
  1091  0E16                     	;# 
  1092  0E16                     	;# 
  1093  0E17                     	;# 
  1094  0E17                     	;# 
  1095  0E17                     	;# 
  1096  0E18                     	;# 
  1097  0E18                     	;# 
  1098  0E18                     	;# 
  1099  0E19                     	;# 
  1100  0E1A                     	;# 
  1101  0E1B                     	;# 
  1102  0E1D                     	;# 
  1103  0E1E                     	;# 
  1104  0E1F                     	;# 
  1105  0E21                     	;# 
  1106  0E22                     	;# 
  1107  0E23                     	;# 
  1108  0E24                     	;# 
  1109  0E25                     	;# 
  1110  0E26                     	;# 
  1111  0E27                     	;# 
  1112  0E28                     	;# 
  1113  0E29                     	;# 
  1114  0E2D                     	;# 
  1115  0E2E                     	;# 
  1116  0E2F                     	;# 
  1117  0E30                     	;# 
  1118  0E31                     	;# 
  1119  0E32                     	;# 
  1120  0E35                     	;# 
  1121  0E36                     	;# 
  1122  0E37                     	;# 
  1123  0E38                     	;# 
  1124  0E39                     	;# 
  1125  0E3A                     	;# 
  1126  0E3B                     	;# 
  1127  0E3C                     	;# 
  1128  0E3D                     	;# 
  1129  0E3E                     	;# 
  1130  0E90                     	;# 
  1131  0E91                     	;# 
  1132  0E92                     	;# 
  1133  0E93                     	;# 
  1134  0E94                     	;# 
  1135  0E95                     	;# 
  1136  0E96                     	;# 
  1137  0E97                     	;# 
  1138  0E98                     	;# 
  1139  0E99                     	;# 
  1140  0E9A                     	;# 
  1141  0E9B                     	;# 
  1142  0E9C                     	;# 
  1143  0E9D                     	;# 
  1144  0E9E                     	;# 
  1145  0E9F                     	;# 
  1146  0EA0                     	;# 
  1147  0EA1                     	;# 
  1148  0EA2                     	;# 
  1149  0EA3                     	;# 
  1150  0EA4                     	;# 
  1151  0EA5                     	;# 
  1152  0EA6                     	;# 
  1153  0EA7                     	;# 
  1154  0F0F                     	;# 
  1155  0F10                     	;# 
  1156  0F11                     	;# 
  1157  0F12                     	;# 
  1158  0F13                     	;# 
  1159  0F14                     	;# 
  1160  0F15                     	;# 
  1161  0F16                     	;# 
  1162  0F17                     	;# 
  1163  0F18                     	;# 
  1164  0F19                     	;# 
  1165  0F1A                     	;# 
  1166  0F1B                     	;# 
  1167  0F1C                     	;# 
  1168  0F1D                     	;# 
  1169  0F1E                     	;# 
  1170  0F1F                     	;# 
  1171  0F20                     	;# 
  1172  0F21                     	;# 
  1173  0F22                     	;# 
  1174  0F23                     	;# 
  1175  0F24                     	;# 
  1176  0F25                     	;# 
  1177  0F26                     	;# 
  1178  0F27                     	;# 
  1179  0F28                     	;# 
  1180  0F29                     	;# 
  1181  0F2A                     	;# 
  1182  0F2B                     	;# 
  1183  0F2C                     	;# 
  1184  0F2D                     	;# 
  1185  0F2E                     	;# 
  1186  0F2F                     	;# 
  1187  0F30                     	;# 
  1188  0F31                     	;# 
  1189  0F32                     	;# 
  1190  0F33                     	;# 
  1191  0F34                     	;# 
  1192  0F35                     	;# 
  1193  0F36                     	;# 
  1194  0F37                     	;# 
  1195  0FE4                     	;# 
  1196  0FE5                     	;# 
  1197  0FE6                     	;# 
  1198  0FE7                     	;# 
  1199  0FE8                     	;# 
  1200  0FE9                     	;# 
  1201  0FEA                     	;# 
  1202  0FEB                     	;# 
  1203  0FED                     	;# 
  1204  0FEE                     	;# 
  1205  0FEF                     	;# 
  1206  0000                     	;# 
  1207  0001                     	;# 
  1208  0002                     	;# 
  1209  0003                     	;# 
  1210  0004                     	;# 
  1211  0005                     	;# 
  1212  0006                     	;# 
  1213  0007                     	;# 
  1214  0008                     	;# 
  1215  0009                     	;# 
  1216  000A                     	;# 
  1217  000B                     	;# 
  1218  000C                     	;# 
  1219  000D                     	;# 
  1220  000E                     	;# 
  1221  0010                     	;# 
  1222  0011                     	;# 
  1223  0012                     	;# 
  1224  0013                     	;# 
  1225  0014                     	;# 
  1226  0015                     	;# 
  1227  0016                     	;# 
  1228  0017                     	;# 
  1229  0018                     	;# 
  1230  0018                     	;# 
  1231  0019                     	;# 
  1232  001A                     	;# 
  1233  001B                     	;# 
  1234  001C                     	;# 
  1235  001C                     	;# 
  1236  001D                     	;# 
  1237  001E                     	;# 
  1238  001F                     	;# 
  1239  008C                     	;# 
  1240  008D                     	;# 
  1241  008E                     	;# 
  1242  0090                     	;# 
  1243  0091                     	;# 
  1244  0092                     	;# 
  1245  0093                     	;# 
  1246  0094                     	;# 
  1247  0095                     	;# 
  1248  0096                     	;# 
  1249  0097                     	;# 
  1250  0098                     	;# 
  1251  0099                     	;# 
  1252  009A                     	;# 
  1253  009B                     	;# 
  1254  009C                     	;# 
  1255  009D                     	;# 
  1256  009E                     	;# 
  1257  009F                     	;# 
  1258  010C                     	;# 
  1259  010D                     	;# 
  1260  010E                     	;# 
  1261  0111                     	;# 
  1262  0112                     	;# 
  1263  0113                     	;# 
  1264  0114                     	;# 
  1265  0115                     	;# 
  1266  0116                     	;# 
  1267  0117                     	;# 
  1268  0118                     	;# 
  1269  0119                     	;# 
  1270  011A                     	;# 
  1271  011B                     	;# 
  1272  011C                     	;# 
  1273  011D                     	;# 
  1274  018C                     	;# 
  1275  018D                     	;# 
  1276  018E                     	;# 
  1277  0191                     	;# 
  1278  0191                     	;# 
  1279  0192                     	;# 
  1280  0193                     	;# 
  1281  0193                     	;# 
  1282  0194                     	;# 
  1283  0195                     	;# 
  1284  0196                     	;# 
  1285  0197                     	;# 
  1286  0199                     	;# 
  1287  0199                     	;# 
  1288  0199                     	;# 
  1289  019A                     	;# 
  1290  019A                     	;# 
  1291  019A                     	;# 
  1292  019B                     	;# 
  1293  019B                     	;# 
  1294  019B                     	;# 
  1295  019B                     	;# 
  1296  019B                     	;# 
  1297  019C                     	;# 
  1298  019C                     	;# 
  1299  019C                     	;# 
  1300  019D                     	;# 
  1301  019D                     	;# 
  1302  019D                     	;# 
  1303  019E                     	;# 
  1304  019E                     	;# 
  1305  019E                     	;# 
  1306  019F                     	;# 
  1307  019F                     	;# 
  1308  019F                     	;# 
  1309  019F                     	;# 
  1310  019F                     	;# 
  1311  020C                     	;# 
  1312  020D                     	;# 
  1313  020E                     	;# 
  1314  0210                     	;# 
  1315  0211                     	;# 
  1316  0211                     	;# 
  1317  0212                     	;# 
  1318  0212                     	;# 
  1319  0213                     	;# 
  1320  0213                     	;# 
  1321  0214                     	;# 
  1322  0214                     	;# 
  1323  0215                     	;# 
  1324  0215                     	;# 
  1325  0215                     	;# 
  1326  0215                     	;# 
  1327  0216                     	;# 
  1328  0216                     	;# 
  1329  0217                     	;# 
  1330  0217                     	;# 
  1331  021B                     	;# 
  1332  021C                     	;# 
  1333  021D                     	;# 
  1334  021E                     	;# 
  1335  021F                     	;# 
  1336  028C                     	;# 
  1337  028D                     	;# 
  1338  028E                     	;# 
  1339  0291                     	;# 
  1340  0291                     	;# 
  1341  0292                     	;# 
  1342  0293                     	;# 
  1343  0294                     	;# 
  1344  0295                     	;# 
  1345  0295                     	;# 
  1346  0296                     	;# 
  1347  0297                     	;# 
  1348  0298                     	;# 
  1349  0299                     	;# 
  1350  0299                     	;# 
  1351  029A                     	;# 
  1352  029B                     	;# 
  1353  029C                     	;# 
  1354  029E                     	;# 
  1355  029F                     	;# 
  1356  030C                     	;# 
  1357  030D                     	;# 
  1358  030E                     	;# 
  1359  0315                     	;# 
  1360  0316                     	;# 
  1361  0317                     	;# 
  1362  0318                     	;# 
  1363  0319                     	;# 
  1364  031B                     	;# 
  1365  031C                     	;# 
  1366  031D                     	;# 
  1367  031E                     	;# 
  1368  031F                     	;# 
  1369  038C                     	;# 
  1370  038D                     	;# 
  1371  038E                     	;# 
  1372  0390                     	;# 
  1373  0391                     	;# 
  1374  0392                     	;# 
  1375  0393                     	;# 
  1376  0394                     	;# 
  1377  0395                     	;# 
  1378  0396                     	;# 
  1379  0397                     	;# 
  1380  0398                     	;# 
  1381  0399                     	;# 
  1382  039D                     	;# 
  1383  039E                     	;# 
  1384  039F                     	;# 
  1385  040D                     	;# 
  1386  040F                     	;# 
  1387  040F                     	;# 
  1388  0410                     	;# 
  1389  0411                     	;# 
  1390  0412                     	;# 
  1391  0413                     	;# 
  1392  0413                     	;# 
  1393  0414                     	;# 
  1394  0414                     	;# 
  1395  0415                     	;# 
  1396  0416                     	;# 
  1397  0417                     	;# 
  1398  0418                     	;# 
  1399  041A                     	;# 
  1400  041A                     	;# 
  1401  041B                     	;# 
  1402  041B                     	;# 
  1403  041C                     	;# 
  1404  041D                     	;# 
  1405  041E                     	;# 
  1406  041F                     	;# 
  1407  048E                     	;# 
  1408  048E                     	;# 
  1409  048F                     	;# 
  1410  0490                     	;# 
  1411  0491                     	;# 
  1412  0492                     	;# 
  1413  0493                     	;# 
  1414  0493                     	;# 
  1415  0494                     	;# 
  1416  0494                     	;# 
  1417  0495                     	;# 
  1418  0496                     	;# 
  1419  0497                     	;# 
  1420  0498                     	;# 
  1421  049A                     	;# 
  1422  049A                     	;# 
  1423  049B                     	;# 
  1424  049B                     	;# 
  1425  049C                     	;# 
  1426  049D                     	;# 
  1427  049E                     	;# 
  1428  049F                     	;# 
  1429  050F                     	;# 
  1430  0510                     	;# 
  1431  0511                     	;# 
  1432  0512                     	;# 
  1433  0513                     	;# 
  1434  0514                     	;# 
  1435  0515                     	;# 
  1436  0516                     	;# 
  1437  0517                     	;# 
  1438  0518                     	;# 
  1439  0519                     	;# 
  1440  051A                     	;# 
  1441  058D                     	;# 
  1442  058E                     	;# 
  1443  058F                     	;# 
  1444  058F                     	;# 
  1445  058F                     	;# 
  1446  0590                     	;# 
  1447  0590                     	;# 
  1448  0591                     	;# 
  1449  0592                     	;# 
  1450  0592                     	;# 
  1451  0592                     	;# 
  1452  0593                     	;# 
  1453  0593                     	;# 
  1454  0594                     	;# 
  1455  0595                     	;# 
  1456  0595                     	;# 
  1457  0596                     	;# 
  1458  0597                     	;# 
  1459  0597                     	;# 
  1460  0598                     	;# 
  1461  0599                     	;# 
  1462  0599                     	;# 
  1463  0599                     	;# 
  1464  059A                     	;# 
  1465  059A                     	;# 
  1466  059E                     	;# 
  1467  059F                     	;# 
  1468  059F                     	;# 
  1469  0614                     	;# 
  1470  0614                     	;# 
  1471  0615                     	;# 
  1472  0616                     	;# 
  1473  0617                     	;# 
  1474  0617                     	;# 
  1475  0618                     	;# 
  1476  0619                     	;# 
  1477  061A                     	;# 
  1478  061A                     	;# 
  1479  061B                     	;# 
  1480  061C                     	;# 
  1481  068D                     	;# 
  1482  068E                     	;# 
  1483  068F                     	;# 
  1484  0690                     	;# 
  1485  0691                     	;# 
  1486  0692                     	;# 
  1487  0693                     	;# 
  1488  0694                     	;# 
  1489  0695                     	;# 
  1490  0696                     	;# 
  1491  0697                     	;# 
  1492  0698                     	;# 
  1493  0699                     	;# 
  1494  069A                     	;# 
  1495  069B                     	;# 
  1496  069C                     	;# 
  1497  069D                     	;# 
  1498  069E                     	;# 
  1499  069F                     	;# 
  1500  070D                     	;# 
  1501  070E                     	;# 
  1502  070F                     	;# 
  1503  0710                     	;# 
  1504  0711                     	;# 
  1505  0712                     	;# 
  1506  0713                     	;# 
  1507  0714                     	;# 
  1508  0715                     	;# 
  1509  0716                     	;# 
  1510  0717                     	;# 
  1511  0718                     	;# 
  1512  0719                     	;# 
  1513  071A                     	;# 
  1514  071B                     	;# 
  1515  071C                     	;# 
  1516  071D                     	;# 
  1517  071E                     	;# 
  1518  071F                     	;# 
  1519  078E                     	;# 
  1520  078F                     	;# 
  1521  0790                     	;# 
  1522  0791                     	;# 
  1523  0792                     	;# 
  1524  0793                     	;# 
  1525  0794                     	;# 
  1526  0795                     	;# 
  1527  0796                     	;# 
  1528  0797                     	;# 
  1529  0798                     	;# 
  1530  0799                     	;# 
  1531  079A                     	;# 
  1532  079B                     	;# 
  1533  079C                     	;# 
  1534  079D                     	;# 
  1535  079E                     	;# 
  1536  079F                     	;# 
  1537  080D                     	;# 
  1538  080E                     	;# 
  1539  080F                     	;# 
  1540  0810                     	;# 
  1541  0811                     	;# 
  1542  0812                     	;# 
  1543  0813                     	;# 
  1544  0814                     	;# 
  1545  0815                     	;# 
  1546  0816                     	;# 
  1547  0817                     	;# 
  1548  0818                     	;# 
  1549  0819                     	;# 
  1550  081A                     	;# 
  1551  081B                     	;# 
  1552  081C                     	;# 
  1553  081D                     	;# 
  1554  081E                     	;# 
  1555  081F                     	;# 
  1556  090C                     	;# 
  1557  090D                     	;# 
  1558  090E                     	;# 
  1559  090F                     	;# 
  1560  0910                     	;# 
  1561  0911                     	;# 
  1562  0912                     	;# 
  1563  0913                     	;# 
  1564  0914                     	;# 
  1565  0915                     	;# 
  1566  0916                     	;# 
  1567  0917                     	;# 
  1568  0D8E                     	;# 
  1569  0D8F                     	;# 
  1570  0D90                     	;# 
  1571  0D91                     	;# 
  1572  0D91                     	;# 
  1573  0D92                     	;# 
  1574  0D93                     	;# 
  1575  0D93                     	;# 
  1576  0D94                     	;# 
  1577  0D95                     	;# 
  1578  0D95                     	;# 
  1579  0D96                     	;# 
  1580  0D97                     	;# 
  1581  0D97                     	;# 
  1582  0D98                     	;# 
  1583  0D99                     	;# 
  1584  0D99                     	;# 
  1585  0D9A                     	;# 
  1586  0D9B                     	;# 
  1587  0D9C                     	;# 
  1588  0D9C                     	;# 
  1589  0D9D                     	;# 
  1590  0D9D                     	;# 
  1591  0D9E                     	;# 
  1592  0D9F                     	;# 
  1593  0DA0                     	;# 
  1594  0DA1                     	;# 
  1595  0DA1                     	;# 
  1596  0DA2                     	;# 
  1597  0DA3                     	;# 
  1598  0DA3                     	;# 
  1599  0DA4                     	;# 
  1600  0DA5                     	;# 
  1601  0DA5                     	;# 
  1602  0DA6                     	;# 
  1603  0DA7                     	;# 
  1604  0DA7                     	;# 
  1605  0DA8                     	;# 
  1606  0DA9                     	;# 
  1607  0DA9                     	;# 
  1608  0DAA                     	;# 
  1609  0DAB                     	;# 
  1610  0DAC                     	;# 
  1611  0DAC                     	;# 
  1612  0DAD                     	;# 
  1613  0DAD                     	;# 
  1614  0DAE                     	;# 
  1615  0DAF                     	;# 
  1616  0DB0                     	;# 
  1617  0DB1                     	;# 
  1618  0DB1                     	;# 
  1619  0DB2                     	;# 
  1620  0DB3                     	;# 
  1621  0DB3                     	;# 
  1622  0DB4                     	;# 
  1623  0DB5                     	;# 
  1624  0DB5                     	;# 
  1625  0DB6                     	;# 
  1626  0DB7                     	;# 
  1627  0DB7                     	;# 
  1628  0DB8                     	;# 
  1629  0DB9                     	;# 
  1630  0DB9                     	;# 
  1631  0DBA                     	;# 
  1632  0DBB                     	;# 
  1633  0DBC                     	;# 
  1634  0DBC                     	;# 
  1635  0DBD                     	;# 
  1636  0DBD                     	;# 
  1637  0DBE                     	;# 
  1638  0DBF                     	;# 
  1639  0DC0                     	;# 
  1640  0E0C                     	;# 
  1641  0E0D                     	;# 
  1642  0E0E                     	;# 
  1643  0E0F                     	;# 
  1644  0E10                     	;# 
  1645  0E11                     	;# 
  1646  0E12                     	;# 
  1647  0E13                     	;# 
  1648  0E14                     	;# 
  1649  0E15                     	;# 
  1650  0E15                     	;# 
  1651  0E15                     	;# 
  1652  0E16                     	;# 
  1653  0E16                     	;# 
  1654  0E16                     	;# 
  1655  0E17                     	;# 
  1656  0E17                     	;# 
  1657  0E17                     	;# 
  1658  0E18                     	;# 
  1659  0E18                     	;# 
  1660  0E18                     	;# 
  1661  0E19                     	;# 
  1662  0E1A                     	;# 
  1663  0E1B                     	;# 
  1664  0E1D                     	;# 
  1665  0E1E                     	;# 
  1666  0E1F                     	;# 
  1667  0E21                     	;# 
  1668  0E22                     	;# 
  1669  0E23                     	;# 
  1670  0E24                     	;# 
  1671  0E25                     	;# 
  1672  0E26                     	;# 
  1673  0E27                     	;# 
  1674  0E28                     	;# 
  1675  0E29                     	;# 
  1676  0E2D                     	;# 
  1677  0E2E                     	;# 
  1678  0E2F                     	;# 
  1679  0E30                     	;# 
  1680  0E31                     	;# 
  1681  0E32                     	;# 
  1682  0E35                     	;# 
  1683  0E36                     	;# 
  1684  0E37                     	;# 
  1685  0E38                     	;# 
  1686  0E39                     	;# 
  1687  0E3A                     	;# 
  1688  0E3B                     	;# 
  1689  0E3C                     	;# 
  1690  0E3D                     	;# 
  1691  0E3E                     	;# 
  1692  0E90                     	;# 
  1693  0E91                     	;# 
  1694  0E92                     	;# 
  1695  0E93                     	;# 
  1696  0E94                     	;# 
  1697  0E95                     	;# 
  1698  0E96                     	;# 
  1699  0E97                     	;# 
  1700  0E98                     	;# 
  1701  0E99                     	;# 
  1702  0E9A                     	;# 
  1703  0E9B                     	;# 
  1704  0E9C                     	;# 
  1705  0E9D                     	;# 
  1706  0E9E                     	;# 
  1707  0E9F                     	;# 
  1708  0EA0                     	;# 
  1709  0EA1                     	;# 
  1710  0EA2                     	;# 
  1711  0EA3                     	;# 
  1712  0EA4                     	;# 
  1713  0EA5                     	;# 
  1714  0EA6                     	;# 
  1715  0EA7                     	;# 
  1716  0F0F                     	;# 
  1717  0F10                     	;# 
  1718  0F11                     	;# 
  1719  0F12                     	;# 
  1720  0F13                     	;# 
  1721  0F14                     	;# 
  1722  0F15                     	;# 
  1723  0F16                     	;# 
  1724  0F17                     	;# 
  1725  0F18                     	;# 
  1726  0F19                     	;# 
  1727  0F1A                     	;# 
  1728  0F1B                     	;# 
  1729  0F1C                     	;# 
  1730  0F1D                     	;# 
  1731  0F1E                     	;# 
  1732  0F1F                     	;# 
  1733  0F20                     	;# 
  1734  0F21                     	;# 
  1735  0F22                     	;# 
  1736  0F23                     	;# 
  1737  0F24                     	;# 
  1738  0F25                     	;# 
  1739  0F26                     	;# 
  1740  0F27                     	;# 
  1741  0F28                     	;# 
  1742  0F29                     	;# 
  1743  0F2A                     	;# 
  1744  0F2B                     	;# 
  1745  0F2C                     	;# 
  1746  0F2D                     	;# 
  1747  0F2E                     	;# 
  1748  0F2F                     	;# 
  1749  0F30                     	;# 
  1750  0F31                     	;# 
  1751  0F32                     	;# 
  1752  0F33                     	;# 
  1753  0F34                     	;# 
  1754  0F35                     	;# 
  1755  0F36                     	;# 
  1756  0F37                     	;# 
  1757  0FE4                     	;# 
  1758  0FE5                     	;# 
  1759  0FE6                     	;# 
  1760  0FE7                     	;# 
  1761  0FE8                     	;# 
  1762  0FE9                     	;# 
  1763  0FEA                     	;# 
  1764  0FEB                     	;# 
  1765  0FED                     	;# 
  1766  0FEE                     	;# 
  1767  0FEF                     	;# 
  1768  0000                     	;# 
  1769  0001                     	;# 
  1770  0002                     	;# 
  1771  0003                     	;# 
  1772  0004                     	;# 
  1773  0005                     	;# 
  1774  0006                     	;# 
  1775  0007                     	;# 
  1776  0008                     	;# 
  1777  0009                     	;# 
  1778  000A                     	;# 
  1779  000B                     	;# 
  1780  000C                     	;# 
  1781  000D                     	;# 
  1782  000E                     	;# 
  1783  0010                     	;# 
  1784  0011                     	;# 
  1785  0012                     	;# 
  1786  0013                     	;# 
  1787  0014                     	;# 
  1788  0015                     	;# 
  1789  0016                     	;# 
  1790  0017                     	;# 
  1791  0018                     	;# 
  1792  0018                     	;# 
  1793  0019                     	;# 
  1794  001A                     	;# 
  1795  001B                     	;# 
  1796  001C                     	;# 
  1797  001C                     	;# 
  1798  001D                     	;# 
  1799  001E                     	;# 
  1800  001F                     	;# 
  1801  008C                     	;# 
  1802  008D                     	;# 
  1803  008E                     	;# 
  1804  0090                     	;# 
  1805  0091                     	;# 
  1806  0092                     	;# 
  1807  0093                     	;# 
  1808  0094                     	;# 
  1809  0095                     	;# 
  1810  0096                     	;# 
  1811  0097                     	;# 
  1812  0098                     	;# 
  1813  0099                     	;# 
  1814  009A                     	;# 
  1815  009B                     	;# 
  1816  009C                     	;# 
  1817  009D                     	;# 
  1818  009E                     	;# 
  1819  009F                     	;# 
  1820  010C                     	;# 
  1821  010D                     	;# 
  1822  010E                     	;# 
  1823  0111                     	;# 
  1824  0112                     	;# 
  1825  0113                     	;# 
  1826  0114                     	;# 
  1827  0115                     	;# 
  1828  0116                     	;# 
  1829  0117                     	;# 
  1830  0118                     	;# 
  1831  0119                     	;# 
  1832  011A                     	;# 
  1833  011B                     	;# 
  1834  011C                     	;# 
  1835  011D                     	;# 
  1836  018C                     	;# 
  1837  018D                     	;# 
  1838  018E                     	;# 
  1839  0191                     	;# 
  1840  0191                     	;# 
  1841  0192                     	;# 
  1842  0193                     	;# 
  1843  0193                     	;# 
  1844  0194                     	;# 
  1845  0195                     	;# 
  1846  0196                     	;# 
  1847  0197                     	;# 
  1848  0199                     	;# 
  1849  0199                     	;# 
  1850  0199                     	;# 
  1851  019A                     	;# 
  1852  019A                     	;# 
  1853  019A                     	;# 
  1854  019B                     	;# 
  1855  019B                     	;# 
  1856  019B                     	;# 
  1857  019B                     	;# 
  1858  019B                     	;# 
  1859  019C                     	;# 
  1860  019C                     	;# 
  1861  019C                     	;# 
  1862  019D                     	;# 
  1863  019D                     	;# 
  1864  019D                     	;# 
  1865  019E                     	;# 
  1866  019E                     	;# 
  1867  019E                     	;# 
  1868  019F                     	;# 
  1869  019F                     	;# 
  1870  019F                     	;# 
  1871  019F                     	;# 
  1872  019F                     	;# 
  1873  020C                     	;# 
  1874  020D                     	;# 
  1875  020E                     	;# 
  1876  0210                     	;# 
  1877  0211                     	;# 
  1878  0211                     	;# 
  1879  0212                     	;# 
  1880  0212                     	;# 
  1881  0213                     	;# 
  1882  0213                     	;# 
  1883  0214                     	;# 
  1884  0214                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0215                     	;# 
  1889  0216                     	;# 
  1890  0216                     	;# 
  1891  0217                     	;# 
  1892  0217                     	;# 
  1893  021B                     	;# 
  1894  021C                     	;# 
  1895  021D                     	;# 
  1896  021E                     	;# 
  1897  021F                     	;# 
  1898  028C                     	;# 
  1899  028D                     	;# 
  1900  028E                     	;# 
  1901  0291                     	;# 
  1902  0291                     	;# 
  1903  0292                     	;# 
  1904  0293                     	;# 
  1905  0294                     	;# 
  1906  0295                     	;# 
  1907  0295                     	;# 
  1908  0296                     	;# 
  1909  0297                     	;# 
  1910  0298                     	;# 
  1911  0299                     	;# 
  1912  0299                     	;# 
  1913  029A                     	;# 
  1914  029B                     	;# 
  1915  029C                     	;# 
  1916  029E                     	;# 
  1917  029F                     	;# 
  1918  030C                     	;# 
  1919  030D                     	;# 
  1920  030E                     	;# 
  1921  0315                     	;# 
  1922  0316                     	;# 
  1923  0317                     	;# 
  1924  0318                     	;# 
  1925  0319                     	;# 
  1926  031B                     	;# 
  1927  031C                     	;# 
  1928  031D                     	;# 
  1929  031E                     	;# 
  1930  031F                     	;# 
  1931  038C                     	;# 
  1932  038D                     	;# 
  1933  038E                     	;# 
  1934  0390                     	;# 
  1935  0391                     	;# 
  1936  0392                     	;# 
  1937  0393                     	;# 
  1938  0394                     	;# 
  1939  0395                     	;# 
  1940  0396                     	;# 
  1941  0397                     	;# 
  1942  0398                     	;# 
  1943  0399                     	;# 
  1944  039D                     	;# 
  1945  039E                     	;# 
  1946  039F                     	;# 
  1947  040D                     	;# 
  1948  040F                     	;# 
  1949  040F                     	;# 
  1950  0410                     	;# 
  1951  0411                     	;# 
  1952  0412                     	;# 
  1953  0413                     	;# 
  1954  0413                     	;# 
  1955  0414                     	;# 
  1956  0414                     	;# 
  1957  0415                     	;# 
  1958  0416                     	;# 
  1959  0417                     	;# 
  1960  0418                     	;# 
  1961  041A                     	;# 
  1962  041A                     	;# 
  1963  041B                     	;# 
  1964  041B                     	;# 
  1965  041C                     	;# 
  1966  041D                     	;# 
  1967  041E                     	;# 
  1968  041F                     	;# 
  1969  048E                     	;# 
  1970  048E                     	;# 
  1971  048F                     	;# 
  1972  0490                     	;# 
  1973  0491                     	;# 
  1974  0492                     	;# 
  1975  0493                     	;# 
  1976  0493                     	;# 
  1977  0494                     	;# 
  1978  0494                     	;# 
  1979  0495                     	;# 
  1980  0496                     	;# 
  1981  0497                     	;# 
  1982  0498                     	;# 
  1983  049A                     	;# 
  1984  049A                     	;# 
  1985  049B                     	;# 
  1986  049B                     	;# 
  1987  049C                     	;# 
  1988  049D                     	;# 
  1989  049E                     	;# 
  1990  049F                     	;# 
  1991  050F                     	;# 
  1992  0510                     	;# 
  1993  0511                     	;# 
  1994  0512                     	;# 
  1995  0513                     	;# 
  1996  0514                     	;# 
  1997  0515                     	;# 
  1998  0516                     	;# 
  1999  0517                     	;# 
  2000  0518                     	;# 
  2001  0519                     	;# 
  2002  051A                     	;# 
  2003  058D                     	;# 
  2004  058E                     	;# 
  2005  058F                     	;# 
  2006  058F                     	;# 
  2007  058F                     	;# 
  2008  0590                     	;# 
  2009  0590                     	;# 
  2010  0591                     	;# 
  2011  0592                     	;# 
  2012  0592                     	;# 
  2013  0592                     	;# 
  2014  0593                     	;# 
  2015  0593                     	;# 
  2016  0594                     	;# 
  2017  0595                     	;# 
  2018  0595                     	;# 
  2019  0596                     	;# 
  2020  0597                     	;# 
  2021  0597                     	;# 
  2022  0598                     	;# 
  2023  0599                     	;# 
  2024  0599                     	;# 
  2025  0599                     	;# 
  2026  059A                     	;# 
  2027  059A                     	;# 
  2028  059E                     	;# 
  2029  059F                     	;# 
  2030  059F                     	;# 
  2031  0614                     	;# 
  2032  0614                     	;# 
  2033  0615                     	;# 
  2034  0616                     	;# 
  2035  0617                     	;# 
  2036  0617                     	;# 
  2037  0618                     	;# 
  2038  0619                     	;# 
  2039  061A                     	;# 
  2040  061A                     	;# 
  2041  061B                     	;# 
  2042  061C                     	;# 
  2043  068D                     	;# 
  2044  068E                     	;# 
  2045  068F                     	;# 
  2046  0690                     	;# 
  2047  0691                     	;# 
  2048  0692                     	;# 
  2049  0693                     	;# 
  2050  0694                     	;# 
  2051  0695                     	;# 
  2052  0696                     	;# 
  2053  0697                     	;# 
  2054  0698                     	;# 
  2055  0699                     	;# 
  2056  069A                     	;# 
  2057  069B                     	;# 
  2058  069C                     	;# 
  2059  069D                     	;# 
  2060  069E                     	;# 
  2061  069F                     	;# 
  2062  070D                     	;# 
  2063  070E                     	;# 
  2064  070F                     	;# 
  2065  0710                     	;# 
  2066  0711                     	;# 
  2067  0712                     	;# 
  2068  0713                     	;# 
  2069  0714                     	;# 
  2070  0715                     	;# 
  2071  0716                     	;# 
  2072  0717                     	;# 
  2073  0718                     	;# 
  2074  0719                     	;# 
  2075  071A                     	;# 
  2076  071B                     	;# 
  2077  071C                     	;# 
  2078  071D                     	;# 
  2079  071E                     	;# 
  2080  071F                     	;# 
  2081  078E                     	;# 
  2082  078F                     	;# 
  2083  0790                     	;# 
  2084  0791                     	;# 
  2085  0792                     	;# 
  2086  0793                     	;# 
  2087  0794                     	;# 
  2088  0795                     	;# 
  2089  0796                     	;# 
  2090  0797                     	;# 
  2091  0798                     	;# 
  2092  0799                     	;# 
  2093  079A                     	;# 
  2094  079B                     	;# 
  2095  079C                     	;# 
  2096  079D                     	;# 
  2097  079E                     	;# 
  2098  079F                     	;# 
  2099  080D                     	;# 
  2100  080E                     	;# 
  2101  080F                     	;# 
  2102  0810                     	;# 
  2103  0811                     	;# 
  2104  0812                     	;# 
  2105  0813                     	;# 
  2106  0814                     	;# 
  2107  0815                     	;# 
  2108  0816                     	;# 
  2109  0817                     	;# 
  2110  0818                     	;# 
  2111  0819                     	;# 
  2112  081A                     	;# 
  2113  081B                     	;# 
  2114  081C                     	;# 
  2115  081D                     	;# 
  2116  081E                     	;# 
  2117  081F                     	;# 
  2118  090C                     	;# 
  2119  090D                     	;# 
  2120  090E                     	;# 
  2121  090F                     	;# 
  2122  0910                     	;# 
  2123  0911                     	;# 
  2124  0912                     	;# 
  2125  0913                     	;# 
  2126  0914                     	;# 
  2127  0915                     	;# 
  2128  0916                     	;# 
  2129  0917                     	;# 
  2130  0D8E                     	;# 
  2131  0D8F                     	;# 
  2132  0D90                     	;# 
  2133  0D91                     	;# 
  2134  0D91                     	;# 
  2135  0D92                     	;# 
  2136  0D93                     	;# 
  2137  0D93                     	;# 
  2138  0D94                     	;# 
  2139  0D95                     	;# 
  2140  0D95                     	;# 
  2141  0D96                     	;# 
  2142  0D97                     	;# 
  2143  0D97                     	;# 
  2144  0D98                     	;# 
  2145  0D99                     	;# 
  2146  0D99                     	;# 
  2147  0D9A                     	;# 
  2148  0D9B                     	;# 
  2149  0D9C                     	;# 
  2150  0D9C                     	;# 
  2151  0D9D                     	;# 
  2152  0D9D                     	;# 
  2153  0D9E                     	;# 
  2154  0D9F                     	;# 
  2155  0DA0                     	;# 
  2156  0DA1                     	;# 
  2157  0DA1                     	;# 
  2158  0DA2                     	;# 
  2159  0DA3                     	;# 
  2160  0DA3                     	;# 
  2161  0DA4                     	;# 
  2162  0DA5                     	;# 
  2163  0DA5                     	;# 
  2164  0DA6                     	;# 
  2165  0DA7                     	;# 
  2166  0DA7                     	;# 
  2167  0DA8                     	;# 
  2168  0DA9                     	;# 
  2169  0DA9                     	;# 
  2170  0DAA                     	;# 
  2171  0DAB                     	;# 
  2172  0DAC                     	;# 
  2173  0DAC                     	;# 
  2174  0DAD                     	;# 
  2175  0DAD                     	;# 
  2176  0DAE                     	;# 
  2177  0DAF                     	;# 
  2178  0DB0                     	;# 
  2179  0DB1                     	;# 
  2180  0DB1                     	;# 
  2181  0DB2                     	;# 
  2182  0DB3                     	;# 
  2183  0DB3                     	;# 
  2184  0DB4                     	;# 
  2185  0DB5                     	;# 
  2186  0DB5                     	;# 
  2187  0DB6                     	;# 
  2188  0DB7                     	;# 
  2189  0DB7                     	;# 
  2190  0DB8                     	;# 
  2191  0DB9                     	;# 
  2192  0DB9                     	;# 
  2193  0DBA                     	;# 
  2194  0DBB                     	;# 
  2195  0DBC                     	;# 
  2196  0DBC                     	;# 
  2197  0DBD                     	;# 
  2198  0DBD                     	;# 
  2199  0DBE                     	;# 
  2200  0DBF                     	;# 
  2201  0DC0                     	;# 
  2202  0E0C                     	;# 
  2203  0E0D                     	;# 
  2204  0E0E                     	;# 
  2205  0E0F                     	;# 
  2206  0E10                     	;# 
  2207  0E11                     	;# 
  2208  0E12                     	;# 
  2209  0E13                     	;# 
  2210  0E14                     	;# 
  2211  0E15                     	;# 
  2212  0E15                     	;# 
  2213  0E15                     	;# 
  2214  0E16                     	;# 
  2215  0E16                     	;# 
  2216  0E16                     	;# 
  2217  0E17                     	;# 
  2218  0E17                     	;# 
  2219  0E17                     	;# 
  2220  0E18                     	;# 
  2221  0E18                     	;# 
  2222  0E18                     	;# 
  2223  0E19                     	;# 
  2224  0E1A                     	;# 
  2225  0E1B                     	;# 
  2226  0E1D                     	;# 
  2227  0E1E                     	;# 
  2228  0E1F                     	;# 
  2229  0E21                     	;# 
  2230  0E22                     	;# 
  2231  0E23                     	;# 
  2232  0E24                     	;# 
  2233  0E25                     	;# 
  2234  0E26                     	;# 
  2235  0E27                     	;# 
  2236  0E28                     	;# 
  2237  0E29                     	;# 
  2238  0E2D                     	;# 
  2239  0E2E                     	;# 
  2240  0E2F                     	;# 
  2241  0E30                     	;# 
  2242  0E31                     	;# 
  2243  0E32                     	;# 
  2244  0E35                     	;# 
  2245  0E36                     	;# 
  2246  0E37                     	;# 
  2247  0E38                     	;# 
  2248  0E39                     	;# 
  2249  0E3A                     	;# 
  2250  0E3B                     	;# 
  2251  0E3C                     	;# 
  2252  0E3D                     	;# 
  2253  0E3E                     	;# 
  2254  0E90                     	;# 
  2255  0E91                     	;# 
  2256  0E92                     	;# 
  2257  0E93                     	;# 
  2258  0E94                     	;# 
  2259  0E95                     	;# 
  2260  0E96                     	;# 
  2261  0E97                     	;# 
  2262  0E98                     	;# 
  2263  0E99                     	;# 
  2264  0E9A                     	;# 
  2265  0E9B                     	;# 
  2266  0E9C                     	;# 
  2267  0E9D                     	;# 
  2268  0E9E                     	;# 
  2269  0E9F                     	;# 
  2270  0EA0                     	;# 
  2271  0EA1                     	;# 
  2272  0EA2                     	;# 
  2273  0EA3                     	;# 
  2274  0EA4                     	;# 
  2275  0EA5                     	;# 
  2276  0EA6                     	;# 
  2277  0EA7                     	;# 
  2278  0F0F                     	;# 
  2279  0F10                     	;# 
  2280  0F11                     	;# 
  2281  0F12                     	;# 
  2282  0F13                     	;# 
  2283  0F14                     	;# 
  2284  0F15                     	;# 
  2285  0F16                     	;# 
  2286  0F17                     	;# 
  2287  0F18                     	;# 
  2288  0F19                     	;# 
  2289  0F1A                     	;# 
  2290  0F1B                     	;# 
  2291  0F1C                     	;# 
  2292  0F1D                     	;# 
  2293  0F1E                     	;# 
  2294  0F1F                     	;# 
  2295  0F20                     	;# 
  2296  0F21                     	;# 
  2297  0F22                     	;# 
  2298  0F23                     	;# 
  2299  0F24                     	;# 
  2300  0F25                     	;# 
  2301  0F26                     	;# 
  2302  0F27                     	;# 
  2303  0F28                     	;# 
  2304  0F29                     	;# 
  2305  0F2A                     	;# 
  2306  0F2B                     	;# 
  2307  0F2C                     	;# 
  2308  0F2D                     	;# 
  2309  0F2E                     	;# 
  2310  0F2F                     	;# 
  2311  0F30                     	;# 
  2312  0F31                     	;# 
  2313  0F32                     	;# 
  2314  0F33                     	;# 
  2315  0F34                     	;# 
  2316  0F35                     	;# 
  2317  0F36                     	;# 
  2318  0F37                     	;# 
  2319  0FE4                     	;# 
  2320  0FE5                     	;# 
  2321  0FE6                     	;# 
  2322  0FE7                     	;# 
  2323  0FE8                     	;# 
  2324  0FE9                     	;# 
  2325  0FEA                     	;# 
  2326  0FEB                     	;# 
  2327  0FED                     	;# 
  2328  0FEE                     	;# 
  2329  0FEF                     	;# 
  2330  0000                     	;# 
  2331  0001                     	;# 
  2332  0002                     	;# 
  2333  0003                     	;# 
  2334  0004                     	;# 
  2335  0005                     	;# 
  2336  0006                     	;# 
  2337  0007                     	;# 
  2338  0008                     	;# 
  2339  0009                     	;# 
  2340  000A                     	;# 
  2341  000B                     	;# 
  2342  000C                     	;# 
  2343  000D                     	;# 
  2344  000E                     	;# 
  2345  0010                     	;# 
  2346  0011                     	;# 
  2347  0012                     	;# 
  2348  0013                     	;# 
  2349  0014                     	;# 
  2350  0015                     	;# 
  2351  0016                     	;# 
  2352  0017                     	;# 
  2353  0018                     	;# 
  2354  0018                     	;# 
  2355  0019                     	;# 
  2356  001A                     	;# 
  2357  001B                     	;# 
  2358  001C                     	;# 
  2359  001C                     	;# 
  2360  001D                     	;# 
  2361  001E                     	;# 
  2362  001F                     	;# 
  2363  008C                     	;# 
  2364  008D                     	;# 
  2365  008E                     	;# 
  2366  0090                     	;# 
  2367  0091                     	;# 
  2368  0092                     	;# 
  2369  0093                     	;# 
  2370  0094                     	;# 
  2371  0095                     	;# 
  2372  0096                     	;# 
  2373  0097                     	;# 
  2374  0098                     	;# 
  2375  0099                     	;# 
  2376  009A                     	;# 
  2377  009B                     	;# 
  2378  009C                     	;# 
  2379  009D                     	;# 
  2380  009E                     	;# 
  2381  009F                     	;# 
  2382  010C                     	;# 
  2383  010D                     	;# 
  2384  010E                     	;# 
  2385  0111                     	;# 
  2386  0112                     	;# 
  2387  0113                     	;# 
  2388  0114                     	;# 
  2389  0115                     	;# 
  2390  0116                     	;# 
  2391  0117                     	;# 
  2392  0118                     	;# 
  2393  0119                     	;# 
  2394  011A                     	;# 
  2395  011B                     	;# 
  2396  011C                     	;# 
  2397  011D                     	;# 
  2398  018C                     	;# 
  2399  018D                     	;# 
  2400  018E                     	;# 
  2401  0191                     	;# 
  2402  0191                     	;# 
  2403  0192                     	;# 
  2404  0193                     	;# 
  2405  0193                     	;# 
  2406  0194                     	;# 
  2407  0195                     	;# 
  2408  0196                     	;# 
  2409  0197                     	;# 
  2410  0199                     	;# 
  2411  0199                     	;# 
  2412  0199                     	;# 
  2413  019A                     	;# 
  2414  019A                     	;# 
  2415  019A                     	;# 
  2416  019B                     	;# 
  2417  019B                     	;# 
  2418  019B                     	;# 
  2419  019B                     	;# 
  2420  019B                     	;# 
  2421  019C                     	;# 
  2422  019C                     	;# 
  2423  019C                     	;# 
  2424  019D                     	;# 
  2425  019D                     	;# 
  2426  019D                     	;# 
  2427  019E                     	;# 
  2428  019E                     	;# 
  2429  019E                     	;# 
  2430  019F                     	;# 
  2431  019F                     	;# 
  2432  019F                     	;# 
  2433  019F                     	;# 
  2434  019F                     	;# 
  2435  020C                     	;# 
  2436  020D                     	;# 
  2437  020E                     	;# 
  2438  0210                     	;# 
  2439  0211                     	;# 
  2440  0211                     	;# 
  2441  0212                     	;# 
  2442  0212                     	;# 
  2443  0213                     	;# 
  2444  0213                     	;# 
  2445  0214                     	;# 
  2446  0214                     	;# 
  2447  0215                     	;# 
  2448  0215                     	;# 
  2449  0215                     	;# 
  2450  0215                     	;# 
  2451  0216                     	;# 
  2452  0216                     	;# 
  2453  0217                     	;# 
  2454  0217                     	;# 
  2455  021B                     	;# 
  2456  021C                     	;# 
  2457  021D                     	;# 
  2458  021E                     	;# 
  2459  021F                     	;# 
  2460  028C                     	;# 
  2461  028D                     	;# 
  2462  028E                     	;# 
  2463  0291                     	;# 
  2464  0291                     	;# 
  2465  0292                     	;# 
  2466  0293                     	;# 
  2467  0294                     	;# 
  2468  0295                     	;# 
  2469  0295                     	;# 
  2470  0296                     	;# 
  2471  0297                     	;# 
  2472  0298                     	;# 
  2473  0299                     	;# 
  2474  0299                     	;# 
  2475  029A                     	;# 
  2476  029B                     	;# 
  2477  029C                     	;# 
  2478  029E                     	;# 
  2479  029F                     	;# 
  2480  030C                     	;# 
  2481  030D                     	;# 
  2482  030E                     	;# 
  2483  0315                     	;# 
  2484  0316                     	;# 
  2485  0317                     	;# 
  2486  0318                     	;# 
  2487  0319                     	;# 
  2488  031B                     	;# 
  2489  031C                     	;# 
  2490  031D                     	;# 
  2491  031E                     	;# 
  2492  031F                     	;# 
  2493  038C                     	;# 
  2494  038D                     	;# 
  2495  038E                     	;# 
  2496  0390                     	;# 
  2497  0391                     	;# 
  2498  0392                     	;# 
  2499  0393                     	;# 
  2500  0394                     	;# 
  2501  0395                     	;# 
  2502  0396                     	;# 
  2503  0397                     	;# 
  2504  0398                     	;# 
  2505  0399                     	;# 
  2506  039D                     	;# 
  2507  039E                     	;# 
  2508  039F                     	;# 
  2509  040D                     	;# 
  2510  040F                     	;# 
  2511  040F                     	;# 
  2512  0410                     	;# 
  2513  0411                     	;# 
  2514  0412                     	;# 
  2515  0413                     	;# 
  2516  0413                     	;# 
  2517  0414                     	;# 
  2518  0414                     	;# 
  2519  0415                     	;# 
  2520  0416                     	;# 
  2521  0417                     	;# 
  2522  0418                     	;# 
  2523  041A                     	;# 
  2524  041A                     	;# 
  2525  041B                     	;# 
  2526  041B                     	;# 
  2527  041C                     	;# 
  2528  041D                     	;# 
  2529  041E                     	;# 
  2530  041F                     	;# 
  2531  048E                     	;# 
  2532  048E                     	;# 
  2533  048F                     	;# 
  2534  0490                     	;# 
  2535  0491                     	;# 
  2536  0492                     	;# 
  2537  0493                     	;# 
  2538  0493                     	;# 
  2539  0494                     	;# 
  2540  0494                     	;# 
  2541  0495                     	;# 
  2542  0496                     	;# 
  2543  0497                     	;# 
  2544  0498                     	;# 
  2545  049A                     	;# 
  2546  049A                     	;# 
  2547  049B                     	;# 
  2548  049B                     	;# 
  2549  049C                     	;# 
  2550  049D                     	;# 
  2551  049E                     	;# 
  2552  049F                     	;# 
  2553  050F                     	;# 
  2554  0510                     	;# 
  2555  0511                     	;# 
  2556  0512                     	;# 
  2557  0513                     	;# 
  2558  0514                     	;# 
  2559  0515                     	;# 
  2560  0516                     	;# 
  2561  0517                     	;# 
  2562  0518                     	;# 
  2563  0519                     	;# 
  2564  051A                     	;# 
  2565  058D                     	;# 
  2566  058E                     	;# 
  2567  058F                     	;# 
  2568  058F                     	;# 
  2569  058F                     	;# 
  2570  0590                     	;# 
  2571  0590                     	;# 
  2572  0591                     	;# 
  2573  0592                     	;# 
  2574  0592                     	;# 
  2575  0592                     	;# 
  2576  0593                     	;# 
  2577  0593                     	;# 
  2578  0594                     	;# 
  2579  0595                     	;# 
  2580  0595                     	;# 
  2581  0596                     	;# 
  2582  0597                     	;# 
  2583  0597                     	;# 
  2584  0598                     	;# 
  2585  0599                     	;# 
  2586  0599                     	;# 
  2587  0599                     	;# 
  2588  059A                     	;# 
  2589  059A                     	;# 
  2590  059E                     	;# 
  2591  059F                     	;# 
  2592  059F                     	;# 
  2593  0614                     	;# 
  2594  0614                     	;# 
  2595  0615                     	;# 
  2596  0616                     	;# 
  2597  0617                     	;# 
  2598  0617                     	;# 
  2599  0618                     	;# 
  2600  0619                     	;# 
  2601  061A                     	;# 
  2602  061A                     	;# 
  2603  061B                     	;# 
  2604  061C                     	;# 
  2605  068D                     	;# 
  2606  068E                     	;# 
  2607  068F                     	;# 
  2608  0690                     	;# 
  2609  0691                     	;# 
  2610  0692                     	;# 
  2611  0693                     	;# 
  2612  0694                     	;# 
  2613  0695                     	;# 
  2614  0696                     	;# 
  2615  0697                     	;# 
  2616  0698                     	;# 
  2617  0699                     	;# 
  2618  069A                     	;# 
  2619  069B                     	;# 
  2620  069C                     	;# 
  2621  069D                     	;# 
  2622  069E                     	;# 
  2623  069F                     	;# 
  2624  070D                     	;# 
  2625  070E                     	;# 
  2626  070F                     	;# 
  2627  0710                     	;# 
  2628  0711                     	;# 
  2629  0712                     	;# 
  2630  0713                     	;# 
  2631  0714                     	;# 
  2632  0715                     	;# 
  2633  0716                     	;# 
  2634  0717                     	;# 
  2635  0718                     	;# 
  2636  0719                     	;# 
  2637  071A                     	;# 
  2638  071B                     	;# 
  2639  071C                     	;# 
  2640  071D                     	;# 
  2641  071E                     	;# 
  2642  071F                     	;# 
  2643  078E                     	;# 
  2644  078F                     	;# 
  2645  0790                     	;# 
  2646  0791                     	;# 
  2647  0792                     	;# 
  2648  0793                     	;# 
  2649  0794                     	;# 
  2650  0795                     	;# 
  2651  0796                     	;# 
  2652  0797                     	;# 
  2653  0798                     	;# 
  2654  0799                     	;# 
  2655  079A                     	;# 
  2656  079B                     	;# 
  2657  079C                     	;# 
  2658  079D                     	;# 
  2659  079E                     	;# 
  2660  079F                     	;# 
  2661  080D                     	;# 
  2662  080E                     	;# 
  2663  080F                     	;# 
  2664  0810                     	;# 
  2665  0811                     	;# 
  2666  0812                     	;# 
  2667  0813                     	;# 
  2668  0814                     	;# 
  2669  0815                     	;# 
  2670  0816                     	;# 
  2671  0817                     	;# 
  2672  0818                     	;# 
  2673  0819                     	;# 
  2674  081A                     	;# 
  2675  081B                     	;# 
  2676  081C                     	;# 
  2677  081D                     	;# 
  2678  081E                     	;# 
  2679  081F                     	;# 
  2680  090C                     	;# 
  2681  090D                     	;# 
  2682  090E                     	;# 
  2683  090F                     	;# 
  2684  0910                     	;# 
  2685  0911                     	;# 
  2686  0912                     	;# 
  2687  0913                     	;# 
  2688  0914                     	;# 
  2689  0915                     	;# 
  2690  0916                     	;# 
  2691  0917                     	;# 
  2692  0D8E                     	;# 
  2693  0D8F                     	;# 
  2694  0D90                     	;# 
  2695  0D91                     	;# 
  2696  0D91                     	;# 
  2697  0D92                     	;# 
  2698  0D93                     	;# 
  2699  0D93                     	;# 
  2700  0D94                     	;# 
  2701  0D95                     	;# 
  2702  0D95                     	;# 
  2703  0D96                     	;# 
  2704  0D97                     	;# 
  2705  0D97                     	;# 
  2706  0D98                     	;# 
  2707  0D99                     	;# 
  2708  0D99                     	;# 
  2709  0D9A                     	;# 
  2710  0D9B                     	;# 
  2711  0D9C                     	;# 
  2712  0D9C                     	;# 
  2713  0D9D                     	;# 
  2714  0D9D                     	;# 
  2715  0D9E                     	;# 
  2716  0D9F                     	;# 
  2717  0DA0                     	;# 
  2718  0DA1                     	;# 
  2719  0DA1                     	;# 
  2720  0DA2                     	;# 
  2721  0DA3                     	;# 
  2722  0DA3                     	;# 
  2723  0DA4                     	;# 
  2724  0DA5                     	;# 
  2725  0DA5                     	;# 
  2726  0DA6                     	;# 
  2727  0DA7                     	;# 
  2728  0DA7                     	;# 
  2729  0DA8                     	;# 
  2730  0DA9                     	;# 
  2731  0DA9                     	;# 
  2732  0DAA                     	;# 
  2733  0DAB                     	;# 
  2734  0DAC                     	;# 
  2735  0DAC                     	;# 
  2736  0DAD                     	;# 
  2737  0DAD                     	;# 
  2738  0DAE                     	;# 
  2739  0DAF                     	;# 
  2740  0DB0                     	;# 
  2741  0DB1                     	;# 
  2742  0DB1                     	;# 
  2743  0DB2                     	;# 
  2744  0DB3                     	;# 
  2745  0DB3                     	;# 
  2746  0DB4                     	;# 
  2747  0DB5                     	;# 
  2748  0DB5                     	;# 
  2749  0DB6                     	;# 
  2750  0DB7                     	;# 
  2751  0DB7                     	;# 
  2752  0DB8                     	;# 
  2753  0DB9                     	;# 
  2754  0DB9                     	;# 
  2755  0DBA                     	;# 
  2756  0DBB                     	;# 
  2757  0DBC                     	;# 
  2758  0DBC                     	;# 
  2759  0DBD                     	;# 
  2760  0DBD                     	;# 
  2761  0DBE                     	;# 
  2762  0DBF                     	;# 
  2763  0DC0                     	;# 
  2764  0E0C                     	;# 
  2765  0E0D                     	;# 
  2766  0E0E                     	;# 
  2767  0E0F                     	;# 
  2768  0E10                     	;# 
  2769  0E11                     	;# 
  2770  0E12                     	;# 
  2771  0E13                     	;# 
  2772  0E14                     	;# 
  2773  0E15                     	;# 
  2774  0E15                     	;# 
  2775  0E15                     	;# 
  2776  0E16                     	;# 
  2777  0E16                     	;# 
  2778  0E16                     	;# 
  2779  0E17                     	;# 
  2780  0E17                     	;# 
  2781  0E17                     	;# 
  2782  0E18                     	;# 
  2783  0E18                     	;# 
  2784  0E18                     	;# 
  2785  0E19                     	;# 
  2786  0E1A                     	;# 
  2787  0E1B                     	;# 
  2788  0E1D                     	;# 
  2789  0E1E                     	;# 
  2790  0E1F                     	;# 
  2791  0E21                     	;# 
  2792  0E22                     	;# 
  2793  0E23                     	;# 
  2794  0E24                     	;# 
  2795  0E25                     	;# 
  2796  0E26                     	;# 
  2797  0E27                     	;# 
  2798  0E28                     	;# 
  2799  0E29                     	;# 
  2800  0E2D                     	;# 
  2801  0E2E                     	;# 
  2802  0E2F                     	;# 
  2803  0E30                     	;# 
  2804  0E31                     	;# 
  2805  0E32                     	;# 
  2806  0E35                     	;# 
  2807  0E36                     	;# 
  2808  0E37                     	;# 
  2809  0E38                     	;# 
  2810  0E39                     	;# 
  2811  0E3A                     	;# 
  2812  0E3B                     	;# 
  2813  0E3C                     	;# 
  2814  0E3D                     	;# 
  2815  0E3E                     	;# 
  2816  0E90                     	;# 
  2817  0E91                     	;# 
  2818  0E92                     	;# 
  2819  0E93                     	;# 
  2820  0E94                     	;# 
  2821  0E95                     	;# 
  2822  0E96                     	;# 
  2823  0E97                     	;# 
  2824  0E98                     	;# 
  2825  0E99                     	;# 
  2826  0E9A                     	;# 
  2827  0E9B                     	;# 
  2828  0E9C                     	;# 
  2829  0E9D                     	;# 
  2830  0E9E                     	;# 
  2831  0E9F                     	;# 
  2832  0EA0                     	;# 
  2833  0EA1                     	;# 
  2834  0EA2                     	;# 
  2835  0EA3                     	;# 
  2836  0EA4                     	;# 
  2837  0EA5                     	;# 
  2838  0EA6                     	;# 
  2839  0EA7                     	;# 
  2840  0F0F                     	;# 
  2841  0F10                     	;# 
  2842  0F11                     	;# 
  2843  0F12                     	;# 
  2844  0F13                     	;# 
  2845  0F14                     	;# 
  2846  0F15                     	;# 
  2847  0F16                     	;# 
  2848  0F17                     	;# 
  2849  0F18                     	;# 
  2850  0F19                     	;# 
  2851  0F1A                     	;# 
  2852  0F1B                     	;# 
  2853  0F1C                     	;# 
  2854  0F1D                     	;# 
  2855  0F1E                     	;# 
  2856  0F1F                     	;# 
  2857  0F20                     	;# 
  2858  0F21                     	;# 
  2859  0F22                     	;# 
  2860  0F23                     	;# 
  2861  0F24                     	;# 
  2862  0F25                     	;# 
  2863  0F26                     	;# 
  2864  0F27                     	;# 
  2865  0F28                     	;# 
  2866  0F29                     	;# 
  2867  0F2A                     	;# 
  2868  0F2B                     	;# 
  2869  0F2C                     	;# 
  2870  0F2D                     	;# 
  2871  0F2E                     	;# 
  2872  0F2F                     	;# 
  2873  0F30                     	;# 
  2874  0F31                     	;# 
  2875  0F32                     	;# 
  2876  0F33                     	;# 
  2877  0F34                     	;# 
  2878  0F35                     	;# 
  2879  0F36                     	;# 
  2880  0F37                     	;# 
  2881  0FE4                     	;# 
  2882  0FE5                     	;# 
  2883  0FE6                     	;# 
  2884  0FE7                     	;# 
  2885  0FE8                     	;# 
  2886  0FE9                     	;# 
  2887  0FEA                     	;# 
  2888  0FEB                     	;# 
  2889  0FED                     	;# 
  2890  0FEE                     	;# 
  2891  0FEF                     	;_buffer
  2892                           
  2893                           	psect	idataCOMMON
  2894  0630                     __pidataCOMMON:	
  2895                           
  2896                           ;initializer for _isPlaying
  2897  0630  3401               	retlw	1
  2898                           
  2899                           	psect	idataBANK0
  2900  0617                     __pidataBANK0:	
  2901                           
  2902                           ;initializer for _buffer_write_index
  2903  0617  3401               	retlw	1
  2904  0618  3400               	retlw	0
  2905                           
  2906                           ;initializer for _state
  2907  0619  3403               	retlw	3
  2908                           
  2909                           ;initializer for _readMessage
  2910  061A  34FF               	retlw	255
  2911                           
  2912                           ;initializer for _GLBL_Resp8
  2913  061B  34FF               	retlw	255
  2914                           
  2915                           	psect	idataBANK1
  2916  061C                     __pidataBANK1:	
  2917                           
  2918                           ;initializer for _GLBL_Resp40
  2919  061C  34FF               	retlw	255
  2920  061D  34FF               	retlw	255
  2921  061E  34FF               	retlw	255
  2922  061F  34FF               	retlw	255
  2923  0620  34FF               	retlw	255
  2924                           
  2925                           	psect	stringtext1
  2926  007C                     __pstringtext1:	
  2927  007C                     _CRCTable:	
  2928  007C  3400               	retlw	0
  2929  007D  3409               	retlw	9
  2930  007E  3412               	retlw	18
  2931  007F  341B               	retlw	27
  2932  0080  3424               	retlw	36
  2933  0081  342D               	retlw	45
  2934  0082  3436               	retlw	54
  2935  0083  343F               	retlw	63
  2936  0084  3448               	retlw	72
  2937  0085  3441               	retlw	65
  2938  0086  345A               	retlw	90
  2939  0087  3453               	retlw	83
  2940  0088  346C               	retlw	108
  2941  0089  3465               	retlw	101
  2942  008A  347E               	retlw	126
  2943  008B  3477               	retlw	119
  2944  008C  3419               	retlw	25
  2945  008D  3410               	retlw	16
  2946  008E  340B               	retlw	11
  2947  008F  3402               	retlw	2
  2948  0090  343D               	retlw	61
  2949  0091  3434               	retlw	52
  2950  0092  342F               	retlw	47
  2951  0093  3426               	retlw	38
  2952  0094  3451               	retlw	81
  2953  0095  3458               	retlw	88
  2954  0096  3443               	retlw	67
  2955  0097  344A               	retlw	74
  2956  0098  3475               	retlw	117
  2957  0099  347C               	retlw	124
  2958  009A  3467               	retlw	103
  2959  009B  346E               	retlw	110
  2960  009C  3432               	retlw	50
  2961  009D  343B               	retlw	59
  2962  009E  3420               	retlw	32
  2963  009F  3429               	retlw	41
  2964  00A0  3416               	retlw	22
  2965  00A1  341F               	retlw	31
  2966  00A2  3404               	retlw	4
  2967  00A3  340D               	retlw	13
  2968  00A4  347A               	retlw	122
  2969  00A5  3473               	retlw	115
  2970  00A6  3468               	retlw	104
  2971  00A7  3461               	retlw	97
  2972  00A8  345E               	retlw	94
  2973  00A9  3457               	retlw	87
  2974  00AA  344C               	retlw	76
  2975  00AB  3445               	retlw	69
  2976  00AC  342B               	retlw	43
  2977  00AD  3422               	retlw	34
  2978  00AE  3439               	retlw	57
  2979  00AF  3430               	retlw	48
  2980  00B0  340F               	retlw	15
  2981  00B1  3406               	retlw	6
  2982  00B2  341D               	retlw	29
  2983  00B3  3414               	retlw	20
  2984  00B4  3463               	retlw	99
  2985  00B5  346A               	retlw	106
  2986  00B6  3471               	retlw	113
  2987  00B7  3478               	retlw	120
  2988  00B8  3447               	retlw	71
  2989  00B9  344E               	retlw	78
  2990  00BA  3455               	retlw	85
  2991  00BB  345C               	retlw	92
  2992  00BC  3464               	retlw	100
  2993  00BD  346D               	retlw	109
  2994  00BE  3476               	retlw	118
  2995  00BF  347F               	retlw	127
  2996  00C0  3440               	retlw	64
  2997  00C1  3449               	retlw	73
  2998  00C2  3452               	retlw	82
  2999  00C3  345B               	retlw	91
  3000  00C4  342C               	retlw	44
  3001  00C5  3425               	retlw	37
  3002  00C6  343E               	retlw	62
  3003  00C7  3437               	retlw	55
  3004  00C8  3408               	retlw	8
  3005  00C9  3401               	retlw	1
  3006  00CA  341A               	retlw	26
  3007  00CB  3413               	retlw	19
  3008  00CC  347D               	retlw	125
  3009  00CD  3474               	retlw	116
  3010  00CE  346F               	retlw	111
  3011  00CF  3466               	retlw	102
  3012  00D0  3459               	retlw	89
  3013  00D1  3450               	retlw	80
  3014  00D2  344B               	retlw	75
  3015  00D3  3442               	retlw	66
  3016  00D4  3435               	retlw	53
  3017  00D5  343C               	retlw	60
  3018  00D6  3427               	retlw	39
  3019  00D7  342E               	retlw	46
  3020  00D8  3411               	retlw	17
  3021  00D9  3418               	retlw	24
  3022  00DA  3403               	retlw	3
  3023  00DB  340A               	retlw	10
  3024  00DC  3456               	retlw	86
  3025  00DD  345F               	retlw	95
  3026  00DE  3444               	retlw	68
  3027  00DF  344D               	retlw	77
  3028  00E0  3472               	retlw	114
  3029  00E1  347B               	retlw	123
  3030  00E2  3460               	retlw	96
  3031  00E3  3469               	retlw	105
  3032  00E4  341E               	retlw	30
  3033  00E5  3417               	retlw	23
  3034  00E6  340C               	retlw	12
  3035  00E7  3405               	retlw	5
  3036  00E8  343A               	retlw	58
  3037  00E9  3433               	retlw	51
  3038  00EA  3428               	retlw	40
  3039  00EB  3421               	retlw	33
  3040  00EC  344F               	retlw	79
  3041  00ED  3446               	retlw	70
  3042  00EE  345D               	retlw	93
  3043  00EF  3454               	retlw	84
  3044  00F0  346B               	retlw	107
  3045  00F1  3462               	retlw	98
  3046  00F2  3479               	retlw	121
  3047  00F3  3470               	retlw	112
  3048  00F4  3407               	retlw	7
  3049  00F5  340E               	retlw	14
  3050  00F6  3415               	retlw	21
  3051  00F7  341C               	retlw	28
  3052  00F8  3423               	retlw	35
  3053  00F9  342A               	retlw	42
  3054  00FA  3431               	retlw	49
  3055  00FB  3438               	retlw	56
  3056  00FC  3441               	retlw	65
  3057  00FD  3448               	retlw	72
  3058  00FE  3453               	retlw	83
  3059  00FF  345A               	retlw	90
  3060  0100  3465               	retlw	101
  3061  0101  346C               	retlw	108
  3062  0102  3477               	retlw	119
  3063  0103  347E               	retlw	126
  3064  0104  3409               	retlw	9
  3065  0105  3400               	retlw	0
  3066  0106  341B               	retlw	27
  3067  0107  3412               	retlw	18
  3068  0108  342D               	retlw	45
  3069  0109  3424               	retlw	36
  3070  010A  343F               	retlw	63
  3071  010B  3436               	retlw	54
  3072  010C  3458               	retlw	88
  3073  010D  3451               	retlw	81
  3074  010E  344A               	retlw	74
  3075  010F  3443               	retlw	67
  3076  0110  347C               	retlw	124
  3077  0111  3475               	retlw	117
  3078  0112  346E               	retlw	110
  3079  0113  3467               	retlw	103
  3080  0114  3410               	retlw	16
  3081  0115  3419               	retlw	25
  3082  0116  3402               	retlw	2
  3083  0117  340B               	retlw	11
  3084  0118  3434               	retlw	52
  3085  0119  343D               	retlw	61
  3086  011A  3426               	retlw	38
  3087  011B  342F               	retlw	47
  3088  011C  3473               	retlw	115
  3089  011D  347A               	retlw	122
  3090  011E  3461               	retlw	97
  3091  011F  3468               	retlw	104
  3092  0120  3457               	retlw	87
  3093  0121  345E               	retlw	94
  3094  0122  3445               	retlw	69
  3095  0123  344C               	retlw	76
  3096  0124  343B               	retlw	59
  3097  0125  3432               	retlw	50
  3098  0126  3429               	retlw	41
  3099  0127  3420               	retlw	32
  3100  0128  341F               	retlw	31
  3101  0129  3416               	retlw	22
  3102  012A  340D               	retlw	13
  3103  012B  3404               	retlw	4
  3104  012C  346A               	retlw	106
  3105  012D  3463               	retlw	99
  3106  012E  3478               	retlw	120
  3107  012F  3471               	retlw	113
  3108  0130  344E               	retlw	78
  3109  0131  3447               	retlw	71
  3110  0132  345C               	retlw	92
  3111  0133  3455               	retlw	85
  3112  0134  3422               	retlw	34
  3113  0135  342B               	retlw	43
  3114  0136  3430               	retlw	48
  3115  0137  3439               	retlw	57
  3116  0138  3406               	retlw	6
  3117  0139  340F               	retlw	15
  3118  013A  3414               	retlw	20
  3119  013B  341D               	retlw	29
  3120  013C  3425               	retlw	37
  3121  013D  342C               	retlw	44
  3122  013E  3437               	retlw	55
  3123  013F  343E               	retlw	62
  3124  0140  3401               	retlw	1
  3125  0141  3408               	retlw	8
  3126  0142  3413               	retlw	19
  3127  0143  341A               	retlw	26
  3128  0144  346D               	retlw	109
  3129  0145  3464               	retlw	100
  3130  0146  347F               	retlw	127
  3131  0147  3476               	retlw	118
  3132  0148  3449               	retlw	73
  3133  0149  3440               	retlw	64
  3134  014A  345B               	retlw	91
  3135  014B  3452               	retlw	82
  3136  014C  343C               	retlw	60
  3137  014D  3435               	retlw	53
  3138  014E  342E               	retlw	46
  3139  014F  3427               	retlw	39
  3140  0150  3418               	retlw	24
  3141  0151  3411               	retlw	17
  3142  0152  340A               	retlw	10
  3143  0153  3403               	retlw	3
  3144  0154  3474               	retlw	116
  3145  0155  347D               	retlw	125
  3146  0156  3466               	retlw	102
  3147  0157  346F               	retlw	111
  3148  0158  3450               	retlw	80
  3149  0159  3459               	retlw	89
  3150  015A  3442               	retlw	66
  3151  015B  344B               	retlw	75
  3152  015C  3417               	retlw	23
  3153  015D  341E               	retlw	30
  3154  015E  3405               	retlw	5
  3155  015F  340C               	retlw	12
  3156  0160  3433               	retlw	51
  3157  0161  343A               	retlw	58
  3158  0162  3421               	retlw	33
  3159  0163  3428               	retlw	40
  3160  0164  345F               	retlw	95
  3161  0165  3456               	retlw	86
  3162  0166  344D               	retlw	77
  3163  0167  3444               	retlw	68
  3164  0168  347B               	retlw	123
  3165  0169  3472               	retlw	114
  3166  016A  3469               	retlw	105
  3167  016B  3460               	retlw	96
  3168  016C  340E               	retlw	14
  3169  016D  3407               	retlw	7
  3170  016E  341C               	retlw	28
  3171  016F  3415               	retlw	21
  3172  0170  342A               	retlw	42
  3173  0171  3423               	retlw	35
  3174  0172  3438               	retlw	56
  3175  0173  3431               	retlw	49
  3176  0174  3446               	retlw	70
  3177  0175  344F               	retlw	79
  3178  0176  3454               	retlw	84
  3179  0177  345D               	retlw	93
  3180  0178  3462               	retlw	98
  3181  0179  346B               	retlw	107
  3182  017A  3470               	retlw	112
  3183  017B  3479               	retlw	121
  3184  017C                     __end_of_CRCTable:	
  3185  000D                     _PORTBbits	set	13
  3186  000B                     _INTCONbits	set	11
  3187  0011                     _PIR1bits	set	17
  3188  000E                     _PORTCbits	set	14
  3189  008C                     _TRISA	set	140
  3190  008E                     _TRISCbits	set	142
  3191  008D                     _TRISBbits	set	141
  3192  009C                     _OSCSTATbits	set	156
  3193  009B                     _OSCCON	set	155
  3194  0091                     _PIE1bits	set	145
  3195  0477                     _TRISC7	set	1143
  3196  0474                     _TRISC4	set	1140
  3197  0473                     _TRISC3	set	1139
  3198  0472                     _TRISC2	set	1138
  3199  018D                     _ANSELBbits	set	397
  3200  0C73                     _ANSC3	set	3187
  3201  0214                     _SSP1STATbits	set	532
  3202  0211                     _SSP1BUF	set	529
  3203  0212                     _SSP1ADD	set	530
  3204  0215                     _SSP1CON1	set	533
  3205  0214                     _SSP1STAT	set	532
  3206  0215                     _SSP1CON1bits	set	533
  3207  0495                     _T2CON	set	1173
  3208  0497                     _T2CLKCON	set	1175
  3209  0494                     _T2PR	set	1172
  3210  058E                     _DAC1CON0	set	1422
  3211  058F                     _DAC1REFL	set	1423
  3212  0590                     _DAC1REFH	set	1424
  3213  2C68                     _DAC1LD	set	11368
  3214  0E3B                     _SSPDATPPS	set	3643
  3215  0E3A                     _SSPCLKPPS	set	3642
  3216  0EA4                     _RC4PPS	set	3748
  3217  0EA2                     _RC2PPS	set	3746
  3218  017C                     STR_5:	
  3219  017C  3466               	retlw	102	;'f'
  3220  017D  346D               	retlw	109	;'m'
  3221  017E  3474               	retlw	116	;'t'
  3222  017F  3420               	retlw	32	;' '
  3223  0180  3400               	retlw	0
  3224                           
  3225                           	psect	stringtext2
  3226  0621                     __pstringtext2:	
  3227  0621                     STR_3:	
  3228  0621  3457               	retlw	87	;'W'
  3229  0622  3441               	retlw	65	;'A'
  3230  0623  3456               	retlw	86	;'V'
  3231  0624  3445               	retlw	69	;'E'
  3232  0625  3400               	retlw	0
  3233                           
  3234                           	psect	stringtext3
  3235  0626                     __pstringtext3:	
  3236  0626                     STR_1:	
  3237  0626  3452               	retlw	82	;'R'
  3238  0627  3449               	retlw	73	;'I'
  3239  0628  3446               	retlw	70	;'F'
  3240  0629  3446               	retlw	70	;'F'
  3241  062A  3400               	retlw	0
  3242                           
  3243                           	psect	stringtext4
  3244  062B                     __pstringtext4:	
  3245  062B                     STR_7:	
  3246  062B  3464               	retlw	100	;'d'
  3247  062C  3461               	retlw	97	;'a'
  3248  062D  3474               	retlw	116	;'t'
  3249  062E  3461               	retlw	97	;'a'
  3250  062F  3400               	retlw	0
  3251                           
  3252                           	psect	stringtext5
  3253  0000                     __pstringtext5:	
  3254  017C                     
  3255                           ; #config settings
  3256  0000                     
  3257                           	psect	cinit
  3258  003F                     start_initialization:	
  3259  003F                     __initialization:		;BIGRAM_1
  3260                           
  3261                           ; Initialize objects allocated to COMMON
  3262  003F  3186  2630  3180   	fcall	__pidataCOMMON	;fetch initializer
  3263  0042  00FD               	movwf	__pdataCOMMON& (0+127)
  3264                           
  3265                           ; Initialize objects allocated to BANK0
  3266  0043  3017               	movlw	low __pidataBANK0
  3267  0044  0084               	movwf	4
  3268  0045  3086               	movlw	(high __pidataBANK0)| (0+128)
  3269  0046  0085               	movwf	5
  3270  0047  0012               	moviw fsr0++
  3271  0048  00EB               	movwf	__pdataBANK0& (0+127)
  3272  0049  0012               	moviw fsr0++
  3273  004A  00EC               	movwf	(__pdataBANK0+1)& (0+127)
  3274  004B  0012               	moviw fsr0++
  3275  004C  00ED               	movwf	(__pdataBANK0+2)& (0+127)
  3276  004D  0012               	moviw fsr0++
  3277  004E  00EE               	movwf	(__pdataBANK0+3)& (0+127)
  3278  004F  0012               	moviw fsr0++
  3279  0050  00EF               	movwf	(__pdataBANK0+4)& (0+127)
  3280                           
  3281                           ; Initialize objects allocated to BANK1
  3282  0051  301C               	movlw	low __pidataBANK1
  3283  0052  0084               	movwf	4
  3284  0053  3086               	movlw	(high __pidataBANK1)| (0+128)
  3285  0054  0085               	movwf	5
  3286  0055  0021               	movlb	1	; select bank1
  3287  0056  0012               	moviw fsr0++
  3288  0057  00B5               	movwf	__pdataBANK1& (0+127)
  3289  0058  0012               	moviw fsr0++
  3290  0059  00B6               	movwf	(__pdataBANK1+1)& (0+127)
  3291  005A  0012               	moviw fsr0++
  3292  005B  00B7               	movwf	(__pdataBANK1+2)& (0+127)
  3293  005C  0012               	moviw fsr0++
  3294  005D  00B8               	movwf	(__pdataBANK1+3)& (0+127)
  3295  005E  0012               	moviw fsr0++
  3296  005F  00B9               	movwf	(__pdataBANK1+4)& (0+127)
  3297                           
  3298                           ; Clear objects allocated to BIGRAM_1
  3299  0060  30F0               	movlw	low (0+9968)
  3300  0061  0084               	movwf	4
  3301  0062  3026               	movlw	high (0+9968)
  3302  0063  0085               	movwf	5
  3303  0064  3000               	movlw	0
  3304  0065  00FE               	movwf	btemp
  3305  0066  3001               	movlw	1
  3306  0067  00FF               	movwf	btemp+1
  3307  0068  3185  25DA  3180   	fcall	clear_ram0
  3308                           
  3309                           ; Clear objects allocated to COMMON
  3310  006B  01FA               	clrf	__pbssCOMMON& (0+127)
  3311  006C  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  3312  006D  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  3313                           
  3314                           ; Clear objects allocated to BANK1
  3315  006E  30A0               	movlw	low __pbssBANK1
  3316  006F  0084               	movwf	4
  3317  0070  3000               	movlw	high __pbssBANK1
  3318  0071  0085               	movwf	5
  3319  0072  3015               	movlw	21
  3320  0073  00FE               	movwf	btemp
  3321  0074  3000               	movlw	0
  3322  0075  00FF               	movwf	btemp+1
  3323  0076  3185  25DA         	fcall	clear_ram0
  3324  0078                     end_of_initialization:	
  3325                           ;End of C runtime variable initialization code
  3326                           
  3327  0078                     __end_of__initialization:	
  3328  0078  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3329  0079  0020               	movlb	0
  3330  007A  3181  2981         	ljmp	_main	;jump to C main() function
  3331                           
  3332                           	psect	bssCOMMON
  3333  007A                     __pbssCOMMON:	
  3334  007A                     _buffer_read_index:	
  3335  007A                     	ds	2
  3336  007C                     _global_error:	
  3337  007C                     	ds	1
  3338                           
  3339                           	psect	dataCOMMON
  3340  007D                     __pdataCOMMON:	
  3341  007D                     _isPlaying:	
  3342  007D                     	ds	1
  3343                           
  3344                           	psect	dataBANK0
  3345  006B                     __pdataBANK0:	
  3346  006B                     _buffer_write_index:	
  3347  006B                     	ds	2
  3348  006D                     _state:	
  3349  006D                     	ds	1
  3350  006E                     _readMessage:	
  3351  006E                     	ds	1
  3352  006F                     _GLBL_Resp8:	
  3353  006F                     	ds	1
  3354                           
  3355                           	psect	bssBANK1
  3356  00A0                     __pbssBANK1:	
  3357  00A0                     _address:	
  3358  00A0                     	ds	4
  3359  00A4                     _filesize:	
  3360  00A4                     	ds	4
  3361  00A8                     _sampRate:	
  3362  00A8                     	ds	4
  3363  00AC                     _blockIndex:	
  3364  00AC                     	ds	2
  3365  00AE                     _sdata:	
  3366  00AE                     	ds	2
  3367  00B0                     _bitsPerSamp:	
  3368  00B0                     	ds	2
  3369  00B2                     _channels:	
  3370  00B2                     	ds	2
  3371  00B4                     _samplePending:	
  3372  00B4                     	ds	1
  3373                           
  3374                           	psect	dataBANK1
  3375  00B5                     __pdataBANK1:	
  3376  00B5                     _GLBL_Resp40:	
  3377  00B5                     	ds	5
  3378                           
  3379                           	psect	clrtext
  3380  05DA                     clear_ram0:	
  3381                           ;	Called with FSR0 containing the base address, and
  3382                           ;	btemp/btemp+1 has the size to clear
  3383                           
  3384  05DA  0064               	clrwdt	;clear the watchdog before getting into this loop
  3385  05DB                     clrloop0:	
  3386  05DB  0180               	clrf	0	;clear RAM location pointed to by FSR
  3387  05DC  3101               	addfsr 0,1
  3388  05DD  3001               	movlw	1
  3389  05DE  02FE               	subwf	126,f
  3390  05DF  3000               	movlw	0
  3391  05E0  3BFF               	subwfb	127,f
  3392  05E1  087F               	movf	127,w
  3393  05E2  047E               	iorwf	126,w
  3394  05E3  1903               	btfsc	3,2
  3395  05E4  3400               	retlw	0	;all done for this memory range, return
  3396  05E5  2DDB               	goto	clrloop0	;have we reached the end yet?
  3397                           
  3398                           	psect	cstackCOMMON
  3399  0070                     __pcstackCOMMON:	
  3400  0070                     ?_SPI_Write:	
  3401  0070                     ?_SD_Read8bitResponse:	
  3402                           ; 1 bytes @ 0x0
  3403                           
  3404  0070                     ?_SD_Check8bitResponse:	
  3405                           ; 1 bytes @ 0x0
  3406                           
  3407  0070                     ?_SD_Read40bitResponse:	
  3408                           ; 1 bytes @ 0x0
  3409                           
  3410  0070                     ?_SPI_Read:	
  3411                           ; 1 bytes @ 0x0
  3412                           
  3413  0070                     ?_DAC_Init:	
  3414                           ; 1 bytes @ 0x0
  3415                           
  3416  0070                     ?_SD_Init:	
  3417                           ; 1 bytes @ 0x0
  3418                           
  3419  0070                     ?_SD_CloseBlock:	
  3420                           ; 1 bytes @ 0x0
  3421                           
  3422  0070                     ?_SPI_Init:	
  3423                           ; 1 bytes @ 0x0
  3424                           
  3425  0070                     ?_error:	
  3426                           ; 1 bytes @ 0x0
  3427                           
  3428  0070                     ?_init:	
  3429                           ; 1 bytes @ 0x0
  3430                           
  3431  0070                     ?_isr:	
  3432                           ; 1 bytes @ 0x0
  3433                           
  3434  0070                     ??_isr:	
  3435                           ; 1 bytes @ 0x0
  3436                           
  3437  0070                     ?_main:	
  3438                           ; 1 bytes @ 0x0
  3439                           
  3440                           
  3441                           ; 1 bytes @ 0x0
  3442  0070                     	ds	8
  3443  0078                     isr@level:	
  3444                           
  3445                           ; 2 bytes @ 0x8
  3446  0078                     	ds	2
  3447                           
  3448                           	psect	cstackBANK0
  3449  0020                     __pcstackBANK0:	
  3450  0020                     ??_SPI_Write:	
  3451  0020                     ??_SD_Read8bitResponse:	
  3452                           ; 1 bytes @ 0x0
  3453                           
  3454  0020                     ??_SD_Check8bitResponse:	
  3455                           ; 1 bytes @ 0x0
  3456                           
  3457  0020                     ??_SD_Read40bitResponse:	
  3458                           ; 1 bytes @ 0x0
  3459                           
  3460  0020                     ?_SD_Check40bitResponse:	
  3461                           ; 1 bytes @ 0x0
  3462                           
  3463  0020                     ??_SPI_Read:	
  3464                           ; 1 bytes @ 0x0
  3465                           
  3466  0020                     ??_DAC_Init:	
  3467                           ; 1 bytes @ 0x0
  3468                           
  3469  0020                     ??_SD_CloseBlock:	
  3470                           ; 1 bytes @ 0x0
  3471                           
  3472  0020                     ??_SPI_Init:	
  3473                           ; 1 bytes @ 0x0
  3474                           
  3475  0020                     ??_error:	
  3476                           ; 1 bytes @ 0x0
  3477                           
  3478  0020                     ?_fourCCeq:	
  3479                           ; 1 bytes @ 0x0
  3480                           
  3481  0020                     ?_readBytes:	
  3482                           ; 1 bytes @ 0x0
  3483                           
  3484  0020                     ?_timer_Init:	
  3485                           ; 1 bytes @ 0x0
  3486                           
  3487  0020                     SD_Check8bitResponse@Byte:	
  3488                           ; 2 bytes @ 0x0
  3489                           
  3490  0020                     SD_Check40bitResponse@Byte3:	
  3491                           ; 1 bytes @ 0x0
  3492                           
  3493  0020                     SPI_Write@Data_8bit:	
  3494                           ; 1 bytes @ 0x0
  3495                           
  3496  0020                     fourCCeq@b:	
  3497                           ; 1 bytes @ 0x0
  3498                           
  3499  0020                     readBytes@len:	
  3500                           ; 2 bytes @ 0x0
  3501                           
  3502  0020                     timer_Init@rate:	
  3503                           ; 2 bytes @ 0x0
  3504                           
  3505                           
  3506                           ; 4 bytes @ 0x0
  3507  0020                     	ds	1
  3508  0021                     ?_SD_SendCommand:	
  3509  0021                     SD_SendCommand@ARG3:	
  3510                           ; 1 bytes @ 0x1
  3511                           
  3512  0021                     SD_Read8bitResponse@readMessage:	
  3513                           ; 1 bytes @ 0x1
  3514                           
  3515  0021                     SD_Check8bitResponse@match:	
  3516                           ; 1 bytes @ 0x1
  3517                           
  3518  0021                     SD_Read40bitResponse@readMessage:	
  3519                           ; 1 bytes @ 0x1
  3520                           
  3521  0021                     SD_Check40bitResponse@Byte2:	
  3522                           ; 1 bytes @ 0x1
  3523                           
  3524  0021                     error@e:	
  3525                           ; 1 bytes @ 0x1
  3526                           
  3527                           
  3528                           ; 1 bytes @ 0x1
  3529  0021                     	ds	1
  3530  0022                     ??_fourCCeq:	
  3531  0022                     ??_readBytes:	
  3532                           ; 1 bytes @ 0x2
  3533                           
  3534  0022                     SD_SendCommand@ARG2:	
  3535                           ; 1 bytes @ 0x2
  3536                           
  3537  0022                     SD_Check40bitResponse@Byte1:	
  3538                           ; 1 bytes @ 0x2
  3539                           
  3540                           
  3541                           ; 1 bytes @ 0x2
  3542  0022                     	ds	1
  3543  0023                     SD_SendCommand@ARG1:	
  3544  0023                     SD_Check40bitResponse@Byte0:	
  3545                           ; 1 bytes @ 0x3
  3546                           
  3547                           
  3548                           ; 1 bytes @ 0x3
  3549  0023                     	ds	1
  3550  0024                     ??_SD_Check40bitResponse:	
  3551  0024                     ??_timer_Init:	
  3552                           ; 1 bytes @ 0x4
  3553                           
  3554  0024                     SD_SendCommand@ARG0:	
  3555                           ; 1 bytes @ 0x4
  3556                           
  3557  0024                     SD_Check40bitResponse@Byte4:	
  3558                           ; 1 bytes @ 0x4
  3559                           
  3560  0024                     readBytes@dest:	
  3561                           ; 1 bytes @ 0x4
  3562                           
  3563                           
  3564                           ; 1 bytes @ 0x4
  3565  0024                     	ds	1
  3566  0025                     ??_SD_SendCommand:	
  3567  0025                     SD_Check40bitResponse@match:	
  3568                           ; 1 bytes @ 0x5
  3569                           
  3570  0025                     readBytes@i:	
  3571                           ; 1 bytes @ 0x5
  3572                           
  3573                           
  3574                           ; 2 bytes @ 0x5
  3575  0025                     	ds	1
  3576  0026                     SD_SendCommand@CMD_6bit:	
  3577  0026                     fourCCeq@a:	
  3578                           ; 1 bytes @ 0x6
  3579                           
  3580                           
  3581                           ; 1 bytes @ 0x6
  3582  0026                     	ds	1
  3583  0027                     SD_SendCommand@ByteToSend:	
  3584  0027                     fourCCeq@i:	
  3585                           ; 1 bytes @ 0x7
  3586                           
  3587                           
  3588                           ; 1 bytes @ 0x7
  3589  0027                     	ds	1
  3590  0028                     SD_SendCommand@Checksum:	
  3591                           
  3592                           ; 1 bytes @ 0x8
  3593  0028                     	ds	1
  3594  0029                     ??_SD_Init:	
  3595  0029                     ?_SD_OpenBlock:	
  3596                           ; 1 bytes @ 0x9
  3597                           
  3598  0029                     SD_OpenBlock@address:	
  3599                           ; 1 bytes @ 0x9
  3600                           
  3601                           
  3602                           ; 4 bytes @ 0x9
  3603  0029                     	ds	1
  3604  002A                     ??_init:	
  3605                           
  3606                           ; 1 bytes @ 0xA
  3607  002A                     	ds	3
  3608  002D                     ??_SD_OpenBlock:	
  3609                           
  3610                           ; 1 bytes @ 0xD
  3611  002D                     	ds	4
  3612  0031                     SD_OpenBlock@a:	
  3613                           
  3614                           ; 4 bytes @ 0x11
  3615  0031                     	ds	4
  3616  0035                     ?_openFile:	
  3617  0035                     openFile@a:	
  3618                           ; 1 bytes @ 0x15
  3619                           
  3620                           
  3621                           ; 4 bytes @ 0x15
  3622  0035                     	ds	4
  3623  0039                     ??_openFile:	
  3624                           
  3625                           ; 1 bytes @ 0x19
  3626  0039                     	ds	1
  3627  003A                     openFile@riff:	
  3628                           
  3629                           ; 8 bytes @ 0x1A
  3630  003A                     	ds	8
  3631  0042                     openFile@response:	
  3632                           
  3633                           ; 1 bytes @ 0x22
  3634  0042                     	ds	1
  3635  0043                     openFile@data:	
  3636                           
  3637                           ; 8 bytes @ 0x23
  3638  0043                     	ds	8
  3639  004B                     openFile@fmt:	
  3640                           
  3641                           ; 28 bytes @ 0x2B
  3642  004B                     	ds	28
  3643  0067                     ??_main:	
  3644                           
  3645                           ; 1 bytes @ 0x47
  3646  0067                     	ds	4
  3647                           
  3648                           	psect	maintext
  3649  0181                     __pmaintext:	
  3650 ;;
  3651 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3652 ;;
  3653 ;; *************** function _main *****************
  3654 ;; Defined at:
  3655 ;;		line 132 in file "main.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;		None
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;		None
  3660 ;; Return value:  Size  Location     Type
  3661 ;;                  1    wreg      void 
  3662 ;; Registers used:
  3663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3664 ;; Tracked objects:
  3665 ;;		On entry : B1F/0
  3666 ;;		On exit  : 0/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3671 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3672 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3673 ;;Total ram usage:        4 bytes
  3674 ;; Hardware stack levels required when called:    5
  3675 ;; This function calls:
  3676 ;;		_SD_CloseBlock
  3677 ;;		_SD_OpenBlock
  3678 ;;		_SPI_Read
  3679 ;;		_error
  3680 ;;		_init
  3681 ;;		_openFile
  3682 ;;		_timer_Init
  3683 ;; This function is called by:
  3684 ;;		Startup code after reset
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           
  3689                           ;psect for function _main
  3690  0181                     _main:	
  3691                           
  3692                           ;main.c: 134:     init();
  3693                           
  3694                           ;incstack = 0
  3695                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3696  0181  3185  25B4  3181   	fcall	_init
  3697                           
  3698                           ;main.c: 137:         address = 0;
  3699  0184  3000               	movlw	0
  3700  0185  0021               	movlb	1	; select bank1
  3701  0186  00A3               	movwf	(_address+3)^(0+128)
  3702  0187  3000               	movlw	0
  3703  0188  00A2               	movwf	(_address+2)^(0+128)
  3704  0189  3000               	movlw	0
  3705  018A  00A1               	movwf	(_address+1)^(0+128)
  3706  018B  3000               	movlw	0
  3707  018C  00A0               	movwf	_address^(0+128)
  3708                           
  3709                           ;main.c: 139:         openFile(address);
  3710  018D  0823               	movf	(_address+3)^(0+128),w
  3711  018E  0020               	movlb	0	; select bank0
  3712  018F  00B8               	movwf	openFile@a+3
  3713  0190  0021               	movlb	1	; select bank1
  3714  0191  0822               	movf	(_address+2)^(0+128),w
  3715  0192  0020               	movlb	0	; select bank0
  3716  0193  00B7               	movwf	openFile@a+2
  3717  0194  0021               	movlb	1	; select bank1
  3718  0195  0821               	movf	(_address+1)^(0+128),w
  3719  0196  0020               	movlb	0	; select bank0
  3720  0197  00B6               	movwf	openFile@a+1
  3721  0198  0021               	movlb	1	; select bank1
  3722  0199  0820               	movf	_address^(0+128),w
  3723  019A  0020               	movlb	0	; select bank0
  3724  019B  00B5               	movwf	openFile@a
  3725  019C  3182  2266  3181   	fcall	_openFile
  3726                           
  3727                           ;main.c: 140:         __nop();
  3728  019F  0000               	nop
  3729                           
  3730                           ;main.c: 141:         if(channels != 2) samplePending = 0;
  3731  01A0  3002               	movlw	2
  3732  01A1  0021               	movlb	1	; select bank1
  3733  01A2  0632               	xorwf	_channels^(0+128),w
  3734  01A3  0433               	iorwf	(_channels+1)^(0+128),w
  3735  01A4  1D03               	btfss	3,2
  3736  01A5  01B4               	clrf	_samplePending^(0+128)
  3737                           
  3738                           ;main.c: 142:         timer_Init(sampRate);
  3739  01A6  082B               	movf	(_sampRate+3)^(0+128),w
  3740  01A7  0020               	movlb	0	; select bank0
  3741  01A8  00A3               	movwf	timer_Init@rate+3
  3742  01A9  0021               	movlb	1	; select bank1
  3743  01AA  082A               	movf	(_sampRate+2)^(0+128),w
  3744  01AB  0020               	movlb	0	; select bank0
  3745  01AC  00A2               	movwf	timer_Init@rate+2
  3746  01AD  0021               	movlb	1	; select bank1
  3747  01AE  0829               	movf	(_sampRate+1)^(0+128),w
  3748  01AF  0020               	movlb	0	; select bank0
  3749  01B0  00A1               	movwf	timer_Init@rate+1
  3750  01B1  0021               	movlb	1	; select bank1
  3751  01B2  0828               	movf	_sampRate^(0+128),w
  3752  01B3  0020               	movlb	0	; select bank0
  3753  01B4  00A0               	movwf	timer_Init@rate
  3754  01B5  3184  2448  3181   	fcall	_timer_Init
  3755  01B8                     l1800:	
  3756                           
  3757                           ;main.c: 146:             if (state == CLOSED && isPlaying) {
  3758  01B8  3003               	movlw	3
  3759  01B9  0020               	movlb	0	; select bank0
  3760  01BA  066D               	xorwf	_state,w
  3761  01BB  1D03               	btfss	3,2
  3762  01BC  29DB               	goto	l1812
  3763                           
  3764                           ;main.c: 147:                 PORTBbits.RB0 = 1;
  3765  01BD  140D               	bsf	13,0	;volatile
  3766                           
  3767                           ;main.c: 148:                 SD_OpenBlock(address);
  3768  01BE  0021               	movlb	1	; select bank1
  3769  01BF  0823               	movf	(_address+3)^(0+128),w
  3770  01C0  0020               	movlb	0	; select bank0
  3771  01C1  00AC               	movwf	SD_OpenBlock@address+3
  3772  01C2  0021               	movlb	1	; select bank1
  3773  01C3  0822               	movf	(_address+2)^(0+128),w
  3774  01C4  0020               	movlb	0	; select bank0
  3775  01C5  00AB               	movwf	SD_OpenBlock@address+2
  3776  01C6  0021               	movlb	1	; select bank1
  3777  01C7  0821               	movf	(_address+1)^(0+128),w
  3778  01C8  0020               	movlb	0	; select bank0
  3779  01C9  00AA               	movwf	SD_OpenBlock@address+1
  3780  01CA  0021               	movlb	1	; select bank1
  3781  01CB  0820               	movf	_address^(0+128),w
  3782  01CC  0020               	movlb	0	; select bank0
  3783  01CD  00A9               	movwf	SD_OpenBlock@address
  3784  01CE  3185  254F  3181   	fcall	_SD_OpenBlock
  3785                           
  3786                           ;main.c: 149:                 state = OPENING;
  3787  01D1  3002               	movlw	2
  3788  01D2  0020               	movlb	0	; select bank0
  3789  01D3  00E7               	movwf	??_main
  3790  01D4  0867               	movf	??_main,w
  3791  01D5  00ED               	movwf	_state
  3792                           
  3793                           ;main.c: 150:                 readMessage = 0xFF;
  3794  01D6  30FF               	movlw	255
  3795  01D7  00E7               	movwf	??_main
  3796  01D8  0867               	movf	??_main,w
  3797  01D9  00EE               	movwf	_readMessage
  3798                           
  3799                           ;main.c: 151:                 PORTBbits.RB0 = 0;
  3800  01DA  100D               	bcf	13,0	;volatile
  3801  01DB                     l1812:	
  3802                           
  3803                           ;main.c: 156:             if (state == OPENING) {
  3804  01DB  3002               	movlw	2
  3805  01DC  066D               	xorwf	_state,w
  3806  01DD  1D03               	btfss	3,2
  3807  01DE  29FA               	goto	l1830
  3808                           
  3809                           ;main.c: 157:                 PORTBbits.RB0 = 1;
  3810  01DF  140D               	bsf	13,0	;volatile
  3811                           
  3812                           ;main.c: 158:                 readMessage = SPI_Read();
  3813  01E0  3186  2609  3181   	fcall	_SPI_Read
  3814  01E3  0020               	movlb	0	; select bank0
  3815  01E4  00E7               	movwf	??_main
  3816  01E5  0867               	movf	??_main,w
  3817  01E6  00EE               	movwf	_readMessage
  3818                           
  3819                           ;main.c: 159:                 if (readMessage != 0xFF) {
  3820  01E7  0A6E               	incf	_readMessage,w
  3821  01E8  1903               	btfsc	3,2
  3822  01E9  29FA               	goto	l1830
  3823                           
  3824                           ;main.c: 160:                     if (readMessage == 0xFE){
  3825  01EA  30FE               	movlw	254
  3826  01EB  066E               	xorwf	_readMessage,w
  3827  01EC  1D03               	btfss	3,2
  3828  01ED  29F0               	goto	l1824
  3829                           
  3830                           ;main.c: 161:                         state = OPEN;
  3831  01EE  01ED               	clrf	_state
  3832                           
  3833                           ;main.c: 162:                     } else {
  3834  01EF  29F8               	goto	l1828
  3835  01F0                     l1824:	
  3836                           
  3837                           ;main.c: 163:                         state = CLOSED;
  3838  01F0  3003               	movlw	3
  3839  01F1  00E7               	movwf	??_main
  3840  01F2  0867               	movf	??_main,w
  3841  01F3  00ED               	movwf	_state
  3842                           
  3843                           ;main.c: 164:                         error(OPEN_BLOCK);
  3844  01F4  3000               	movlw	0
  3845  01F5  3185  25F9  3181   	fcall	_error
  3846  01F8                     l1828:	
  3847                           
  3848                           ;main.c: 166:                     PORTBbits.RB0 = 0;
  3849  01F8  0020               	movlb	0	; select bank0
  3850  01F9  100D               	bcf	13,0	;volatile
  3851  01FA                     l1830:	
  3852                           
  3853                           ;main.c: 170:             if (state == OPEN) {
  3854  01FA  086D               	movf	_state,w
  3855  01FB  1D03               	btfss	3,2
  3856  01FC  29B8               	goto	l1800
  3857                           
  3858                           ;main.c: 171:                 if (blockIndex >= 512) {
  3859  01FD  0021               	movlb	1	; select bank1
  3860  01FE  082D               	movf	(_blockIndex+1)^(0+128),w
  3861  01FF  3A80               	xorlw	128
  3862  0200  0020               	movlb	0	; select bank0
  3863  0201  00E7               	movwf	??_main
  3864  0202  3082               	movlw	130
  3865  0203  0267               	subwf	??_main,w
  3866  0204  1D03               	skipz
  3867  0205  2A09               	goto	u715
  3868  0206  3000               	movlw	0
  3869  0207  0021               	movlb	1	; select bank1
  3870  0208  022C               	subwf	_blockIndex^(0+128),w
  3871  0209                     u715:	
  3872  0209  1C03               	skipc
  3873  020A  2A20               	goto	l1844
  3874                           
  3875                           ;main.c: 172:                     SD_CloseBlock();
  3876  020B  3185  25F0  3181   	fcall	_SD_CloseBlock
  3877                           
  3878                           ;main.c: 173:                     ++address;
  3879  020E  3001               	movlw	1
  3880  020F  0021               	movlb	1	; select bank1
  3881  0210  07A0               	addwf	_address^(0+128),f
  3882  0211  3000               	movlw	0
  3883  0212  3DA1               	addwfc	(_address+1)^(0+128),f
  3884  0213  3000               	movlw	0
  3885  0214  3DA2               	addwfc	(_address+2)^(0+128),f
  3886  0215  3000               	movlw	0
  3887  0216  3DA3               	addwfc	(_address+3)^(0+128),f
  3888                           
  3889                           ;main.c: 174:                     blockIndex = 0;
  3890  0217  01AC               	clrf	_blockIndex^(0+128)
  3891  0218  01AD               	clrf	(_blockIndex+1)^(0+128)
  3892                           
  3893                           ;main.c: 175:                     state = CLOSED;
  3894  0219  3003               	movlw	3
  3895  021A  0020               	movlb	0	; select bank0
  3896  021B  00E7               	movwf	??_main
  3897  021C  0867               	movf	??_main,w
  3898  021D  00ED               	movwf	_state
  3899                           
  3900                           ;main.c: 176:                     PORTBbits.RB0 = 1;
  3901  021E  140D               	bsf	13,0	;volatile
  3902                           
  3903                           ;main.c: 177:                 } else if (buffer_write_index != buffer_read_index) {
  3904  021F  29B8               	goto	l1800
  3905  0220                     l1844:	
  3906  0220  087B               	movf	_buffer_read_index+1,w
  3907  0221  0020               	movlb	0	; select bank0
  3908  0222  066C               	xorwf	_buffer_write_index+1,w
  3909  0223  1D03               	skipz
  3910  0224  2A27               	goto	u725
  3911  0225  087A               	movf	_buffer_read_index,w
  3912  0226  066B               	xorwf	_buffer_write_index,w
  3913  0227                     u725:	
  3914  0227  1903               	skipnz
  3915  0228  29B8               	goto	l1800
  3916                           
  3917                           ;main.c: 202:                     PORTCbits.RC1 = 1;
  3918  0229  148E               	bsf	14,1	;volatile
  3919                           
  3920                           ;main.c: 203:                     sdata[0] = SPI_Read();
  3921  022A  3186  2609  3181   	fcall	_SPI_Read
  3922  022D  0020               	movlb	0	; select bank0
  3923  022E  00E7               	movwf	??_main
  3924  022F  0867               	movf	??_main,w
  3925  0230  0021               	movlb	1	; select bank1
  3926  0231  00AE               	movwf	_sdata^(0+128)
  3927                           
  3928                           ;main.c: 204:                     sdata[1] = SPI_Read();
  3929  0232  3186  2609  3181   	fcall	_SPI_Read
  3930  0235  0020               	movlb	0	; select bank0
  3931  0236  00E7               	movwf	??_main
  3932  0237  0867               	movf	??_main,w
  3933  0238  0021               	movlb	1	; select bank1
  3934  0239  00AF               	movwf	(_sdata^(0+128)+1)
  3935                           
  3936                           ;main.c: 206:                     buffer[ buffer_write_index++ ] = *((short*)sdata);
  3937  023A  30AE               	movlw	low (_sdata| 0)
  3938  023B  0086               	movwf	6
  3939  023C  0187               	clrf	7
  3940  023D  0020               	movlb	0	; select bank0
  3941  023E  086C               	movf	_buffer_write_index+1,w
  3942  023F  00E8               	movwf	??_main+1
  3943  0240  086B               	movf	_buffer_write_index,w
  3944  0241  00E7               	movwf	??_main
  3945  0242  35E7               	lslf	??_main,f
  3946  0243  0DE8               	rlf	??_main+1,f
  3947  0244  30F0               	movlw	240
  3948  0245  00E9               	movwf	??_main+2
  3949  0246  3026               	movlw	38
  3950  0247  00EA               	movwf	??_main+3
  3951  0248  0867               	movf	??_main,w
  3952  0249  0769               	addwf	??_main+2,w
  3953  024A  0084               	movwf	4
  3954  024B  0868               	movf	??_main+1,w
  3955  024C  3D6A               	addwfc	??_main+3,w
  3956  024D  0085               	movwf	5
  3957  024E  3F40               	moviw [0]fsr1
  3958  024F  3F80               	movwi [0]fsr0
  3959  0250  3F41               	moviw [1]fsr1
  3960  0251  3F81               	movwi [1]fsr0
  3961  0252  3001               	movlw	1
  3962  0253  07EB               	addwf	_buffer_write_index,f
  3963  0254  3000               	movlw	0
  3964  0255  3DEC               	addwfc	_buffer_write_index+1,f
  3965                           
  3966                           ;main.c: 207:                     PORTCbits.RC1 = 0;
  3967  0256  108E               	bcf	14,1	;volatile
  3968                           
  3969                           ;main.c: 209:                     if (buffer_write_index >= 128) buffer_write_index = 0;
  3970  0257  3000               	movlw	0
  3971  0258  026C               	subwf	_buffer_write_index+1,w
  3972  0259  3080               	movlw	128
  3973  025A  1903               	skipnz
  3974  025B  026B               	subwf	_buffer_write_index,w
  3975  025C  1C03               	skipc
  3976  025D  2A60               	goto	l1860
  3977  025E  01EB               	clrf	_buffer_write_index
  3978  025F  01EC               	clrf	_buffer_write_index+1
  3979  0260                     l1860:	
  3980                           
  3981                           ;main.c: 210:                     blockIndex += 2;
  3982  0260  3002               	movlw	2
  3983  0261  0021               	movlb	1	; select bank1
  3984  0262  07AC               	addwf	_blockIndex^(0+128),f
  3985  0263  3000               	movlw	0
  3986  0264  3DAD               	addwfc	(_blockIndex+1)^(0+128),f
  3987                           
  3988                           ;main.c: 213:             }
  3989  0265  29B8               	goto	l1800
  3990  0266                     __end_of_main:	
  3991                           
  3992                           	psect	text1
  3993  0448                     __ptext1:	
  3994 ;; *************** function _timer_Init *****************
  3995 ;; Defined at:
  3996 ;;		line 8 in file "timer.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  rate            4    0[BANK0 ] long 
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;		None
  4001 ;; Return value:  Size  Location     Type
  4002 ;;                  2    0[BANK0 ] int 
  4003 ;; Registers used:
  4004 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4010 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4013 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4014 ;;Total ram usage:        4 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; Hardware stack levels required when called:    1
  4017 ;; This function calls:
  4018 ;;		Nothing
  4019 ;; This function is called by:
  4020 ;;		_main
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           
  4025                           ;psect for function _timer_Init
  4026  0448                     _timer_Init:	
  4027                           
  4028                           ;timer.c: 9:     PIR1bits.TMR2IF = 0;
  4029                           
  4030                           ;incstack = 0
  4031                           ; Regs used in _timer_Init: [wreg-fsr0h+status,2+status,0]
  4032  0448  0020               	movlb	0	; select bank0
  4033  0449  1091               	bcf	17,1	;volatile
  4034                           
  4035                           ;timer.c: 10:     PIE1bits.TMR2IE = 1;
  4036  044A  0021               	movlb	1	; select bank1
  4037  044B  1491               	bsf	17,1	;volatile
  4038                           
  4039                           ;timer.c: 11:     INTCONbits.PEIE = 1;
  4040  044C  170B               	bsf	11,6	;volatile
  4041                           
  4042                           ;timer.c: 12:     INTCONbits.GIE = 1;
  4043  044D  178B               	bsf	11,7	;volatile
  4044                           
  4045                           ;timer.c: 14:     switch (rate) {
  4046  044E  2C79               	goto	l1696
  4047  044F                     l1668:	
  4048                           
  4049                           ;timer.c: 16:             T2PR = 100;
  4050  044F  3064               	movlw	100
  4051  0450  0029               	movlb	9	; select bank9
  4052  0451  0094               	movwf	20	;volatile
  4053                           
  4054                           ;timer.c: 17:             T2CLKCON = 0x03;
  4055  0452  3003               	movlw	3
  4056  0453  0097               	movwf	23	;volatile
  4057                           
  4058                           ;timer.c: 18:             T2CON = 0x89;
  4059  0454  3089               	movlw	137
  4060  0455  0095               	movwf	21	;volatile
  4061                           
  4062                           ;timer.c: 19:             PIR1bits.TMR2IF = 0;
  4063  0456  0020               	movlb	0	; select bank0
  4064  0457  1091               	bcf	17,1	;volatile
  4065  0458  0008               	return
  4066  0459                     l1676:	
  4067                           
  4068                           ;timer.c: 23:             T2PR = 32;
  4069  0459  3020               	movlw	32
  4070  045A  0029               	movlb	9	; select bank9
  4071  045B  0094               	movwf	20	;volatile
  4072                           
  4073                           ;timer.c: 24:             T2CLKCON = 0x03;
  4074  045C  3003               	movlw	3
  4075  045D  0097               	movwf	23	;volatile
  4076                           
  4077                           ;timer.c: 25:             T2CON = 0x8A;
  4078  045E  308A               	movlw	138
  4079  045F  0095               	movwf	21	;volatile
  4080  0460  0008               	return
  4081  0461                     l1682:	
  4082                           
  4083                           ;timer.c: 29:             T2PR = 111;
  4084  0461  306F               	movlw	111
  4085  0462  0029               	movlb	9	; select bank9
  4086  0463  0094               	movwf	20	;volatile
  4087                           
  4088                           ;timer.c: 30:             T2CLKCON = 0x03;
  4089  0464  3003               	movlw	3
  4090  0465  0097               	movwf	23	;volatile
  4091                           
  4092                           ;timer.c: 31:             T2CON = 0x82;
  4093  0466  3082               	movlw	130
  4094  0467  0095               	movwf	21	;volatile
  4095  0468  0008               	return
  4096  0469                     l1688:	
  4097                           
  4098                           ;timer.c: 35:             T2PR = 100;
  4099  0469  3064               	movlw	100
  4100  046A  0029               	movlb	9	; select bank9
  4101  046B  0094               	movwf	20	;volatile
  4102                           
  4103                           ;timer.c: 36:             T2CLKCON = 0x03;
  4104  046C  3003               	movlw	3
  4105  046D  0097               	movwf	23	;volatile
  4106                           
  4107                           ;timer.c: 37:             T2CON = 0x84;
  4108  046E  3084               	movlw	132
  4109  046F  0095               	movwf	21	;volatile
  4110                           
  4111                           ;timer.c: 38:         break;
  4112  0470  0008               	return
  4113  0471                     l1690:	
  4114                           
  4115                           ;timer.c: 40:             T2PR = 65;
  4116  0471  3041               	movlw	65
  4117  0472  0029               	movlb	9	; select bank9
  4118  0473  0094               	movwf	20	;volatile
  4119                           
  4120                           ;timer.c: 41:             T2CLKCON = 0x03;
  4121  0474  3003               	movlw	3
  4122  0475  0097               	movwf	23	;volatile
  4123                           
  4124                           ;timer.c: 42:             T2CON = 0x8A;
  4125  0476  308A               	movlw	138
  4126  0477  0095               	movwf	21	;volatile
  4127  0478  0008               	return
  4128  0479                     l1696:	
  4129                           
  4130                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4131                           ; Switch size 1, requested type "simple"
  4132                           ; Number of cases is 1, Range of values is 0 to 0
  4133                           ; switch strategies available:
  4134                           ; Name         Instructions Cycles
  4135                           ; simple_byte            4     3 (average)
  4136                           ; direct_byte            8     6 (fixed)
  4137                           ; jumptable            260     6 (fixed)
  4138                           ;	Chosen strategy is simple_byte
  4139  0479  0020               	movlb	0	; select bank0
  4140  047A  0823               	movf	timer_Init@rate+3,w
  4141  047B  3A00               	xorlw	0	; case 0
  4142  047C  1903               	skipnz
  4143  047D  2CA9               	goto	l2004
  4144  047E  2CAE               	goto	l127
  4145  047F                     l2002:	
  4146                           
  4147                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 5 sub-sw
      +                          itches
  4148                           ; Switch size 1, requested type "simple"
  4149                           ; Number of cases is 5, Range of values is 62 to 187
  4150                           ; switch strategies available:
  4151                           ; Name         Instructions Cycles
  4152                           ; simple_byte           16     9 (average)
  4153                           ; direct_byte          261     9 (fixed)
  4154                           ; jumptable            263     9 (fixed)
  4155                           ;	Chosen strategy is simple_byte
  4156  047F  0821               	movf	timer_Init@rate+1,w
  4157  0480  3A3E               	xorlw	62	; case 62
  4158  0481  1903               	skipnz
  4159  0482  2C90               	goto	l2006
  4160  0483  3A68               	xorlw	104	; case 86
  4161  0484  1903               	skipnz
  4162  0485  2C95               	goto	l2008
  4163  0486  3A2B               	xorlw	43	; case 125
  4164  0487  1903               	skipnz
  4165  0488  2C9A               	goto	l2010
  4166  0489  3AD1               	xorlw	209	; case 172
  4167  048A  1903               	skipnz
  4168  048B  2C9F               	goto	l2012
  4169  048C  3A17               	xorlw	23	; case 187
  4170  048D  1903               	skipnz
  4171  048E  2CA4               	goto	l2014
  4172  048F  2CAE               	goto	l127
  4173  0490                     l2006:	
  4174                           
  4175                           ; Switch size 1, requested type "simple"
  4176                           ; Number of cases is 1, Range of values is 128 to 128
  4177                           ; switch strategies available:
  4178                           ; Name         Instructions Cycles
  4179                           ; simple_byte            4     3 (average)
  4180                           ; direct_byte           11     9 (fixed)
  4181                           ; jumptable            263     9 (fixed)
  4182                           ;	Chosen strategy is simple_byte
  4183  0490  0820               	movf	timer_Init@rate,w
  4184  0491  3A80               	xorlw	128	; case 128
  4185  0492  1903               	skipnz
  4186  0493  2C4F               	goto	l1668
  4187  0494  2CAE               	goto	l127
  4188  0495                     l2008:	
  4189                           
  4190                           ; Switch size 1, requested type "simple"
  4191                           ; Number of cases is 1, Range of values is 34 to 34
  4192                           ; switch strategies available:
  4193                           ; Name         Instructions Cycles
  4194                           ; simple_byte            4     3 (average)
  4195                           ; direct_byte           11     9 (fixed)
  4196                           ; jumptable            263     9 (fixed)
  4197                           ;	Chosen strategy is simple_byte
  4198  0495  0820               	movf	timer_Init@rate,w
  4199  0496  3A22               	xorlw	34	; case 34
  4200  0497  1903               	skipnz
  4201  0498  2C71               	goto	l1690
  4202  0499  2CAE               	goto	l127
  4203  049A                     l2010:	
  4204                           
  4205                           ; Switch size 1, requested type "simple"
  4206                           ; Number of cases is 1, Range of values is 0 to 0
  4207                           ; switch strategies available:
  4208                           ; Name         Instructions Cycles
  4209                           ; simple_byte            4     3 (average)
  4210                           ; direct_byte            8     6 (fixed)
  4211                           ; jumptable            260     6 (fixed)
  4212                           ;	Chosen strategy is simple_byte
  4213  049A  0820               	movf	timer_Init@rate,w
  4214  049B  3A00               	xorlw	0	; case 0
  4215  049C  1903               	skipnz
  4216  049D  2C69               	goto	l1688
  4217  049E  2CAE               	goto	l127
  4218  049F                     l2012:	
  4219                           
  4220                           ; Switch size 1, requested type "simple"
  4221                           ; Number of cases is 1, Range of values is 68 to 68
  4222                           ; switch strategies available:
  4223                           ; Name         Instructions Cycles
  4224                           ; simple_byte            4     3 (average)
  4225                           ; direct_byte           11     9 (fixed)
  4226                           ; jumptable            263     9 (fixed)
  4227                           ;	Chosen strategy is simple_byte
  4228  049F  0820               	movf	timer_Init@rate,w
  4229  04A0  3A44               	xorlw	68	; case 68
  4230  04A1  1903               	skipnz
  4231  04A2  2C59               	goto	l1676
  4232  04A3  2CAE               	goto	l127
  4233  04A4                     l2014:	
  4234                           
  4235                           ; Switch size 1, requested type "simple"
  4236                           ; Number of cases is 1, Range of values is 128 to 128
  4237                           ; switch strategies available:
  4238                           ; Name         Instructions Cycles
  4239                           ; simple_byte            4     3 (average)
  4240                           ; direct_byte           11     9 (fixed)
  4241                           ; jumptable            263     9 (fixed)
  4242                           ;	Chosen strategy is simple_byte
  4243  04A4  0820               	movf	timer_Init@rate,w
  4244  04A5  3A80               	xorlw	128	; case 128
  4245  04A6  1903               	skipnz
  4246  04A7  2C61               	goto	l1682
  4247  04A8  2CAE               	goto	l127
  4248  04A9                     l2004:	
  4249                           
  4250                           ; Switch size 1, requested type "simple"
  4251                           ; Number of cases is 1, Range of values is 0 to 0
  4252                           ; switch strategies available:
  4253                           ; Name         Instructions Cycles
  4254                           ; simple_byte            4     3 (average)
  4255                           ; direct_byte            8     6 (fixed)
  4256                           ; jumptable            260     6 (fixed)
  4257                           ;	Chosen strategy is simple_byte
  4258  04A9  0822               	movf	timer_Init@rate+2,w
  4259  04AA  3A00               	xorlw	0	; case 0
  4260  04AB  1903               	skipnz
  4261  04AC  2C7F               	goto	l2002
  4262  04AD  2CAE               	goto	l127
  4263  04AE                     l127:	
  4264  04AE  0008               	return
  4265  04AF                     __end_of_timer_Init:	
  4266                           
  4267                           	psect	text2
  4268  0266                     __ptext2:	
  4269 ;; *************** function _openFile *****************
  4270 ;; Defined at:
  4271 ;;		line 87 in file "main.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;  a               4   21[BANK0 ] long 
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;  data            8   35[BANK0 ] struct .
  4276 ;;  fmt            28   43[BANK0 ] struct .
  4277 ;;  riff            8   26[BANK0 ] struct .
  4278 ;;  response        1   34[BANK0 ] unsigned char 
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  1    wreg      void 
  4281 ;; Registers used:
  4282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4288 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4289 ;;      Locals:         0      45       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4291 ;;      Totals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4292 ;;Total ram usage:       50 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    4
  4295 ;; This function calls:
  4296 ;;		_SD_OpenBlock
  4297 ;;		_SPI_Read
  4298 ;;		_error
  4299 ;;		_fourCCeq
  4300 ;;		_readBytes
  4301 ;; This function is called by:
  4302 ;;		_main
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           
  4307                           ;psect for function _openFile
  4308  0266                     _openFile:	
  4309                           
  4310                           ;main.c: 88:     SD_OpenBlock(a);
  4311                           
  4312                           ;incstack = 0
  4313                           ; Regs used in _openFile: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4314  0266  0020               	movlb	0	; select bank0
  4315  0267  0838               	movf	openFile@a+3,w
  4316  0268  00AC               	movwf	SD_OpenBlock@address+3
  4317  0269  0837               	movf	openFile@a+2,w
  4318  026A  00AB               	movwf	SD_OpenBlock@address+2
  4319  026B  0836               	movf	openFile@a+1,w
  4320  026C  00AA               	movwf	SD_OpenBlock@address+1
  4321  026D  0835               	movf	openFile@a,w
  4322  026E  00A9               	movwf	SD_OpenBlock@address
  4323  026F  3185  254F  3182   	fcall	_SD_OpenBlock
  4324                           
  4325                           ;main.c: 89:     state = OPEN;
  4326  0272  0020               	movlb	0	; select bank0
  4327  0273  01ED               	clrf	_state
  4328                           
  4329                           ;main.c: 90:     char response = 0xFF;
  4330  0274  30FF               	movlw	255
  4331  0275                     L1:	
  4332  0275  00B9               	movwf	??_openFile
  4333  0276  0839               	movf	??_openFile,w
  4334  0277  00C2               	movwf	openFile@response
  4335  0278  0A42               	incf	openFile@response,w
  4336  0279  1D03               	btfss	3,2
  4337  027A  2A80               	goto	l1744
  4338                           
  4339                           ;main.c: 91:     while (response == 0xFF) response = SPI_Read();
  4340  027B  3186  2609  3182   	fcall	_SPI_Read
  4341  027E  0020               	movlb	0	; select bank0
  4342  027F  2A75               	goto	L1
  4343  0280                     l1744:	
  4344                           
  4345                           ;main.c: 92:     if (response != 0xFE) error(OPEN_BLOCK);
  4346  0280  30FE               	movlw	254
  4347  0281  0642               	xorwf	openFile@response,w
  4348  0282  1903               	btfsc	3,2
  4349  0283  2A88               	goto	l1748
  4350  0284  3000               	movlw	0
  4351  0285  3185  25F9  3182   	fcall	_error
  4352  0288                     l1748:	
  4353                           
  4354                           ;main.c: 94:     {;main.c: 95:         RiffTag riff;;main.c: 96:         readBytes((char
      +                          *)&riff, sizeof(riff));;
  4355  0288  3008               	movlw	8
  4356  0289  0020               	movlb	0	; select bank0
  4357  028A  00A0               	movwf	readBytes@len
  4358  028B  3000               	movlw	0
  4359  028C  00A1               	movwf	readBytes@len+1
  4360  028D  303A               	movlw	(low (openFile@riff| 0))& (0+255)
  4361  028E  3184  24AF  3182   	fcall	_readBytes
  4362                           
  4363                           ;main.c: 97:         if (!fourCCeq(riff.ckID, "RIFF")) error(RIFF_HEADER);
  4364  0291  3026               	movlw	low (STR_1| (0+32768))
  4365  0292  0020               	movlb	0	; select bank0
  4366  0293  00A0               	movwf	fourCCeq@b
  4367  0294  3086               	movlw	high (STR_1| (0+32768))
  4368  0295  00A1               	movwf	fourCCeq@b+1
  4369  0296  303A               	movlw	(low (openFile@riff| 0))& (0+255)
  4370  0297  3185  2529  3182   	fcall	_fourCCeq
  4371  029A  3A00               	xorlw	0
  4372  029B  1D03               	skipz
  4373  029C  2AA1               	goto	l1754
  4374  029D  3001               	movlw	1
  4375  029E  3185  25F9  3182   	fcall	_error
  4376  02A1                     l1754:	
  4377                           
  4378                           ;main.c: 98:     }{;main.c: 99:         FmtChunk fmt;;main.c: 100:         readBytes((ch
      +                          ar*)&fmt, sizeof(fmt));;
  4379  02A1  301C               	movlw	28
  4380  02A2  0020               	movlb	0	; select bank0
  4381  02A3  00A0               	movwf	readBytes@len
  4382  02A4  3000               	movlw	0
  4383  02A5  00A1               	movwf	readBytes@len+1
  4384  02A6  304B               	movlw	(low (openFile@fmt| 0))& (0+255)
  4385  02A7  3184  24AF  3182   	fcall	_readBytes
  4386                           
  4387                           ;main.c: 101:         if (!fourCCeq(fmt.WAVEID, "WAVE")) error(WAVE_HEADER);
  4388  02AA  3021               	movlw	low (STR_3| (0+32768))
  4389  02AB  0020               	movlb	0	; select bank0
  4390  02AC  00A0               	movwf	fourCCeq@b
  4391  02AD  3086               	movlw	high (STR_3| (0+32768))
  4392  02AE  00A1               	movwf	fourCCeq@b+1
  4393  02AF  304B               	movlw	(low (openFile@fmt| 0))& (0+255)
  4394  02B0  3185  2529  3182   	fcall	_fourCCeq
  4395  02B3  3A00               	xorlw	0
  4396  02B4  1D03               	skipz
  4397  02B5  2ABA               	goto	l1760
  4398  02B6  3002               	movlw	2
  4399  02B7  3185  25F9  3182   	fcall	_error
  4400  02BA                     l1760:	
  4401                           
  4402                           ;main.c: 102:         if (!fourCCeq(fmt.fmtHeader.ckID, "fmt ")) error(FMT_HEADER);
  4403  02BA  307C               	movlw	low (STR_5| (0+32768))
  4404  02BB  0020               	movlb	0	; select bank0
  4405  02BC  00A0               	movwf	fourCCeq@b
  4406  02BD  3081               	movlw	high (STR_5| (0+32768))
  4407  02BE  00A1               	movwf	fourCCeq@b+1
  4408  02BF  304F               	movlw	(low ((openFile@fmt| 0+4)))& (0+255)
  4409  02C0  3185  2529  3182   	fcall	_fourCCeq
  4410  02C3  3A00               	xorlw	0
  4411  02C4  1D03               	skipz
  4412  02C5  2ACA               	goto	l1764
  4413  02C6  3003               	movlw	3
  4414  02C7  3185  25F9  3182   	fcall	_error
  4415  02CA                     l1764:	
  4416                           
  4417                           ;main.c: 103:         if (fmt.formatTag != 0x0001) error(CODEC);
  4418  02CA  0020               	movlb	0	; select bank0
  4419  02CB  0357               	decf	openFile@fmt+12,w
  4420  02CC  0458               	iorwf	openFile@fmt+13,w
  4421  02CD  1903               	btfsc	3,2
  4422  02CE  2AD3               	goto	l1768
  4423  02CF  3004               	movlw	4
  4424  02D0  3185  25F9  3182   	fcall	_error
  4425  02D3                     l1768:	
  4426                           
  4427                           ;main.c: 104:         if (fmt.bitsPerSamp != 16) error(BIT_DEPTH);
  4428  02D3  3010               	movlw	16
  4429  02D4  0020               	movlb	0	; select bank0
  4430  02D5  0665               	xorwf	openFile@fmt+26,w
  4431  02D6  0466               	iorwf	openFile@fmt+27,w
  4432  02D7  1903               	btfsc	3,2
  4433  02D8  2ADD               	goto	l1772
  4434  02D9  3005               	movlw	5
  4435  02DA  3185  25F9  3182   	fcall	_error
  4436  02DD                     l1772:	
  4437                           
  4438                           ;main.c: 106:         channels = fmt.channels;
  4439  02DD  0020               	movlb	0	; select bank0
  4440  02DE  085A               	movf	openFile@fmt+15,w
  4441  02DF  0021               	movlb	1	; select bank1
  4442  02E0  00B3               	movwf	(_channels+1)^(0+128)
  4443  02E1  0020               	movlb	0	; select bank0
  4444  02E2  0859               	movf	openFile@fmt+14,w
  4445  02E3  0021               	movlb	1	; select bank1
  4446  02E4  00B2               	movwf	_channels^(0+128)
  4447                           
  4448                           ;main.c: 107:         sampRate = fmt.sampRate;
  4449  02E5  3010               	movlw	16
  4450  02E6  3E4B               	addlw	(low (openFile@fmt| 0))& (0+255)
  4451  02E7  0086               	movwf	6
  4452  02E8  0187               	clrf	7
  4453  02E9  3F40               	moviw [0]fsr1
  4454  02EA  00A8               	movwf	_sampRate^(0+128)
  4455  02EB  3F41               	moviw [1]fsr1
  4456  02EC  00A9               	movwf	(_sampRate+1)^(0+128)
  4457  02ED  3F42               	moviw [2]fsr1
  4458  02EE  00AA               	movwf	(_sampRate+2)^(0+128)
  4459  02EF  3F43               	moviw [3]fsr1
  4460  02F0  00AB               	movwf	(_sampRate+3)^(0+128)
  4461                           
  4462                           ;main.c: 109:     }{;main.c: 110:         RiffTag data;;main.c: 111:         readBytes((
      +                          char*)&data, sizeof(data));;
  4463  02F1  3008               	movlw	8
  4464  02F2  0020               	movlb	0	; select bank0
  4465  02F3  00A0               	movwf	readBytes@len
  4466  02F4  3000               	movlw	0
  4467  02F5  00A1               	movwf	readBytes@len+1
  4468  02F6  3043               	movlw	(low (openFile@data| 0))& (0+255)
  4469  02F7  3184  24AF  3182   	fcall	_readBytes
  4470                           
  4471                           ;main.c: 112:         if (!fourCCeq(data.ckID, "data")) error(DATA_HEADER);
  4472  02FA  302B               	movlw	low (STR_7| (0+32768))
  4473  02FB  0020               	movlb	0	; select bank0
  4474  02FC  00A0               	movwf	fourCCeq@b
  4475  02FD  3086               	movlw	high (STR_7| (0+32768))
  4476  02FE  00A1               	movwf	fourCCeq@b+1
  4477  02FF  3043               	movlw	(low (openFile@data| 0))& (0+255)
  4478  0300  3185  2529  3182   	fcall	_fourCCeq
  4479  0303  3A00               	xorlw	0
  4480  0304  1D03               	skipz
  4481  0305  2B09               	goto	l1782
  4482  0306  3006               	movlw	6
  4483  0307  3185  25F9         	fcall	_error
  4484  0309                     l1782:	
  4485                           
  4486                           ;main.c: 113:         filesize = data.ckSize;
  4487  0309  3004               	movlw	4
  4488  030A  3E43               	addlw	(low (openFile@data| 0))& (0+255)
  4489  030B  0086               	movwf	6
  4490  030C  0187               	clrf	7
  4491  030D  3F40               	moviw [0]fsr1
  4492  030E  0021               	movlb	1	; select bank1
  4493  030F  00A4               	movwf	_filesize^(0+128)
  4494  0310  3F41               	moviw [1]fsr1
  4495  0311  00A5               	movwf	(_filesize+1)^(0+128)
  4496  0312  3F42               	moviw [2]fsr1
  4497  0313  00A6               	movwf	(_filesize+2)^(0+128)
  4498  0314  3F43               	moviw [3]fsr1
  4499  0315  00A7               	movwf	(_filesize+3)^(0+128)
  4500                           
  4501                           ;main.c: 114:     };main.c: 115:         __nop();
  4502  0316  0000               	nop
  4503  0317  0008               	return
  4504  0318                     __end_of_openFile:	
  4505                           
  4506                           	psect	text3
  4507  04AF                     __ptext3:	
  4508 ;; *************** function _readBytes *****************
  4509 ;; Defined at:
  4510 ;;		line 73 in file "main.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;  dest            1    wreg     PTR unsigned char 
  4513 ;;		 -> openFile@data(8), openFile@fmt(28), openFile@riff(8), 
  4514 ;;  len             2    0[BANK0 ] int 
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;  dest            1    4[BANK0 ] PTR unsigned char 
  4517 ;;		 -> openFile@data(8), openFile@fmt(28), openFile@riff(8), 
  4518 ;;  i               2    5[BANK0 ] int 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      void 
  4521 ;; Registers used:
  4522 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4528 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4529 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4530 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4531 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4532 ;;Total ram usage:        7 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    3
  4535 ;; This function calls:
  4536 ;;		_SD_CloseBlock
  4537 ;;		_SPI_Read
  4538 ;; This function is called by:
  4539 ;;		_openFile
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           
  4544                           ;psect for function _readBytes
  4545  04AF                     _readBytes:	
  4546                           
  4547                           ;incstack = 0
  4548                           ; Regs used in _readBytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4549                           ;readBytes@dest stored from wreg
  4550  04AF  0020               	movlb	0	; select bank0
  4551  04B0  00A4               	movwf	readBytes@dest
  4552                           
  4553                           ;main.c: 74:     for (int i=0; i<len; i++) {
  4554  04B1  01A5               	clrf	readBytes@i
  4555  04B2  01A6               	clrf	readBytes@i+1
  4556  04B3                     l1664:	
  4557  04B3  0826               	movf	readBytes@i+1,w
  4558  04B4  3A80               	xorlw	128
  4559  04B5  00A2               	movwf	??_readBytes
  4560  04B6  0821               	movf	readBytes@len+1,w
  4561  04B7  3A80               	xorlw	128
  4562  04B8  0222               	subwf	??_readBytes,w
  4563  04B9  1D03               	skipz
  4564  04BA  2CBD               	goto	u555
  4565  04BB  0820               	movf	readBytes@len,w
  4566  04BC  0225               	subwf	readBytes@i,w
  4567  04BD                     u555:	
  4568  04BD  1803               	btfsc	3,0
  4569  04BE  0008               	return
  4570                           
  4571                           ;main.c: 75:         dest[i] = SPI_Read();
  4572  04BF  3186  2609  3184   	fcall	_SPI_Read
  4573  04C2  0020               	movlb	0	; select bank0
  4574  04C3  00A2               	movwf	??_readBytes
  4575  04C4  0825               	movf	readBytes@i,w
  4576  04C5  0724               	addwf	readBytes@dest,w
  4577  04C6  00A3               	movwf	??_readBytes+1
  4578  04C7  0823               	movf	??_readBytes+1,w
  4579  04C8  0086               	movwf	6
  4580  04C9  0187               	clrf	7
  4581  04CA  0822               	movf	??_readBytes,w
  4582  04CB  0081               	movwf	1
  4583                           
  4584                           ;main.c: 76:         ++blockIndex;
  4585  04CC  3001               	movlw	1
  4586  04CD  0021               	movlb	1	; select bank1
  4587  04CE  07AC               	addwf	_blockIndex^(0+128),f
  4588  04CF  3000               	movlw	0
  4589  04D0  3DAD               	addwfc	(_blockIndex+1)^(0+128),f
  4590                           
  4591                           ;main.c: 77:         if (blockIndex >= 512) {
  4592  04D1  082D               	movf	(_blockIndex+1)^(0+128),w
  4593  04D2  3A80               	xorlw	128
  4594  04D3  0020               	movlb	0	; select bank0
  4595  04D4  00A2               	movwf	??_readBytes
  4596  04D5  3082               	movlw	130
  4597  04D6  0222               	subwf	??_readBytes,w
  4598  04D7  1D03               	skipz
  4599  04D8  2CDC               	goto	u545
  4600  04D9  3000               	movlw	0
  4601  04DA  0021               	movlb	1	; select bank1
  4602  04DB  022C               	subwf	_blockIndex^(0+128),w
  4603  04DC                     u545:	
  4604  04DC  1C03               	skipc
  4605  04DD  2CF1               	goto	l1662
  4606                           
  4607                           ;main.c: 78:             SD_CloseBlock();
  4608  04DE  3185  25F0  3184   	fcall	_SD_CloseBlock
  4609                           
  4610                           ;main.c: 79:             ++address;
  4611  04E1  3001               	movlw	1
  4612  04E2  0021               	movlb	1	; select bank1
  4613  04E3  07A0               	addwf	_address^(0+128),f
  4614  04E4  3000               	movlw	0
  4615  04E5  3DA1               	addwfc	(_address+1)^(0+128),f
  4616  04E6  3000               	movlw	0
  4617  04E7  3DA2               	addwfc	(_address+2)^(0+128),f
  4618  04E8  3000               	movlw	0
  4619  04E9  3DA3               	addwfc	(_address+3)^(0+128),f
  4620                           
  4621                           ;main.c: 80:             blockIndex = 0;
  4622  04EA  01AC               	clrf	_blockIndex^(0+128)
  4623  04EB  01AD               	clrf	(_blockIndex+1)^(0+128)
  4624                           
  4625                           ;main.c: 81:             state = CLOSED;
  4626  04EC  3003               	movlw	3
  4627  04ED  0020               	movlb	0	; select bank0
  4628  04EE  00A2               	movwf	??_readBytes
  4629  04EF  0822               	movf	??_readBytes,w
  4630  04F0  00ED               	movwf	_state
  4631  04F1                     l1662:	
  4632                           
  4633                           ;main.c: 83:     }
  4634  04F1  3001               	movlw	1
  4635  04F2  0020               	movlb	0	; select bank0
  4636  04F3  07A5               	addwf	readBytes@i,f
  4637  04F4  3000               	movlw	0
  4638  04F5  3DA6               	addwfc	readBytes@i+1,f
  4639  04F6  2CB3               	goto	l1664
  4640  04F7                     __end_of_readBytes:	
  4641                           
  4642                           	psect	text4
  4643  05F0                     __ptext4:	
  4644 ;; *************** function _SD_CloseBlock *****************
  4645 ;; Defined at:
  4646 ;;		line 275 in file "SD.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;		None
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;		None
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  1    wreg      _Bool 
  4653 ;; Registers used:
  4654 ;;		wreg, status,2, status,0, pclath, cstack
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4664 ;;Total ram usage:        0 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; Hardware stack levels required when called:    2
  4667 ;; This function calls:
  4668 ;;		_SPI_Read
  4669 ;; This function is called by:
  4670 ;;		_readBytes
  4671 ;;		_main
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           
  4676                           ;psect for function _SD_CloseBlock
  4677  05F0                     _SD_CloseBlock:	
  4678                           
  4679                           ;SD.c: 277:     SPI_Read();
  4680                           
  4681                           ;incstack = 0
  4682                           ; Regs used in _SD_CloseBlock: [wreg+status,2+status,0+pclath+cstack]
  4683  05F0  3186  2609  3185   	fcall	_SPI_Read
  4684                           
  4685                           ;SD.c: 278:     SPI_Read();
  4686  05F3  3186  2609  3185   	fcall	_SPI_Read
  4687                           
  4688                           ;SD.c: 280:     SPI_Read();
  4689  05F6  3186  2609         	fcall	_SPI_Read
  4690  05F8  0008               	return
  4691  05F9                     __end_of_SD_CloseBlock:	
  4692                           
  4693                           	psect	text5
  4694  0529                     __ptext5:	
  4695 ;; *************** function _fourCCeq *****************
  4696 ;; Defined at:
  4697 ;;		line 48 in file "main.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;  a               1    wreg     PTR unsigned char 
  4700 ;;		 -> openFile@data(8), fmt.fmtHeader(8), openFile@fmt(28), openFile@riff(8), 
  4701 ;;  b               2    0[BANK0 ] PTR unsigned char 
  4702 ;;		 -> STR_8(5), STR_6(5), STR_4(5), STR_2(5), 
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;  a               1    6[BANK0 ] PTR unsigned char 
  4705 ;;		 -> openFile@data(8), fmt.fmtHeader(8), openFile@fmt(28), openFile@riff(8), 
  4706 ;;  i               1    7[BANK0 ] unsigned char 
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  1    wreg      _Bool 
  4709 ;; Registers used:
  4710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  4711 ;; Tracked objects:
  4712 ;;		On entry : 0/0
  4713 ;;		On exit  : 0/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4716 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4717 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4718 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4719 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4720 ;;Total ram usage:        8 bytes
  4721 ;; Hardware stack levels used:    1
  4722 ;; Hardware stack levels required when called:    1
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		_openFile
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           
  4731                           ;psect for function _fourCCeq
  4732  0529                     _fourCCeq:	
  4733                           
  4734                           ;incstack = 0
  4735                           ; Regs used in _fourCCeq: [wreg-fsr1h+status,2+status,0+pclath]
  4736                           ;fourCCeq@a stored from wreg
  4737  0529  0020               	movlb	0	; select bank0
  4738  052A  00A6               	movwf	fourCCeq@a
  4739                           
  4740                           ;main.c: 49:     for (char i=0; i<4; i++) {
  4741  052B  01A7               	clrf	fourCCeq@i
  4742  052C                     l1630:	
  4743                           
  4744                           ;main.c: 50:         if (a[i] != b[i]) return 0;
  4745  052C  0821               	movf	fourCCeq@b+1,w
  4746  052D  00A3               	movwf	??_fourCCeq+1
  4747  052E  0820               	movf	fourCCeq@b,w
  4748  052F  00A2               	movwf	??_fourCCeq
  4749  0530  0827               	movf	fourCCeq@i,w
  4750  0531  0722               	addwf	??_fourCCeq,w
  4751  0532  0084               	movwf	4
  4752  0533  0823               	movf	??_fourCCeq+1,w
  4753  0534  1803               	skipnc
  4754  0535  0A23               	incf	??_fourCCeq+1,w
  4755  0536  0085               	movwf	5
  4756  0537  0800               	movf	0,w	;code access
  4757  0538  00A4               	movwf	??_fourCCeq+2
  4758  0539  0827               	movf	fourCCeq@i,w
  4759  053A  0726               	addwf	fourCCeq@a,w
  4760  053B  00A5               	movwf	??_fourCCeq+3
  4761  053C  0825               	movf	??_fourCCeq+3,w
  4762  053D  0086               	movwf	6
  4763  053E  0187               	clrf	7
  4764  053F  0801               	movf	1,w
  4765  0540  0624               	xorwf	??_fourCCeq+2,w
  4766  0541  1903               	skipnz
  4767  0542  2D45               	goto	l1636
  4768  0543  3000               	movlw	0
  4769  0544  0008               	return
  4770  0545                     l1636:	
  4771                           
  4772                           ;main.c: 51:     }
  4773  0545  3001               	movlw	1
  4774  0546  00A2               	movwf	??_fourCCeq
  4775  0547  0822               	movf	??_fourCCeq,w
  4776  0548  07A7               	addwf	fourCCeq@i,f
  4777  0549  3004               	movlw	4
  4778  054A  0227               	subwf	fourCCeq@i,w
  4779  054B  1C03               	skipc
  4780  054C  2D2C               	goto	l1630
  4781                           
  4782                           ;main.c: 52:     return 1;
  4783  054D  3001               	movlw	1
  4784  054E  0008               	return
  4785  054F                     __end_of_fourCCeq:	
  4786                           
  4787                           	psect	text6
  4788  05F9                     __ptext6:	
  4789 ;; *************** function _error *****************
  4790 ;; Defined at:
  4791 ;;		line 17 in file "./error.h"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;  e               1    wreg     enum E12100
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;  e               1    1[BANK0 ] enum E12100
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  1    wreg      void 
  4798 ;; Registers used:
  4799 ;;		wreg
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4806 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4808 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4809 ;;Total ram usage:        2 bytes
  4810 ;; Hardware stack levels used:    1
  4811 ;; Hardware stack levels required when called:    1
  4812 ;; This function calls:
  4813 ;;		Nothing
  4814 ;; This function is called by:
  4815 ;;		_openFile
  4816 ;;		_main
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           
  4821                           ;psect for function _error
  4822  05F9                     _error:	
  4823                           
  4824                           ;incstack = 0
  4825                           ; Regs used in _error: [wreg]
  4826                           ;error@e stored from wreg
  4827  05F9  0020               	movlb	0	; select bank0
  4828  05FA  00A1               	movwf	error@e
  4829                           
  4830                           ;./error.h: 19:     global_error = e;
  4831  05FB  0821               	movf	error@e,w
  4832  05FC  00A0               	movwf	??_error
  4833  05FD  0820               	movf	??_error,w
  4834  05FE  00FC               	movwf	_global_error
  4835                           
  4836                           ;./error.h: 20:     __nop();
  4837  05FF  0000               	nop
  4838  0600  0008               	return
  4839  0601                     __end_of_error:	
  4840                           
  4841                           	psect	text7
  4842  054F                     __ptext7:	
  4843 ;; *************** function _SD_OpenBlock *****************
  4844 ;; Defined at:
  4845 ;;		line 256 in file "SD.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;  address         4    9[BANK0 ] long 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  a               4   17[BANK0 ] struct .
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      _Bool 
  4852 ;; Registers used:
  4853 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4859 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4860 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4861 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4862 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4863 ;;Total ram usage:       12 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    3
  4866 ;; This function calls:
  4867 ;;		_SD_Check8bitResponse
  4868 ;;		_SD_Read8bitResponse
  4869 ;;		_SD_SendCommand
  4870 ;; This function is called by:
  4871 ;;		_openFile
  4872 ;;		_main
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           
  4877                           ;psect for function _SD_OpenBlock
  4878  054F                     _SD_OpenBlock:	
  4879                           
  4880                           ;SD.c: 260:     BlockAddress a = *((BlockAddress*)(&address));
  4881                           
  4882                           ;incstack = 0
  4883                           ; Regs used in _SD_OpenBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4884  054F  0020               	movlb	0	; select bank0
  4885  0550  082C               	movf	SD_OpenBlock@address+3,w
  4886  0551  00B4               	movwf	SD_OpenBlock@a+3
  4887  0552  082B               	movf	SD_OpenBlock@address+2,w
  4888  0553  00B3               	movwf	SD_OpenBlock@a+2
  4889  0554  082A               	movf	SD_OpenBlock@address+1,w
  4890  0555  00B2               	movwf	SD_OpenBlock@a+1
  4891  0556  0829               	movf	SD_OpenBlock@address,w
  4892  0557  00B1               	movwf	SD_OpenBlock@a
  4893                           
  4894                           ;SD.c: 262:     SD_SendCommand(17, a.a3, a.a2, a.a1, a.a0);
  4895  0558  0834               	movf	SD_OpenBlock@a+3,w
  4896  0559  00AD               	movwf	??_SD_OpenBlock
  4897  055A  082D               	movf	??_SD_OpenBlock,w
  4898  055B  00A1               	movwf	SD_SendCommand@ARG3
  4899  055C  0833               	movf	SD_OpenBlock@a+2,w
  4900  055D  00AE               	movwf	??_SD_OpenBlock+1
  4901  055E  082E               	movf	??_SD_OpenBlock+1,w
  4902  055F  00A2               	movwf	SD_SendCommand@ARG2
  4903  0560  0832               	movf	SD_OpenBlock@a+1,w
  4904  0561  00AF               	movwf	??_SD_OpenBlock+2
  4905  0562  082F               	movf	??_SD_OpenBlock+2,w
  4906  0563  00A3               	movwf	SD_SendCommand@ARG1
  4907  0564  0831               	movf	SD_OpenBlock@a,w
  4908  0565  00B0               	movwf	??_SD_OpenBlock+3
  4909  0566  0830               	movf	??_SD_OpenBlock+3,w
  4910  0567  00A4               	movwf	SD_SendCommand@ARG0
  4911  0568  3011               	movlw	17
  4912  0569  3183  2318  3185   	fcall	_SD_SendCommand
  4913                           
  4914                           ;SD.c: 265:     SD_Read8bitResponse();
  4915  056C  3185  25C9  3185   	fcall	_SD_Read8bitResponse
  4916                           
  4917                           ;SD.c: 268:     if(SD_Check8bitResponse(0x00) == 0) return 0;
  4918  056F  3000               	movlw	0
  4919  0570  3185  25E6         	fcall	_SD_Check8bitResponse
  4920  0572  0008               	return
  4921  0573                     __end_of_SD_OpenBlock:	
  4922                           
  4923                           	psect	text8
  4924  05B4                     __ptext8:	
  4925 ;; *************** function _init *****************
  4926 ;; Defined at:
  4927 ;;		line 55 in file "main.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;		None
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;		None
  4932 ;; Return value:  Size  Location     Type
  4933 ;;                  1    wreg      void 
  4934 ;; Registers used:
  4935 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4945 ;;Total ram usage:        0 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; Hardware stack levels required when called:    4
  4948 ;; This function calls:
  4949 ;;		_DAC_Init
  4950 ;;		_SD_Init
  4951 ;;		_SPI_Init
  4952 ;; This function is called by:
  4953 ;;		_main
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           
  4958                           ;psect for function _init
  4959  05B4                     _init:	
  4960                           
  4961                           ;main.c: 57:     OSCCON = 0xF4;
  4962                           
  4963                           ;incstack = 0
  4964                           ; Regs used in _init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4965  05B4  30F4               	movlw	244
  4966  05B5  0021               	movlb	1	; select bank1
  4967  05B6  009B               	movwf	27	;volatile
  4968  05B7                     l222:	
  4969                           ;main.c: 58:     while(OSCSTATbits.HFIOFR == 0);
  4970                           
  4971  05B7  1E1C               	btfss	28,4	;volatile
  4972  05B8  2DB7               	goto	l222
  4973                           
  4974                           ;main.c: 60:     TRISBbits.TRISB1 = 1;
  4975  05B9  148D               	bsf	13,1	;volatile
  4976                           
  4977                           ;main.c: 61:     ANSELBbits.ANSB1 = 0;
  4978  05BA  0023               	movlb	3	; select bank3
  4979  05BB  108D               	bcf	13,1	;volatile
  4980                           
  4981                           ;main.c: 63:     TRISCbits.TRISC0 = 0;
  4982  05BC  0021               	movlb	1	; select bank1
  4983  05BD  100E               	bcf	14,0	;volatile
  4984                           
  4985                           ;main.c: 64:     TRISCbits.TRISC1 = 0;
  4986  05BE  108E               	bcf	14,1	;volatile
  4987                           
  4988                           ;main.c: 65:     TRISBbits.TRISB0 = 0;
  4989  05BF  100D               	bcf	13,0	;volatile
  4990                           
  4991                           ;main.c: 68:     SPI_Init();
  4992  05C0  3185  2597  3185   	fcall	_SPI_Init
  4993                           
  4994                           ;main.c: 69:     SD_Init();
  4995  05C3  3183  23B7  3185   	fcall	_SD_Init
  4996                           
  4997                           ;main.c: 70:     DAC_Init();
  4998  05C6  3186  2610         	fcall	_DAC_Init
  4999  05C8  0008               	return
  5000  05C9                     __end_of_init:	
  5001                           
  5002                           	psect	text9
  5003  0597                     __ptext9:	
  5004 ;; *************** function _SPI_Init *****************
  5005 ;; Defined at:
  5006 ;;		line 7 in file "SPI.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;		None
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;		None
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg, status,2
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5024 ;;Total ram usage:        0 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    1
  5027 ;; This function calls:
  5028 ;;		Nothing
  5029 ;; This function is called by:
  5030 ;;		_init
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           
  5035                           ;psect for function _SPI_Init
  5036  0597                     _SPI_Init:	
  5037                           
  5038                           ;SPI.c: 9:     TRISC2 = 0;
  5039                           
  5040                           ;incstack = 0
  5041                           ; Regs used in _SPI_Init: [wreg+status,2]
  5042  0597  0021               	movlb	1	; select bank1
  5043  0598  110E               	bcf	14,2	;volatile
  5044                           
  5045                           ;SPI.c: 10:     RC2PPS = 0x21;
  5046  0599  3021               	movlw	33
  5047  059A  003D               	movlb	29	; select bank29
  5048  059B  00A2               	movwf	34	;volatile
  5049                           
  5050                           ;SPI.c: 11:     SSPCLKPPS = 0x12;
  5051  059C  3012               	movlw	18
  5052  059D  003C               	movlb	28	; select bank28
  5053  059E  00BA               	movwf	58	;volatile
  5054                           
  5055                           ;SPI.c: 14:     TRISC3 = 1;
  5056  059F  0021               	movlb	1	; select bank1
  5057  05A0  158E               	bsf	14,3	;volatile
  5058                           
  5059                           ;SPI.c: 15:     ANSC3 = 0;
  5060  05A1  0023               	movlb	3	; select bank3
  5061  05A2  118E               	bcf	14,3	;volatile
  5062                           
  5063                           ;SPI.c: 16:     SSPDATPPS = 0x13;
  5064  05A3  3013               	movlw	19
  5065  05A4  003C               	movlb	28	; select bank28
  5066  05A5  00BB               	movwf	59	;volatile
  5067                           
  5068                           ;SPI.c: 19:     TRISC4 = 0;
  5069  05A6  0021               	movlb	1	; select bank1
  5070  05A7  120E               	bcf	14,4	;volatile
  5071                           
  5072                           ;SPI.c: 20:     RC4PPS = 0x23;
  5073  05A8  3023               	movlw	35
  5074  05A9  003D               	movlb	29	; select bank29
  5075  05AA  00A4               	movwf	36	;volatile
  5076                           
  5077                           ;SPI.c: 23:     TRISC7 = 0;
  5078  05AB  0021               	movlb	1	; select bank1
  5079  05AC  138E               	bcf	14,7	;volatile
  5080                           
  5081                           ;SPI.c: 26:     SSP1STAT = 0x80;
  5082  05AD  3080               	movlw	128
  5083  05AE  0024               	movlb	4	; select bank4
  5084  05AF  0094               	movwf	20	;volatile
  5085                           
  5086                           ;SPI.c: 29:     SSP1CON1 = 0x30;
  5087  05B0  3030               	movlw	48
  5088  05B1  0095               	movwf	21	;volatile
  5089                           
  5090                           ;SPI.c: 32:     SSP1ADD = 0x00;
  5091  05B2  0192               	clrf	18	;volatile
  5092  05B3  0008               	return
  5093  05B4                     __end_of_SPI_Init:	
  5094                           
  5095                           	psect	text10
  5096  03B7                     __ptext10:	
  5097 ;; *************** function _SD_Init *****************
  5098 ;; Defined at:
  5099 ;;		line 11 in file "SD.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;		None
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;		None
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  1    wreg      void 
  5106 ;; Registers used:
  5107 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5116 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5117 ;;Total ram usage:        1 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; Hardware stack levels required when called:    3
  5120 ;; This function calls:
  5121 ;;		_SD_Check40bitResponse
  5122 ;;		_SD_Check8bitResponse
  5123 ;;		_SD_Read40bitResponse
  5124 ;;		_SD_Read8bitResponse
  5125 ;;		_SD_SendCommand
  5126 ;;		_SPI_Write
  5127 ;; This function is called by:
  5128 ;;		_init
  5129 ;; This function uses a non-reentrant model
  5130 ;;
  5131                           
  5132                           
  5133                           ;psect for function _SD_Init
  5134  03B7                     _SD_Init:	
  5135                           
  5136                           ;SD.c: 14:     { PORTCbits.RC7 = 1; SSP1CON1bits.WCOL = 0; };
  5137                           
  5138                           ;incstack = 0
  5139                           ; Regs used in _SD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5140  03B7  0020               	movlb	0	; select bank0
  5141  03B8  178E               	bsf	14,7	;volatile
  5142  03B9  0024               	movlb	4	; select bank4
  5143  03BA  1395               	bcf	21,7	;volatile
  5144                           
  5145                           ;SD.c: 16:     SPI_Write(0xFF);
  5146  03BB  30FF               	movlw	255
  5147  03BC  3186  2601  3183   	fcall	_SPI_Write
  5148                           
  5149                           ;SD.c: 17:     SPI_Write(0xFF);
  5150  03BF  30FF               	movlw	255
  5151  03C0  3186  2601  3183   	fcall	_SPI_Write
  5152                           
  5153                           ;SD.c: 18:     SPI_Write(0xFF);
  5154  03C3  30FF               	movlw	255
  5155  03C4  3186  2601  3183   	fcall	_SPI_Write
  5156                           
  5157                           ;SD.c: 19:     SPI_Write(0xFF);
  5158  03C7  30FF               	movlw	255
  5159  03C8  3186  2601  3183   	fcall	_SPI_Write
  5160                           
  5161                           ;SD.c: 20:     SPI_Write(0xFF);
  5162  03CB  30FF               	movlw	255
  5163  03CC  3186  2601  3183   	fcall	_SPI_Write
  5164                           
  5165                           ;SD.c: 21:     SPI_Write(0xFF);
  5166  03CF  30FF               	movlw	255
  5167  03D0  3186  2601  3183   	fcall	_SPI_Write
  5168                           
  5169                           ;SD.c: 22:     SPI_Write(0xFF);
  5170  03D3  30FF               	movlw	255
  5171  03D4  3186  2601  3183   	fcall	_SPI_Write
  5172                           
  5173                           ;SD.c: 23:     SPI_Write(0xFF);
  5174  03D7  30FF               	movlw	255
  5175  03D8  3186  2601  3183   	fcall	_SPI_Write
  5176                           
  5177                           ;SD.c: 24:     SPI_Write(0xFF);
  5178  03DB  30FF               	movlw	255
  5179  03DC  3186  2601  3183   	fcall	_SPI_Write
  5180                           
  5181                           ;SD.c: 25:     SPI_Write(0xFF);
  5182  03DF  30FF               	movlw	255
  5183  03E0  3186  2601  3183   	fcall	_SPI_Write
  5184                           
  5185                           ;SD.c: 27:     { PORTCbits.RC7 = 0; SSP1CON1bits.WCOL = 0; };
  5186  03E3  0020               	movlb	0	; select bank0
  5187  03E4  138E               	bcf	14,7	;volatile
  5188  03E5  0024               	movlb	4	; select bank4
  5189  03E6  1395               	bcf	21,7	;volatile
  5190  03E7                     l1572:	
  5191                           
  5192                           ;SD.c: 34:         SD_SendCommand(0, 0x00, 0x00, 0x00, 0x00);
  5193  03E7  0020               	movlb	0	; select bank0
  5194  03E8  01A1               	clrf	SD_SendCommand@ARG3
  5195  03E9  01A2               	clrf	SD_SendCommand@ARG2
  5196  03EA  01A3               	clrf	SD_SendCommand@ARG1
  5197  03EB  01A4               	clrf	SD_SendCommand@ARG0
  5198  03EC  3000               	movlw	0
  5199  03ED  3183  2318  3183   	fcall	_SD_SendCommand
  5200                           
  5201                           ;SD.c: 35:         SD_Read8bitResponse();
  5202  03F0  3185  25C9  3183   	fcall	_SD_Read8bitResponse
  5203  03F3  0000               	nop	;# 
  5204                           
  5205                           ;SD.c: 37:     } while (SD_Check8bitResponse(0x01) == 0);
  5206  03F4  3001               	movlw	1
  5207  03F5  3185  25E6  3183   	fcall	_SD_Check8bitResponse
  5208  03F8  3A00               	xorlw	0
  5209  03F9  1903               	skipnz
  5210  03FA  2BE7               	goto	l1572
  5211  03FB                     l1578:	
  5212                           
  5213                           ;SD.c: 44:         SD_SendCommand(8, 0x00, 0x00, 0x01, 0xAA);
  5214  03FB  0020               	movlb	0	; select bank0
  5215  03FC  01A1               	clrf	SD_SendCommand@ARG3
  5216  03FD  01A2               	clrf	SD_SendCommand@ARG2
  5217  03FE  01A3               	clrf	SD_SendCommand@ARG1
  5218  03FF  0AA3               	incf	SD_SendCommand@ARG1,f
  5219  0400  30AA               	movlw	170
  5220  0401  00A9               	movwf	??_SD_Init
  5221  0402  0829               	movf	??_SD_Init,w
  5222  0403  00A4               	movwf	SD_SendCommand@ARG0
  5223  0404  3008               	movlw	8
  5224  0405  3183  2318  3183   	fcall	_SD_SendCommand
  5225                           
  5226                           ;SD.c: 45:         SD_Read40bitResponse();
  5227  0408  3184  24F7  3183   	fcall	_SD_Read40bitResponse
  5228  040B  0000               	nop	;# 
  5229                           
  5230                           ;SD.c: 47:     } while (SD_Check40bitResponse(0x01, 0x00, 0x00, 0x01, 0xAA) == 0);
  5231  040C  0020               	movlb	0	; select bank0
  5232  040D  01A0               	clrf	SD_Check40bitResponse@Byte3
  5233  040E  01A1               	clrf	SD_Check40bitResponse@Byte2
  5234  040F  01A2               	clrf	SD_Check40bitResponse@Byte1
  5235  0410  0AA2               	incf	SD_Check40bitResponse@Byte1,f
  5236  0411  30AA               	movlw	170
  5237  0412  00A9               	movwf	??_SD_Init
  5238  0413  0829               	movf	??_SD_Init,w
  5239  0414  00A3               	movwf	SD_Check40bitResponse@Byte0
  5240  0415  3001               	movlw	1
  5241  0416  3185  2573  3183   	fcall	_SD_Check40bitResponse
  5242  0419  3A00               	xorlw	0
  5243  041A  1903               	skipnz
  5244  041B  2BFB               	goto	l1578
  5245  041C                     l1584:	
  5246                           
  5247                           ;SD.c: 55:             SD_SendCommand(55, 0x00, 0x00, 0x00, 0x00);
  5248  041C  0020               	movlb	0	; select bank0
  5249  041D  01A1               	clrf	SD_SendCommand@ARG3
  5250  041E  01A2               	clrf	SD_SendCommand@ARG2
  5251  041F  01A3               	clrf	SD_SendCommand@ARG1
  5252  0420  01A4               	clrf	SD_SendCommand@ARG0
  5253  0421  3037               	movlw	55
  5254  0422  3183  2318  3183   	fcall	_SD_SendCommand
  5255                           
  5256                           ;SD.c: 56:             SD_Read8bitResponse();
  5257  0425  3185  25C9  3183   	fcall	_SD_Read8bitResponse
  5258  0428  0000               	nop	;# 
  5259                           
  5260                           ;SD.c: 58:         } while (SD_Check8bitResponse(0x01) == 0);
  5261  0429  3001               	movlw	1
  5262  042A  3185  25E6  3183   	fcall	_SD_Check8bitResponse
  5263  042D  3A00               	xorlw	0
  5264  042E  1903               	skipnz
  5265  042F  2C1C               	goto	l1584
  5266                           
  5267                           ;SD.c: 65:         SD_SendCommand(41, 0x40, 0x00, 0x00, 0x00);
  5268  0430  3040               	movlw	64
  5269  0431  0020               	movlb	0	; select bank0
  5270  0432  00A9               	movwf	??_SD_Init
  5271  0433  0829               	movf	??_SD_Init,w
  5272  0434  00A1               	movwf	SD_SendCommand@ARG3
  5273  0435  01A2               	clrf	SD_SendCommand@ARG2
  5274  0436  01A3               	clrf	SD_SendCommand@ARG1
  5275  0437  01A4               	clrf	SD_SendCommand@ARG0
  5276  0438  3029               	movlw	41
  5277  0439  3183  2318  3183   	fcall	_SD_SendCommand
  5278                           
  5279                           ;SD.c: 66:         SD_Read8bitResponse();
  5280  043C  3185  25C9  3183   	fcall	_SD_Read8bitResponse
  5281  043F  0000               	nop	;# 
  5282                           
  5283                           ;SD.c: 68:     } while (SD_Check8bitResponse(0x00) == 0);
  5284  0440  3000               	movlw	0
  5285  0441  3185  25E6  3183   	fcall	_SD_Check8bitResponse
  5286  0444  3A00               	xorlw	0
  5287  0445  1D03               	btfss	3,2
  5288  0446  0008               	return
  5289  0447  2C1C               	goto	l1584
  5290  0448                     __end_of_SD_Init:	
  5291                           
  5292                           	psect	text11
  5293  0318                     __ptext11:	
  5294 ;; *************** function _SD_SendCommand *****************
  5295 ;; Defined at:
  5296 ;;		line 77 in file "SD.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  CMD_6bit        1    wreg     unsigned char 
  5299 ;;  ARG3            1    1[BANK0 ] unsigned char 
  5300 ;;  ARG2            1    2[BANK0 ] unsigned char 
  5301 ;;  ARG1            1    3[BANK0 ] unsigned char 
  5302 ;;  ARG0            1    4[BANK0 ] unsigned char 
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;  CMD_6bit        1    6[BANK0 ] unsigned char 
  5305 ;;  Checksum        1    8[BANK0 ] unsigned char 
  5306 ;;  ByteToSend      1    7[BANK0 ] unsigned char 
  5307 ;; Return value:  Size  Location     Type
  5308 ;;                  1    wreg      void 
  5309 ;; Registers used:
  5310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5311 ;; Tracked objects:
  5312 ;;		On entry : 0/0
  5313 ;;		On exit  : 0/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5316 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5317 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5319 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5320 ;;Total ram usage:        8 bytes
  5321 ;; Hardware stack levels used:    1
  5322 ;; Hardware stack levels required when called:    2
  5323 ;; This function calls:
  5324 ;;		_SPI_Write
  5325 ;; This function is called by:
  5326 ;;		_SD_Init
  5327 ;;		_SD_OpenBlock
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           
  5332                           ;psect for function _SD_SendCommand
  5333  0318                     _SD_SendCommand:	
  5334                           
  5335                           ;incstack = 0
  5336                           ; Regs used in _SD_SendCommand: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5337                           ;SD_SendCommand@CMD_6bit stored from wreg
  5338  0318  0020               	movlb	0	; select bank0
  5339  0319  00A6               	movwf	SD_SendCommand@CMD_6bit
  5340                           
  5341                           ;SD.c: 79:     char Checksum = 0x00;
  5342  031A  01A8               	clrf	SD_SendCommand@Checksum
  5343                           
  5344                           ;SD.c: 82:     ByteToSend = (CMD_6bit & 0x3F) | 0x40;
  5345  031B  0826               	movf	SD_SendCommand@CMD_6bit,w
  5346  031C  393F               	andlw	63
  5347  031D  3840               	iorlw	64
  5348  031E  00A5               	movwf	??_SD_SendCommand
  5349  031F  0825               	movf	??_SD_SendCommand,w
  5350  0320  00A7               	movwf	SD_SendCommand@ByteToSend
  5351                           
  5352                           ;SD.c: 83:     SPI_Write(ByteToSend);
  5353  0321  0827               	movf	SD_SendCommand@ByteToSend,w
  5354  0322  3186  2601  3183   	fcall	_SPI_Write
  5355                           
  5356                           ;SD.c: 84:     { Checksum = Checksum << 1; Checksum = Checksum ^ ByteToSend; Checksum = 
      +                          CRCTable[Checksum]; };
  5357  0325  0020               	movlb	0	; select bank0
  5358  0326  3528               	lslf	SD_SendCommand@Checksum,w
  5359  0327  00A5               	movwf	??_SD_SendCommand
  5360  0328  0825               	movf	??_SD_SendCommand,w
  5361  0329  00A8               	movwf	SD_SendCommand@Checksum
  5362  032A  0828               	movf	SD_SendCommand@Checksum,w
  5363  032B  0627               	xorwf	SD_SendCommand@ByteToSend,w
  5364  032C  00A5               	movwf	??_SD_SendCommand
  5365  032D  0825               	movf	??_SD_SendCommand,w
  5366  032E  00A8               	movwf	SD_SendCommand@Checksum
  5367  032F  0828               	movf	SD_SendCommand@Checksum,w
  5368  0330  3E7C               	addlw	low (_CRCTable| (0+32768))
  5369  0331  0084               	movwf	4
  5370  0332  3080               	movlw	high (_CRCTable| (0+32768))
  5371  0333  1803               	skipnc
  5372  0334  3E01               	addlw	1
  5373  0335  0085               	movwf	5
  5374  0336  0800               	movf	0,w	;code access
  5375  0337  00A5               	movwf	??_SD_SendCommand
  5376  0338  0825               	movf	??_SD_SendCommand,w
  5377  0339  00A8               	movwf	SD_SendCommand@Checksum
  5378                           
  5379                           ;SD.c: 87:     ByteToSend = ARG3;
  5380  033A  0821               	movf	SD_SendCommand@ARG3,w
  5381  033B  00A5               	movwf	??_SD_SendCommand
  5382  033C  0825               	movf	??_SD_SendCommand,w
  5383  033D  00A7               	movwf	SD_SendCommand@ByteToSend
  5384                           
  5385                           ;SD.c: 88:     SPI_Write(ByteToSend);
  5386  033E  0827               	movf	SD_SendCommand@ByteToSend,w
  5387  033F  3186  2601  3183   	fcall	_SPI_Write
  5388                           
  5389                           ;SD.c: 89:     { Checksum = Checksum << 1; Checksum = Checksum ^ ByteToSend; Checksum = 
      +                          CRCTable[Checksum]; };
  5390  0342  0020               	movlb	0	; select bank0
  5391  0343  3528               	lslf	SD_SendCommand@Checksum,w
  5392  0344  00A5               	movwf	??_SD_SendCommand
  5393  0345  0825               	movf	??_SD_SendCommand,w
  5394  0346  00A8               	movwf	SD_SendCommand@Checksum
  5395  0347  0828               	movf	SD_SendCommand@Checksum,w
  5396  0348  0627               	xorwf	SD_SendCommand@ByteToSend,w
  5397  0349  00A5               	movwf	??_SD_SendCommand
  5398  034A  0825               	movf	??_SD_SendCommand,w
  5399  034B  00A8               	movwf	SD_SendCommand@Checksum
  5400  034C  0828               	movf	SD_SendCommand@Checksum,w
  5401  034D  3E7C               	addlw	low (_CRCTable| (0+32768))
  5402  034E  0084               	movwf	4
  5403  034F  3080               	movlw	high (_CRCTable| (0+32768))
  5404  0350  1803               	skipnc
  5405  0351  3E01               	addlw	1
  5406  0352  0085               	movwf	5
  5407  0353  0800               	movf	0,w	;code access
  5408  0354  00A5               	movwf	??_SD_SendCommand
  5409  0355  0825               	movf	??_SD_SendCommand,w
  5410  0356  00A8               	movwf	SD_SendCommand@Checksum
  5411                           
  5412                           ;SD.c: 91:     ByteToSend = ARG2;
  5413  0357  0822               	movf	SD_SendCommand@ARG2,w
  5414  0358  00A5               	movwf	??_SD_SendCommand
  5415  0359  0825               	movf	??_SD_SendCommand,w
  5416  035A  00A7               	movwf	SD_SendCommand@ByteToSend
  5417                           
  5418                           ;SD.c: 92:     SPI_Write(ByteToSend);
  5419  035B  0827               	movf	SD_SendCommand@ByteToSend,w
  5420  035C  3186  2601  3183   	fcall	_SPI_Write
  5421                           
  5422                           ;SD.c: 93:     { Checksum = Checksum << 1; Checksum = Checksum ^ ByteToSend; Checksum = 
      +                          CRCTable[Checksum]; };
  5423  035F  0020               	movlb	0	; select bank0
  5424  0360  3528               	lslf	SD_SendCommand@Checksum,w
  5425  0361  00A5               	movwf	??_SD_SendCommand
  5426  0362  0825               	movf	??_SD_SendCommand,w
  5427  0363  00A8               	movwf	SD_SendCommand@Checksum
  5428  0364  0828               	movf	SD_SendCommand@Checksum,w
  5429  0365  0627               	xorwf	SD_SendCommand@ByteToSend,w
  5430  0366  00A5               	movwf	??_SD_SendCommand
  5431  0367  0825               	movf	??_SD_SendCommand,w
  5432  0368  00A8               	movwf	SD_SendCommand@Checksum
  5433  0369  0828               	movf	SD_SendCommand@Checksum,w
  5434  036A  3E7C               	addlw	low (_CRCTable| (0+32768))
  5435  036B  0084               	movwf	4
  5436  036C  3080               	movlw	high (_CRCTable| (0+32768))
  5437  036D  1803               	skipnc
  5438  036E  3E01               	addlw	1
  5439  036F  0085               	movwf	5
  5440  0370  0800               	movf	0,w	;code access
  5441  0371  00A5               	movwf	??_SD_SendCommand
  5442  0372  0825               	movf	??_SD_SendCommand,w
  5443  0373  00A8               	movwf	SD_SendCommand@Checksum
  5444                           
  5445                           ;SD.c: 95:     ByteToSend = ARG1;
  5446  0374  0823               	movf	SD_SendCommand@ARG1,w
  5447  0375  00A5               	movwf	??_SD_SendCommand
  5448  0376  0825               	movf	??_SD_SendCommand,w
  5449  0377  00A7               	movwf	SD_SendCommand@ByteToSend
  5450                           
  5451                           ;SD.c: 96:     SPI_Write(ByteToSend);
  5452  0378  0827               	movf	SD_SendCommand@ByteToSend,w
  5453  0379  3186  2601  3183   	fcall	_SPI_Write
  5454                           
  5455                           ;SD.c: 97:     { Checksum = Checksum << 1; Checksum = Checksum ^ ByteToSend; Checksum = 
      +                          CRCTable[Checksum]; };
  5456  037C  0020               	movlb	0	; select bank0
  5457  037D  3528               	lslf	SD_SendCommand@Checksum,w
  5458  037E  00A5               	movwf	??_SD_SendCommand
  5459  037F  0825               	movf	??_SD_SendCommand,w
  5460  0380  00A8               	movwf	SD_SendCommand@Checksum
  5461  0381  0828               	movf	SD_SendCommand@Checksum,w
  5462  0382  0627               	xorwf	SD_SendCommand@ByteToSend,w
  5463  0383  00A5               	movwf	??_SD_SendCommand
  5464  0384  0825               	movf	??_SD_SendCommand,w
  5465  0385  00A8               	movwf	SD_SendCommand@Checksum
  5466  0386  0828               	movf	SD_SendCommand@Checksum,w
  5467  0387  3E7C               	addlw	low (_CRCTable| (0+32768))
  5468  0388  0084               	movwf	4
  5469  0389  3080               	movlw	high (_CRCTable| (0+32768))
  5470  038A  1803               	skipnc
  5471  038B  3E01               	addlw	1
  5472  038C  0085               	movwf	5
  5473  038D  0800               	movf	0,w	;code access
  5474  038E  00A5               	movwf	??_SD_SendCommand
  5475  038F  0825               	movf	??_SD_SendCommand,w
  5476  0390  00A8               	movwf	SD_SendCommand@Checksum
  5477                           
  5478                           ;SD.c: 99:     ByteToSend = ARG0;
  5479  0391  0824               	movf	SD_SendCommand@ARG0,w
  5480  0392  00A5               	movwf	??_SD_SendCommand
  5481  0393  0825               	movf	??_SD_SendCommand,w
  5482  0394  00A7               	movwf	SD_SendCommand@ByteToSend
  5483                           
  5484                           ;SD.c: 100:     SPI_Write(ByteToSend);
  5485  0395  0827               	movf	SD_SendCommand@ByteToSend,w
  5486  0396  3186  2601  3183   	fcall	_SPI_Write
  5487                           
  5488                           ;SD.c: 101:     { Checksum = Checksum << 1; Checksum = Checksum ^ ByteToSend; Checksum =
      +                           CRCTable[Checksum]; };
  5489  0399  0020               	movlb	0	; select bank0
  5490  039A  3528               	lslf	SD_SendCommand@Checksum,w
  5491  039B  00A5               	movwf	??_SD_SendCommand
  5492  039C  0825               	movf	??_SD_SendCommand,w
  5493  039D  00A8               	movwf	SD_SendCommand@Checksum
  5494  039E  0828               	movf	SD_SendCommand@Checksum,w
  5495  039F  0627               	xorwf	SD_SendCommand@ByteToSend,w
  5496  03A0  00A5               	movwf	??_SD_SendCommand
  5497  03A1  0825               	movf	??_SD_SendCommand,w
  5498  03A2  00A8               	movwf	SD_SendCommand@Checksum
  5499  03A3  0828               	movf	SD_SendCommand@Checksum,w
  5500  03A4  3E7C               	addlw	low (_CRCTable| (0+32768))
  5501  03A5  0084               	movwf	4
  5502  03A6  3080               	movlw	high (_CRCTable| (0+32768))
  5503  03A7  1803               	skipnc
  5504  03A8  3E01               	addlw	1
  5505  03A9  0085               	movwf	5
  5506  03AA  0800               	movf	0,w	;code access
  5507  03AB  00A5               	movwf	??_SD_SendCommand
  5508  03AC  0825               	movf	??_SD_SendCommand,w
  5509  03AD  00A8               	movwf	SD_SendCommand@Checksum
  5510                           
  5511                           ;SD.c: 104:     ByteToSend = (Checksum << 1) | 0x01;
  5512  03AE  1403               	setc
  5513  03AF  0D28               	rlf	SD_SendCommand@Checksum,w
  5514  03B0  00A5               	movwf	??_SD_SendCommand
  5515  03B1  0825               	movf	??_SD_SendCommand,w
  5516  03B2  00A7               	movwf	SD_SendCommand@ByteToSend
  5517                           
  5518                           ;SD.c: 105:     SPI_Write(ByteToSend);
  5519  03B3  0827               	movf	SD_SendCommand@ByteToSend,w
  5520  03B4  3186  2601         	fcall	_SPI_Write
  5521  03B6  0008               	return
  5522  03B7                     __end_of_SD_SendCommand:	
  5523                           
  5524                           	psect	text12
  5525  0601                     __ptext12:	
  5526 ;; *************** function _SPI_Write *****************
  5527 ;; Defined at:
  5528 ;;		line 38 in file "SPI.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  Data_8bit       1    wreg     unsigned char 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  Data_8bit       1    0[BANK0 ] unsigned char 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  1    wreg      void 
  5535 ;; Registers used:
  5536 ;;		wreg
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5545 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5546 ;;Total ram usage:        1 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:    1
  5549 ;; This function calls:
  5550 ;;		Nothing
  5551 ;; This function is called by:
  5552 ;;		_SD_Init
  5553 ;;		_SD_SendCommand
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           
  5558                           ;psect for function _SPI_Write
  5559  0601                     _SPI_Write:	
  5560                           
  5561                           ;incstack = 0
  5562                           ; Regs used in _SPI_Write: [wreg]
  5563                           ;SPI_Write@Data_8bit stored from wreg
  5564  0601  0020               	movlb	0	; select bank0
  5565  0602  00A0               	movwf	SPI_Write@Data_8bit
  5566                           
  5567                           ;SPI.c: 39:     SSP1BUF = Data_8bit;
  5568  0603  0820               	movf	SPI_Write@Data_8bit,w
  5569  0604  0024               	movlb	4	; select bank4
  5570  0605  0091               	movwf	17	;volatile
  5571  0606                     l101:	
  5572                           ;SPI.c: 40:     while(SSP1STATbits.BF == 0);
  5573                           
  5574  0606  1814               	btfsc	20,0	;volatile
  5575  0607  0008               	return
  5576  0608  2E06               	goto	l101
  5577  0609                     __end_of_SPI_Write:	
  5578                           
  5579                           	psect	text13
  5580  05C9                     __ptext13:	
  5581 ;; *************** function _SD_Read8bitResponse *****************
  5582 ;; Defined at:
  5583 ;;		line 112 in file "SD.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;		None
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  readMessage     1    1[BANK0 ] unsigned char 
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      void 
  5590 ;; Registers used:
  5591 ;;		wreg, status,2, status,0, pclath, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5600 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5601 ;;Total ram usage:        2 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    2
  5604 ;; This function calls:
  5605 ;;		_SPI_Read
  5606 ;; This function is called by:
  5607 ;;		_SD_Init
  5608 ;;		_SD_OpenBlock
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           
  5613                           ;psect for function _SD_Read8bitResponse
  5614  05C9                     _SD_Read8bitResponse:	
  5615  05C9                     l1494:	
  5616                           ;incstack = 0
  5617                           ; Regs used in _SD_Read8bitResponse: [wreg+status,2+status,0+pclath+cstack]
  5618                           
  5619  05C9  3186  2609  3185   	fcall	_SPI_Read
  5620  05CC  0020               	movlb	0	; select bank0
  5621  05CD  00A0               	movwf	??_SD_Read8bitResponse
  5622  05CE  0820               	movf	??_SD_Read8bitResponse,w
  5623  05CF  00A1               	movwf	SD_Read8bitResponse@readMessage
  5624  05D0  0A21               	incf	SD_Read8bitResponse@readMessage,w
  5625  05D1  1903               	btfsc	3,2
  5626  05D2  2DC9               	goto	l1494
  5627                           
  5628                           ;SD.c: 121:     GLBL_Resp8 = readMessage;
  5629  05D3  0821               	movf	SD_Read8bitResponse@readMessage,w
  5630  05D4  00A0               	movwf	??_SD_Read8bitResponse
  5631  05D5  0820               	movf	??_SD_Read8bitResponse,w
  5632  05D6  00EF               	movwf	_GLBL_Resp8
  5633                           
  5634                           ;SD.c: 124:     SPI_Read();
  5635  05D7  3186  2609         	fcall	_SPI_Read
  5636  05D9  0008               	return
  5637  05DA                     __end_of_SD_Read8bitResponse:	
  5638                           
  5639                           	psect	text14
  5640  04F7                     __ptext14:	
  5641 ;; *************** function _SD_Read40bitResponse *****************
  5642 ;; Defined at:
  5643 ;;		line 141 in file "SD.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;		None
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;  readMessage     1    1[BANK0 ] unsigned char 
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      void 
  5650 ;; Registers used:
  5651 ;;		wreg, status,2, status,0, pclath, cstack
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5661 ;;Total ram usage:        2 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    2
  5664 ;; This function calls:
  5665 ;;		_SPI_Read
  5666 ;; This function is called by:
  5667 ;;		_SD_Init
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           
  5672                           ;psect for function _SD_Read40bitResponse
  5673  04F7                     _SD_Read40bitResponse:	
  5674  04F7                     l1516:	
  5675                           ;incstack = 0
  5676                           ; Regs used in _SD_Read40bitResponse: [wreg+status,2+status,0+pclath+cstack]
  5677                           
  5678  04F7  3186  2609  3184   	fcall	_SPI_Read
  5679  04FA  0020               	movlb	0	; select bank0
  5680  04FB  00A0               	movwf	??_SD_Read40bitResponse
  5681  04FC  0820               	movf	??_SD_Read40bitResponse,w
  5682  04FD  00A1               	movwf	SD_Read40bitResponse@readMessage
  5683  04FE  0A21               	incf	SD_Read40bitResponse@readMessage,w
  5684  04FF  1903               	btfsc	3,2
  5685  0500  2CF7               	goto	l1516
  5686                           
  5687                           ;SD.c: 150:     GLBL_Resp40[0] = readMessage;
  5688  0501  0821               	movf	SD_Read40bitResponse@readMessage,w
  5689  0502  00A0               	movwf	??_SD_Read40bitResponse
  5690  0503  0820               	movf	??_SD_Read40bitResponse,w
  5691  0504  0021               	movlb	1	; select bank1
  5692  0505  00B5               	movwf	_GLBL_Resp40^(0+128)
  5693                           
  5694                           ;SD.c: 151:     GLBL_Resp40[1] = SPI_Read();
  5695  0506  3186  2609  3184   	fcall	_SPI_Read
  5696  0509  0020               	movlb	0	; select bank0
  5697  050A  00A0               	movwf	??_SD_Read40bitResponse
  5698  050B  0820               	movf	??_SD_Read40bitResponse,w
  5699  050C  0021               	movlb	1	; select bank1
  5700  050D  00B6               	movwf	(_GLBL_Resp40^(0+128)+1)
  5701                           
  5702                           ;SD.c: 152:     GLBL_Resp40[2] = SPI_Read();
  5703  050E  3186  2609  3184   	fcall	_SPI_Read
  5704  0511  0020               	movlb	0	; select bank0
  5705  0512  00A0               	movwf	??_SD_Read40bitResponse
  5706  0513  0820               	movf	??_SD_Read40bitResponse,w
  5707  0514  0021               	movlb	1	; select bank1
  5708  0515  00B7               	movwf	(_GLBL_Resp40^(0+128)+2)
  5709                           
  5710                           ;SD.c: 153:     GLBL_Resp40[3] = SPI_Read();
  5711  0516  3186  2609  3184   	fcall	_SPI_Read
  5712  0519  0020               	movlb	0	; select bank0
  5713  051A  00A0               	movwf	??_SD_Read40bitResponse
  5714  051B  0820               	movf	??_SD_Read40bitResponse,w
  5715  051C  0021               	movlb	1	; select bank1
  5716  051D  00B8               	movwf	(_GLBL_Resp40^(0+128)+3)
  5717                           
  5718                           ;SD.c: 154:     GLBL_Resp40[4] = SPI_Read();
  5719  051E  3186  2609  3184   	fcall	_SPI_Read
  5720  0521  0020               	movlb	0	; select bank0
  5721  0522  00A0               	movwf	??_SD_Read40bitResponse
  5722  0523  0820               	movf	??_SD_Read40bitResponse,w
  5723  0524  0021               	movlb	1	; select bank1
  5724  0525  00B9               	movwf	(_GLBL_Resp40^(0+128)+4)
  5725                           
  5726                           ;SD.c: 157:     SPI_Read();
  5727  0526  3186  2609         	fcall	_SPI_Read
  5728  0528  0008               	return
  5729  0529                     __end_of_SD_Read40bitResponse:	
  5730                           
  5731                           	psect	text15
  5732  0609                     __ptext15:	
  5733 ;; *************** function _SPI_Read *****************
  5734 ;; Defined at:
  5735 ;;		line 46 in file "SPI.c"
  5736 ;; Parameters:    Size  Location     Type
  5737 ;;		None
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;		None
  5740 ;; Return value:  Size  Location     Type
  5741 ;;                  1    wreg      unsigned char 
  5742 ;; Registers used:
  5743 ;;		wreg
  5744 ;; Tracked objects:
  5745 ;;		On entry : 0/0
  5746 ;;		On exit  : 0/0
  5747 ;;		Unchanged: 0/0
  5748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5753 ;;Total ram usage:        0 bytes
  5754 ;; Hardware stack levels used:    1
  5755 ;; Hardware stack levels required when called:    1
  5756 ;; This function calls:
  5757 ;;		Nothing
  5758 ;; This function is called by:
  5759 ;;		_SD_Read8bitResponse
  5760 ;;		_SD_Read40bitResponse
  5761 ;;		_SD_CloseBlock
  5762 ;;		_readBytes
  5763 ;;		_openFile
  5764 ;;		_main
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           
  5769                           ;psect for function _SPI_Read
  5770  0609                     _SPI_Read:	
  5771                           
  5772                           ;SPI.c: 47:     SSP1BUF = 0xFF;
  5773                           
  5774                           ;incstack = 0
  5775                           ; Regs used in _SPI_Read: [wreg]
  5776  0609  30FF               	movlw	255
  5777  060A  0024               	movlb	4	; select bank4
  5778  060B  0091               	movwf	17	;volatile
  5779  060C                     l107:	
  5780                           ;SPI.c: 49:     while(SSP1STATbits.BF == 0);
  5781                           
  5782  060C  1C14               	btfss	20,0	;volatile
  5783  060D  2E0C               	goto	l107
  5784                           
  5785                           ;SPI.c: 50:     return SSP1BUF;
  5786  060E  0811               	movf	17,w	;volatile
  5787  060F  0008               	return
  5788  0610                     __end_of_SPI_Read:	
  5789                           
  5790                           	psect	text16
  5791  05E6                     __ptext16:	
  5792 ;; *************** function _SD_Check8bitResponse *****************
  5793 ;; Defined at:
  5794 ;;		line 132 in file "SD.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;  Byte            1    wreg     unsigned char 
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  Byte            1    0[BANK0 ] unsigned char 
  5799 ;;  match           1    1[BANK0 ] _Bool 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  1    wreg      _Bool 
  5802 ;; Registers used:
  5803 ;;		wreg, status,2
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5810 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5812 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5813 ;;Total ram usage:        2 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    1
  5816 ;; This function calls:
  5817 ;;		Nothing
  5818 ;; This function is called by:
  5819 ;;		_SD_Init
  5820 ;;		_SD_OpenBlock
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           
  5825                           ;psect for function _SD_Check8bitResponse
  5826  05E6                     _SD_Check8bitResponse:	
  5827                           
  5828                           ;incstack = 0
  5829                           ; Regs used in _SD_Check8bitResponse: [wreg+status,2]
  5830                           ;SD_Check8bitResponse@Byte stored from wreg
  5831  05E6  0020               	movlb	0	; select bank0
  5832  05E7  00A0               	movwf	SD_Check8bitResponse@Byte
  5833                           
  5834                           ;SD.c: 133:     _Bool match = 1;
  5835  05E8  01A1               	clrf	SD_Check8bitResponse@match
  5836  05E9  0AA1               	incf	SD_Check8bitResponse@match,f
  5837                           
  5838                           ;SD.c: 134:     if (Byte != GLBL_Resp8) match = 0;
  5839  05EA  0820               	movf	SD_Check8bitResponse@Byte,w
  5840  05EB  066F               	xorwf	_GLBL_Resp8,w
  5841  05EC  1D03               	btfss	3,2
  5842  05ED  01A1               	clrf	SD_Check8bitResponse@match
  5843                           
  5844                           ;SD.c: 135:     return match;
  5845  05EE  0821               	movf	SD_Check8bitResponse@match,w
  5846  05EF  0008               	return
  5847  05F0                     __end_of_SD_Check8bitResponse:	
  5848                           
  5849                           	psect	text17
  5850  0573                     __ptext17:	
  5851 ;; *************** function _SD_Check40bitResponse *****************
  5852 ;; Defined at:
  5853 ;;		line 166 in file "SD.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;  Byte4           1    wreg     unsigned char 
  5856 ;;  Byte3           1    0[BANK0 ] unsigned char 
  5857 ;;  Byte2           1    1[BANK0 ] unsigned char 
  5858 ;;  Byte1           1    2[BANK0 ] unsigned char 
  5859 ;;  Byte0           1    3[BANK0 ] unsigned char 
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;  Byte4           1    4[BANK0 ] unsigned char 
  5862 ;;  match           1    5[BANK0 ] _Bool 
  5863 ;; Return value:  Size  Location     Type
  5864 ;;                  1    wreg      _Bool 
  5865 ;; Registers used:
  5866 ;;		wreg, status,2
  5867 ;; Tracked objects:
  5868 ;;		On entry : 0/0
  5869 ;;		On exit  : 0/0
  5870 ;;		Unchanged: 0/0
  5871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5872 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5873 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5875 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5876 ;;Total ram usage:        6 bytes
  5877 ;; Hardware stack levels used:    1
  5878 ;; Hardware stack levels required when called:    1
  5879 ;; This function calls:
  5880 ;;		Nothing
  5881 ;; This function is called by:
  5882 ;;		_SD_Init
  5883 ;; This function uses a non-reentrant model
  5884 ;;
  5885                           
  5886                           
  5887                           ;psect for function _SD_Check40bitResponse
  5888  0573                     _SD_Check40bitResponse:	
  5889                           
  5890                           ;incstack = 0
  5891                           ; Regs used in _SD_Check40bitResponse: [wreg+status,2]
  5892                           ;SD_Check40bitResponse@Byte4 stored from wreg
  5893  0573  0020               	movlb	0	; select bank0
  5894  0574  00A4               	movwf	SD_Check40bitResponse@Byte4
  5895                           
  5896                           ;SD.c: 167:     _Bool match = 1;
  5897  0575  01A5               	clrf	SD_Check40bitResponse@match
  5898  0576  0AA5               	incf	SD_Check40bitResponse@match,f
  5899                           
  5900                           ;SD.c: 168:     if (Byte4 != GLBL_Resp40[0]) match = 0;
  5901  0577  0021               	movlb	1	; select bank1
  5902  0578  0835               	movf	_GLBL_Resp40^(0+128),w
  5903  0579  0020               	movlb	0	; select bank0
  5904  057A  0624               	xorwf	SD_Check40bitResponse@Byte4,w
  5905  057B  1D03               	btfss	3,2
  5906  057C  01A5               	clrf	SD_Check40bitResponse@match
  5907                           
  5908                           ;SD.c: 169:     if (Byte3 != GLBL_Resp40[1]) match = 0;
  5909  057D  0021               	movlb	1	; select bank1
  5910  057E  0836               	movf	(_GLBL_Resp40^(0+128)+1),w
  5911  057F  0020               	movlb	0	; select bank0
  5912  0580  0620               	xorwf	SD_Check40bitResponse@Byte3,w
  5913  0581  1D03               	btfss	3,2
  5914  0582  01A5               	clrf	SD_Check40bitResponse@match
  5915                           
  5916                           ;SD.c: 170:     if (Byte2 != GLBL_Resp40[2]) match = 0;
  5917  0583  0021               	movlb	1	; select bank1
  5918  0584  0837               	movf	(_GLBL_Resp40^(0+128)+2),w
  5919  0585  0020               	movlb	0	; select bank0
  5920  0586  0621               	xorwf	SD_Check40bitResponse@Byte2,w
  5921  0587  1D03               	btfss	3,2
  5922  0588  01A5               	clrf	SD_Check40bitResponse@match
  5923                           
  5924                           ;SD.c: 171:     if (Byte1 != GLBL_Resp40[3]) match = 0;
  5925  0589  0021               	movlb	1	; select bank1
  5926  058A  0838               	movf	(_GLBL_Resp40^(0+128)+3),w
  5927  058B  0020               	movlb	0	; select bank0
  5928  058C  0622               	xorwf	SD_Check40bitResponse@Byte1,w
  5929  058D  1D03               	btfss	3,2
  5930  058E  01A5               	clrf	SD_Check40bitResponse@match
  5931                           
  5932                           ;SD.c: 172:     if (Byte0 != GLBL_Resp40[4]) match = 0;
  5933  058F  0021               	movlb	1	; select bank1
  5934  0590  0839               	movf	(_GLBL_Resp40^(0+128)+4),w
  5935  0591  0020               	movlb	0	; select bank0
  5936  0592  0623               	xorwf	SD_Check40bitResponse@Byte0,w
  5937  0593  1D03               	btfss	3,2
  5938  0594  01A5               	clrf	SD_Check40bitResponse@match
  5939                           
  5940                           ;SD.c: 173:     return match;
  5941  0595  0825               	movf	SD_Check40bitResponse@match,w
  5942  0596  0008               	return
  5943  0597                     __end_of_SD_Check40bitResponse:	
  5944                           
  5945                           	psect	text18
  5946  0610                     __ptext18:	
  5947 ;; *************** function _DAC_Init *****************
  5948 ;; Defined at:
  5949 ;;		line 30 in file "DAC.c"
  5950 ;; Parameters:    Size  Location     Type
  5951 ;;		None
  5952 ;; Auto vars:     Size  Location     Type
  5953 ;;		None
  5954 ;; Return value:  Size  Location     Type
  5955 ;;                  1    wreg      void 
  5956 ;; Registers used:
  5957 ;;		wreg
  5958 ;; Tracked objects:
  5959 ;;		On entry : 0/0
  5960 ;;		On exit  : 0/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5967 ;;Total ram usage:        0 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; Hardware stack levels required when called:    1
  5970 ;; This function calls:
  5971 ;;		Nothing
  5972 ;; This function is called by:
  5973 ;;		_init
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           
  5978                           ;psect for function _DAC_Init
  5979  0610                     _DAC_Init:	
  5980                           
  5981                           ;DAC.c: 31:     TRISA = 0xFB;
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _DAC_Init: [wreg]
  5985  0610  30FB               	movlw	251
  5986  0611  0021               	movlb	1	; select bank1
  5987  0612  008C               	movwf	12	;volatile
  5988                           
  5989                           ;DAC.c: 32:     DAC1CON0 = 0xE0;
  5990  0613  30E0               	movlw	224
  5991  0614  002B               	movlb	11	; select bank11
  5992  0615  008E               	movwf	14	;volatile
  5993  0616  0008               	return
  5994  0617                     __end_of_DAC_Init:	
  5995                           
  5996                           	psect	intentry
  5997  0004                     __pintentry:	
  5998 ;; *************** function _isr *****************
  5999 ;; Defined at:
  6000 ;;		line 119 in file "main.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;		None
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;  level           2    8[COMMON] short 
  6005 ;; Return value:  Size  Location     Type
  6006 ;;                  1    wreg      void 
  6007 ;; Registers used:
  6008 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6009 ;; Tracked objects:
  6010 ;;		On entry : 0/0
  6011 ;;		On exit  : 0/0
  6012 ;;		Unchanged: 0/0
  6013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6015 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6016 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6017 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6018 ;;Total ram usage:       10 bytes
  6019 ;; Hardware stack levels used:    1
  6020 ;; This function calls:
  6021 ;;		Nothing
  6022 ;; This function is called by:
  6023 ;;		Interrupt level 1
  6024 ;; This function uses a non-reentrant model
  6025 ;;
  6026                           
  6027  0004                     _isr:	
  6028                           
  6029                           ;incstack = 0
  6030  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6031                           
  6032                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0]
  6033  0005  3180               	pagesel	$
  6034                           
  6035                           ;main.c: 120:     PIR1bits.TMR2IF = 0;
  6036  0006  0020               	movlb	0	; select bank0
  6037  0007  1091               	bcf	17,1	;volatile
  6038                           
  6039                           ;main.c: 121:     PORTCbits.RC0 = 1;
  6040  0008  140E               	bsf	14,0	;volatile
  6041                           
  6042                           ;main.c: 123:     short level = buffer[buffer_read_index++] - 0x8000;
  6043  0009  087B               	movf	_buffer_read_index+1,w
  6044  000A  00F1               	movwf	??_isr+1
  6045  000B  087A               	movf	_buffer_read_index,w
  6046  000C  00F0               	movwf	??_isr
  6047  000D  35F0               	lslf	??_isr,f
  6048  000E  0DF1               	rlf	??_isr+1,f
  6049  000F  30F0               	movlw	240
  6050  0010  00F2               	movwf	??_isr+2
  6051  0011  3026               	movlw	38
  6052  0012  00F3               	movwf	??_isr+3
  6053  0013  0870               	movf	??_isr,w
  6054  0014  0772               	addwf	??_isr+2,w
  6055  0015  0086               	movwf	6
  6056  0016  0871               	movf	??_isr+1,w
  6057  0017  3D73               	addwfc	??_isr+3,w
  6058  0018  0087               	movwf	7
  6059  0019  3F40               	moviw [0]fsr1
  6060  001A  00F4               	movwf	??_isr+4
  6061  001B  3F41               	moviw [1]fsr1
  6062  001C  00F5               	movwf	??_isr+5
  6063  001D  0874               	movf	??_isr+4,w
  6064  001E  3E00               	addlw	0
  6065  001F  00F6               	movwf	??_isr+6
  6066  0020  3080               	movlw	128
  6067  0021  3D75               	addwfc	??_isr+5,w
  6068  0022  00F7               	movwf	??_isr+7
  6069  0023  0876               	movf	??_isr+6,w
  6070  0024  00F8               	movwf	isr@level
  6071  0025  0877               	movf	??_isr+7,w
  6072  0026  00F9               	movwf	isr@level+1
  6073  0027  3001               	movlw	1
  6074  0028  07FA               	addwf	_buffer_read_index,f
  6075  0029  3000               	movlw	0
  6076  002A  3DFB               	addwfc	_buffer_read_index+1,f
  6077                           
  6078                           ;main.c: 124:     DAC1REFH = (level & 0xff00) >> 8;
  6079  002B  0879               	movf	isr@level+1,w
  6080  002C  002B               	movlb	11	; select bank11
  6081  002D  0090               	movwf	16	;volatile
  6082                           
  6083                           ;main.c: 125:     DAC1REFL = (level & 0x00C0) << 8;
  6084  002E  018F               	clrf	15	;volatile
  6085                           
  6086                           ;main.c: 126:     DAC1LD = 1;
  6087  002F  140D               	bsf	13,0	;volatile
  6088                           
  6089                           ;main.c: 128:     if (buffer_read_index >= 128) buffer_read_index = 0;
  6090  0030  3000               	movlw	0
  6091  0031  027B               	subwf	_buffer_read_index+1,w
  6092  0032  3080               	movlw	128
  6093  0033  1903               	skipnz
  6094  0034  027A               	subwf	_buffer_read_index,w
  6095  0035  1C03               	skipc
  6096  0036  2839               	goto	i1l1194
  6097  0037  01FA               	clrf	_buffer_read_index
  6098  0038  01FB               	clrf	_buffer_read_index+1
  6099  0039                     i1l1194:	
  6100                           
  6101                           ;main.c: 129:     PORTCbits.RC0 = 0;
  6102  0039  0020               	movlb	0	; select bank0
  6103  003A  100E               	bcf	14,0	;volatile
  6104  003B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6105  003C  0009               	retfie
  6106  003D                     __end_of_isr:	
  6107  007E                     btemp	set	126	;btemp
  6108  007E                     int$flags	set	126
  6109  007E                     wtemp0	set	126


Data Sizes:
    Strings     20
    Constant    256
    Data        11
    BSS         24
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     75      80
    BANK1            80      0      26
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           16      0       0
    BANK23            0      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    readBytes@dest	PTR unsigned char  size(1) Largest target is 28
		 -> openFile@data(BANK0[8]), openFile@fmt(BANK0[28]), openFile@riff(BANK0[8]), 

    fourCCeq@b	PTR unsigned char  size(2) Largest target is 5
		 -> STR_8(CODE[5]), STR_6(CODE[5]), STR_4(CODE[5]), STR_2(CODE[5]), 

    fourCCeq@a	PTR unsigned char  size(1) Largest target is 28
		 -> openFile@data(BANK0[8]), fmt.fmtHeader(BANK0[8]), openFile@fmt(BANK0[28]), openFile@riff(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_openFile
    _openFile->_SD_OpenBlock
    _SD_OpenBlock->_SD_SendCommand
    _init->_SD_Init
    _SD_Init->_SD_SendCommand
    _SD_SendCommand->_SPI_Write

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _isr in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _isr in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _isr in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _isr in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _isr in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _isr in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _isr in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    9676
                                             71 BANK0      4     4      0
                      _SD_CloseBlock
                       _SD_OpenBlock
                           _SPI_Read
                              _error
                               _init
                           _openFile
                         _timer_Init
 ---------------------------------------------------------------------------------
 (1) _timer_Init                                           4     0      4      98
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _openFile                                            50    46      4    4058
                                             21 BANK0     50    46      4
                       _SD_OpenBlock
                           _SPI_Read
                              _error
                           _fourCCeq
                          _readBytes
 ---------------------------------------------------------------------------------
 (2) _readBytes                                            7     5      2     417
                                              0 BANK0      7     5      2
                      _SD_CloseBlock
                           _SPI_Read
 ---------------------------------------------------------------------------------
 (3) _SD_CloseBlock                                        0     0      0       0
                           _SPI_Read
 ---------------------------------------------------------------------------------
 (2) _fourCCeq                                             8     6      2     570
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _error                                                2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _SD_OpenBlock                                        12     8      4    2627
                                              9 BANK0     12     8      4
               _SD_Check8bitResponse
                _SD_Read8bitResponse
                     _SD_SendCommand
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    2871
                           _DAC_Init
                            _SD_Init
                           _SPI_Init
 ---------------------------------------------------------------------------------
 (2) _SPI_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SD_Init                                              1     1      0    2871
                                              9 BANK0      1     1      0
              _SD_Check40bitResponse
               _SD_Check8bitResponse
               _SD_Read40bitResponse
                _SD_Read8bitResponse
                     _SD_SendCommand
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SD_SendCommand                                       8     4      4    2269
                                              1 BANK0      8     4      4
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (4) _SPI_Write                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SD_Read8bitResponse                                  2     2      0      46
                                              0 BANK0      2     2      0
                           _SPI_Read
 ---------------------------------------------------------------------------------
 (3) _SD_Read40bitResponse                                 2     2      0      46
                                              0 BANK0      2     2      0
                           _SPI_Read
 ---------------------------------------------------------------------------------
 (3) _SPI_Read                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SD_Check8bitResponse                                 2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _SD_Check40bitResponse                                6     2      4     442
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _DAC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 10    10      0      15
                                              0 COMMON    10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SD_CloseBlock
     _SPI_Read
   _SD_OpenBlock
     _SD_Check8bitResponse
     _SD_Read8bitResponse
       _SPI_Read
     _SD_SendCommand
       _SPI_Write
   _SPI_Read
   _error
   _init
     _DAC_Init
     _SD_Init
       _SD_Check40bitResponse
       _SD_Check8bitResponse
       _SD_Read40bitResponse
         _SPI_Read
       _SD_Read8bitResponse
         _SPI_Read
       _SD_SendCommand
         _SPI_Write
       _SPI_Write
     _SPI_Init
   _openFile
     _SD_OpenBlock
       _SD_Check8bitResponse
       _SD_Read8bitResponse
         _SPI_Read
       _SD_SendCommand
         _SPI_Write
     _SPI_Read
     _error
     _fourCCeq
     _readBytes
       _SD_CloseBlock
         _SPI_Read
       _SPI_Read
   _timer_Init

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BIGRAM             3F0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITCOMMON            E      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
COMMON               E      A       E       3      100.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
STACK                0      0       0       4        0.0%
BANK0               50     4B      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK0            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      1A       8       32.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
ABS                  0      0      78      13        0.0%
BITBANK4            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK5            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK6            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITBANK7            50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BANK7               50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITBANK8            50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8               50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITBANK9            50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9               50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITBANK10           50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10              50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITBANK11           50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
DATA                 0      0      78      30        0.0%
BITBANK12           30      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12              30      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK13           50      0       0      33        0.0%
BANK13              50      0       0      34        0.0%
BITBANK14           50      0       0      35        0.0%
BANK14              50      0       0      36        0.0%
BITBANK15           50      0       0      37        0.0%
BANK15              50      0       0      38        0.0%
BITBANK16           50      0       0      39        0.0%
BANK16              50      0       0      40        0.0%
BITBANK17           50      0       0      41        0.0%
BANK17              50      0       0      42        0.0%
BITBANK18           50      0       0      43        0.0%
BANK18              50      0       0      44        0.0%
BITBANK19           50      0       0      45        0.0%
BANK19              50      0       0      46        0.0%
BITBANK20           50      0       0      47        0.0%
BANK20              50      0       0      48        0.0%
BITBANK21           50      0       0      49        0.0%
BANK21              50      0       0      50        0.0%
BITBANK22           50      0       0      51        0.0%
BANK22              10      0       0      52        0.0%
BITBANK23           50      0       0      53        0.0%
BANK23               0      0       0      54        0.0%
BITBANK24           50      0       0      55        0.0%
BANK24               0      0       0      56        0.0%
BITBANK25           20      0       0      57        0.0%
BANK25               0      0       0      58        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Apr 02 17:10:25 2019

            SD_OpenBlock@address 0029                              l101 0606                              l107 060C  
                            l222 05B7                              l127 04AE                              u545 04DC  
                            u555 04BD                              u715 0209                              u725 0227  
                            _isr 0004           ??_SD_Check8bitResponse 0020                  ?_SD_SendCommand 0021  
                           l2010 049A                             l2002 047F                             l2012 049F  
                           l2004 04A9                             l2014 04A4                             l2006 0490  
                           l2008 0495                             l1516 04F7                             l1630 052C  
                           l1800 01B8                             l1572 03E7                             l1636 0545  
                           l1812 01DB                             l1494 05C9                             l1662 04F1  
                           l1830 01FA                             l1584 041C                             l1664 04B3  
                           l1760 02BA                             l1744 0280                             l1824 01F0  
                           l1578 03FB                             l1754 02A1                             l1690 0471  
                           l1682 0461                             l1772 02DD                             l1764 02CA  
                           l1748 0288                             l1676 0459                             l1668 044F  
                           l1860 0260                             l1844 0220                             l1828 01F8  
                           l1782 0309                             l1768 02D3                             l1688 0469  
                           l1696 0479                             ?_isr 0070                             STR_1 0626  
                           STR_2 0626                             STR_3 0621                             STR_4 0621  
                           STR_5 017C                             STR_6 017C                             STR_7 062B  
                           STR_8 062B                             _T2PR 0494                             _main 0181  
                           _init 05B4                  __end_of_SD_Init 0448                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             btemp 007E  
               __end_of_DAC_Init 0617                             start 003D    __size_of_SD_Read40bitResponse 0032  
                ??_SD_CloseBlock 0020     __size_of_SD_Read8bitResponse 0011                 __end_of_CRCTable 017C  
                          ??_isr 0070                    __CFG_PLLEN$ON 0000                            ?_main 0070  
                          ?_init 0070                    __CFG_WDTE$OFF 0000                            _ANSC3 0C73  
                          _T2CON 0495                            _TRISA 008C                            _error 05F9  
                          _sdata 00AE                            _state 006D                 __end_of_SPI_Init 05B4  
               __end_of_SPI_Read 0610                            status 0003                            wtemp0 007E  
             __size_of_SPI_Write 0008                  __initialization 003F                     __end_of_main 0266  
                   __end_of_init 05C9               _buffer_write_index 006B                           ??_main 0067  
                         ??_init 002A         SD_Check8bitResponse@Byte 0020                           _DAC1LD 2C68  
                         ?_error 0070                        ??_SD_Init 0029                           _RC2PPS 0EA2  
                         _RC4PPS 0EA4                           i1l1194 0039                           _OSCCON 009B  
                         _TRISC2 0472                           _TRISC3 0473                           _TRISC4 0474  
                         _TRISC7 0477                    SD_OpenBlock@a 0031                 __end_of_fourCCeq 054F  
                         _buffer 26F0         SD_SendCommand@ByteToSend 0027                 __end_of_openFile 0318  
              __end_of_SPI_Write 0609                           error@e 0021                     __pdataCOMMON 007D  
                      ?_DAC_Init 0070          __end_of__initialization 0078   __size_of_SD_Check40bitResponse 0024  
  __end_of_SD_Check40bitResponse 0597                   __pcstackCOMMON 0070                     __pidataBANK0 0617  
                   __pidataBANK1 061C                    __end_of_error 0601                        ?_SPI_Init 0070  
                      ?_SPI_Read 0070                 ??_SD_SendCommand 0025                       ??_DAC_Init 0020  
            _SD_Read8bitResponse 05C9                          ??_error 0020                       __pbssBANK1 00A0  
             __size_of_readBytes 0048                       __pmaintext 0181             ?_SD_Read8bitResponse 0070  
                     _blockIndex 00AC                      openFile@fmt 004B                       __pintentry 0004  
                     ??_SPI_Init 0020                       ??_SPI_Read 0020     __end_of_SD_Read40bitResponse 0529  
                        _SSP1ADD 0212                          _SSP1BUF 0211                          _SD_Init 03B7  
  __size_of_SD_Check8bitResponse 000A                        ?_fourCCeq 0020                     readBytes@len 0020  
                      ?_openFile 0035            ??_SD_Read8bitResponse 0020            __end_of_SD_CloseBlock 05F9  
                        _address 00A0                          __ptext1 0448                          __ptext2 0266  
                        __ptext3 04AF                          __ptext4 05F0                          __ptext5 0529  
                        __ptext6 05F9                          __ptext7 054F                          __ptext8 05B4  
                        __ptext9 0597                __end_of_readBytes 04F7                     __size_of_isr 0039  
                        clrloop0 05DB             end_of_initialization 0078                       ??_fourCCeq 0022  
     SD_Check40bitResponse@Byte0 0023       SD_Check40bitResponse@Byte1 0022       SD_Check40bitResponse@Byte2 0021  
     SD_Check40bitResponse@Byte3 0020       SD_Check40bitResponse@Byte4 0024       SD_Check40bitResponse@match 0025  
                     ??_openFile 0039                       _timer_Init 0448                        _PORTBbits 000D  
                      _PORTCbits 000E                        _SSPDATPPS 0E3B                        _SSPCLKPPS 0E3A  
               __CFG_FOSC$INTOSC 0000                        _TRISBbits 008D                        _TRISCbits 008E  
                  __pbssBIGRAM_1 26F0                        _SPI_Write 0601                __size_of_DAC_Init 0007  
                  ?_SD_OpenBlock 0029  SD_Read40bitResponse@readMessage 0021             _SD_Read40bitResponse 04F7  
                   _global_error 007C                    __pidataCOMMON 0630                __size_of_SPI_Init 001D  
              __size_of_SPI_Read 0007              start_initialization 003F               SPI_Write@Data_8bit 0020  
                    __end_of_isr 003D                       ?_SPI_Write 0070                   ??_SD_OpenBlock 002D  
          ?_SD_Read40bitResponse 0070                    _samplePending 00B4                       readBytes@i 0025  
          _SD_Check40bitResponse 0573                      __pdataBANK0 006B                      __pdataBANK1 00B5  
                    ?_timer_Init 0020                      __pbssCOMMON 007A                        ___latbits 0003  
                  __pcstackBANK0 0020                         ?_SD_Init 0070                __size_of_fourCCeq 0026  
              __size_of_openFile 00B2     __end_of_SD_Check8bitResponse 05F0                     openFile@data 0043  
                   openFile@riff 003A                         _DAC1CON0 058E                         _DAC1REFH 0590  
                       _DAC1REFL 058F                        _isPlaying 007D                      _bitsPerSamp 00B0  
                    _GLBL_Resp40 00B5                         _DAC_Init 0610                      ??_SPI_Write 0020  
                      _readBytes 04AF                   __size_of_error 0008                         _T2CLKCON 0497  
                       _CRCTable 007C          __size_of_SD_SendCommand 009F              __size_of_timer_Init 0067  
         ??_SD_Read40bitResponse 0020      __end_of_SD_Read8bitResponse 05DA                        clear_ram0 05DA  
                       _PIE1bits 0091           SD_SendCommand@CMD_6bit 0026                         _PIR1bits 0011  
         ?_SD_Check40bitResponse 0020                         _SSP1CON1 0215                         _SSP1STAT 0214  
           __end_of_SD_OpenBlock 0573                         _SPI_Init 0597                         _SPI_Read 0609  
                     ?_readBytes 0020           __size_of_SD_CloseBlock 0009                 __size_of_SD_Init 0091  
                      fourCCeq@a 0026                        fourCCeq@b 0020                        fourCCeq@i 0027  
                  readBytes@dest 0024           SD_SendCommand@Checksum 0028                      _readMessage 006E  
                     _ANSELBbits 018D                         _channels 00B2                        openFile@a 0035  
                       __ptext10 03B7                         __ptext11 0318                         __ptext12 0601  
                       __ptext13 05C9                         __ptext14 04F7                         __ptext15 0609  
                       __ptext16 05E6                         __ptext17 0573                         __ptext18 0610  
                   _SSP1CON1bits 0215                         _filesize 00A4             _SD_Check8bitResponse 05E6  
                       _fourCCeq 0529                       _GLBL_Resp8 006F                    __size_of_main 00E5  
                  __size_of_init 0015               SD_SendCommand@ARG0 0024               SD_SendCommand@ARG1 0023  
             SD_SendCommand@ARG2 0022               SD_SendCommand@ARG3 0021                         _sampRate 00A8  
                       _openFile 0266                         int$flags 007E                    _SD_CloseBlock 05F0  
                   ??_timer_Init 0024                     _SSP1STATbits 0214                      _OSCSTATbits 009C  
               openFile@response 0042   SD_Read8bitResponse@readMessage 0021                       _INTCONbits 000B  
                       isr@level 0078                      ??_readBytes 0022            ?_SD_Check8bitResponse 0070  
                       intlevel1 0000                   _SD_SendCommand 0318        SD_Check8bitResponse@match 0021  
             __end_of_timer_Init 04AF                   timer_Init@rate 0020            __size_of_SD_OpenBlock 0024  
                 ?_SD_CloseBlock 0070                _buffer_read_index 007A                    __pstringtext1 007C  
                  __pstringtext2 0621                    __pstringtext3 0626                    __pstringtext4 062B  
                  __pstringtext5 0000           __end_of_SD_SendCommand 03B7                     _SD_OpenBlock 054F  
        ??_SD_Check40bitResponse 0024  
